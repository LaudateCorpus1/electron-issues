[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23242641",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23242641",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23242641,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-26T03:54:59Z",
    "updated_at": "2013-08-26T03:54:59Z",
    "body": "The WebKit only allows setting referrer for urls with `http` or `https` protocols, so the handler registered with `protocol.registerProtocol` will not be able to receive the referrer, which is critical for implementing custom browser resource loader. The only solution I can thought of is to patch WebKit.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23267375",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23267375",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23267375,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-26T14:47:18Z",
    "updated_at": "2013-08-26T14:47:18Z",
    "body": "Forgive my ignorance here, but I don't understand why the referrer header is required. Is it required to resolve relative URLs or something?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23270312",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23270312",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23270312,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-26T15:20:49Z",
    "updated_at": "2013-08-26T15:20:49Z",
    "body": "it's required to resolve file paths in URLs with custom protocols, when writing something like `src=\"atom://image.png\"` in HTML, browser would not translate it to `src=\"atom:///path/to/current/page/image.png\"`, because the browser thought it's an absolute URL. To correctly provide the requested file, we have to know from which page the request was sent, and then resolve the paths.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23275066",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23275066",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23275066,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-26T16:18:19Z",
    "updated_at": "2013-08-26T16:19:02Z",
    "body": "Yeah, that makes sense. We could use the custom protocol only to resolve absolute references on the load path, but I think it would probably be better to traverse the ancestor directories looking for `node_modules` similar to how node resolves a path when `require` is used. What do you think about patching Chromium then? I know we wanted to minimize changes but this feature seems really important to me. Perhaps we could get the patch upstreamed? Maybe @aroben could offer an opinion or assistance?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23307568",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23307568",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23307568,
    "user": {
      "login": "aroben",
      "id": 917945,
      "avatar_url": "https://avatars1.githubusercontent.com/u/917945?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aroben",
      "html_url": "https://github.com/aroben",
      "followers_url": "https://api.github.com/users/aroben/followers",
      "following_url": "https://api.github.com/users/aroben/following{/other_user}",
      "gists_url": "https://api.github.com/users/aroben/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aroben/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aroben/subscriptions",
      "organizations_url": "https://api.github.com/users/aroben/orgs",
      "repos_url": "https://api.github.com/users/aroben/repos",
      "events_url": "https://api.github.com/users/aroben/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aroben/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2013-08-27T01:29:46Z",
    "updated_at": "2013-08-27T01:29:46Z",
    "body": "I'm not sure I understand the requirements. Can you give some examples of URLs and the file paths they should map to?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23310660",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23310660",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23310660,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-27T03:17:47Z",
    "updated_at": "2013-08-27T03:17:47Z",
    "body": "We're looking for a coherent mechanism for referring to images and other static resources provided by third-party packages. I'm imagining that `index.html` sits in Atom's root directory, and we resolve any static asset references against the same load path we use for requiring scripts. That means I could refer to `atom://core/images/logo.png` and it would resolve to `Atom.app/Contents/Resources/node_modules/core/images/logo.png`. Or the a custom tree view package could write an image tag to the DOM referencing `atom://tree-view/images/oak.png` that would resolve to `~/.atom/packages/tree-view/images/oak.png`. Right now everything is relative to `index.html` which is sitting in some directory inside the app bundle on disk, which is pretty useless. Maybe all relative paths should be resolved against the load path by default? Because a relative path is otherwise pretty useless.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23310963",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23310963",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23310963,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-27T03:28:48Z",
    "updated_at": "2013-08-27T03:28:48Z",
    "body": "This is how I think the API would be like:\n\n``` javascript\nvar protocol = require('protocol');\nprotocol.registerProtocol('atom', function(url, referrer) {\n  // The url is 'atom://avatar.png',\n  // and the referrer is 'file:///Applications/Atom.app/.../index.html',\n  // Then we calculate the actual path to requested resource by traversing ancestor directories:\n  // '/Applications/Atom.app/.../avatar.png',\n  return new protocol.RequestFileJob(calculatePathFromUrlAndReferrer(url, referrer));\n});\n```\n\nAs for referrer, I just found that adding `<meta name=\"referrer\" content=\"always\">` in HTML would force WebKit to send referrer to all requests, so it's not a problem any more.\n\nBut another problem is, to resolve resource path like node's `require`, we have to know from which `.js` file the request is sent. In the case of ArchiveView, we could add an image when creating the view in `/Applications/Atom.app/Contents/Resources/node_modules/archive-view/lib/archive-view.js`, or  in `~/.atom/packages/archive-view/lib/archive-view.js`, in order to know whether `atom://image/zip.png` points to `/Applications/Atom.app/Contents/Resources/node_modules/archive-view/images/zip.png` or `~/.atom/packages/archive-view/images/zip.png`, we have to know which `.js` file requests the image. The `referrer` just always points to the `index.html`.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23341392",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23341392",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23341392,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-27T14:38:17Z",
    "updated_at": "2013-08-27T14:38:17Z",
    "body": "It seems really difficult (if not impossible?) to tie URL references in the DOM back to the `.js` file that inserted them. Maybe everything can just always be relative to `index.html`, which will be a sibling of the built-in `node_modules`, but we can also add `~/.atom/packages` to the load path. Then you will have to explicitly mention the package name in the path `atom://archive-view/images/zip.png` instead of `atom://images/zip.png`. I guess alternatively we should just use `fsUtils.resolveOnLoadPath('../images/zip.png')` to make paths absolute before inserting them into the DOM. We could potentially add a convenience function in our view layer to help make this easy:\n\n``` coffee-script\nclass SomeView extends View\n  @content: -> @img src: @resolve('../images/flower.png')\n```\n\nCould we add some kind of mechanism like `require.resolve` that would resolve relative paths to any kind of file, not just scripts? Then we could just handle it explicitly in scripts. Maybe that makes the custom protocol less necessary? Either way, it seems like once the URL is in the DOM it will be very hard to determine where it came from.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23358594",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23358594",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23358594,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-27T18:19:49Z",
    "updated_at": "2013-08-27T18:19:49Z",
    "body": "@zcbenz After talking with Kevin the API you propose for registering a custom protocol from the JavaScript layer looks really good. Is it possible to provide a similar API to allow us to intercept relative `file://` URLs? We would like to make it possible to refer to a `less` stylesheet in markup for example and automatically compile it before handing it back to the browser.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23372792",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23372792",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23372792,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-27T21:33:56Z",
    "updated_at": "2013-08-27T21:33:56Z",
    "body": "Another thought: I wonder if it would improve performance to register callbacks that are associated with regular expressions? Then we can run the regular expression against the URL in the native layer and only call into JS if it matches a certain pattern.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23419988",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23419988",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23419988,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-28T14:41:53Z",
    "updated_at": "2013-08-28T14:41:53Z",
    "body": "> It seems really difficult (if not impossible?) to tie URL references in the DOM back to the .js file that inserted them. \n\nI researched on Chromium's resource loader code, making it provides the information of from where the url request would take too much efforts, I think we can give up on this.\n\n> Could we add some kind of mechanism like require.resolve that would resolve relative paths to any kind of file, not just scripts? Then we could just handle it explicitly in scripts. Maybe that makes the custom protocol less necessary? \n\nUsing javascript to resolve the path could be one solution, but it won't work if we want to use the `atom://...` urls in CSS, so I think using custom protocols is still necessary.\n\n> Is it possible to provide a similar API to allow us to intercept relative file:// URLs? We would like to make it possible to refer to a less stylesheet in markup for example and automatically compile it before handing it back to the browser.\n\nYes, it's possible to provide API to intercept url requests, but it can only get absolute URLs, since the browser would  convert relative URLs to absolute URLs before the request is sent. Using the intercept API to compile LESS on the fly is doable, it may need some extra APIs to make browser cache work correctly.\n\n> Another thought: I wonder if it would improve performance to register callbacks that are associated with regular expressions? Then we can run the regular expression against the URL in the native layer and only call into JS if it matches a certain pattern.\n\nThere are several regular expression engines can be used in C++, and I think using regular expression in C++ is really a disaster, there is some discussions: https://groups.google.com/a/chromium.org/forum/#!searchin/chromium-dev/regular$20expression/chromium-dev/AhjdDYOmxi8/c9-C3-DF2QAJ. The problem is there are differences between JavaScript's syntax and other C++ libraries' regular expression syntax, and It may even not improve the performance since V8 does very good optimizations. So just do everything in JS may be a better solution.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23420621",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23420621",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23420621,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-28T14:49:08Z",
    "updated_at": "2013-08-28T14:49:08Z",
    "body": "It sounds like the custom protocol API you've proposed would be a really good starting point.\n\n> The problem is there are differences between JavaScript's syntax and other C++ libraries' regular expression syntax, and It may even not improve the performance since V8 does very good optimizations. So just do everything in JS may be a better solution.\n\nYeah, we probably should wait to see if it's actually a problem before doing anything. If we _did_ want to go this route, however, couldn't we use Irregexp the same engine that v8 uses? But I'm down to wait to see if it's an issue.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23422054",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23422054",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23422054,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-08-28T15:07:27Z",
    "updated_at": "2013-08-28T15:07:27Z",
    "body": "> If we did want to go this route, however, couldn't we use Irregexp the same engine that v8 uses?\n\nThe irregexp is included in V8 as a private part, its APIs are not exposed. However if it's really needed in future, we can steal the source code from V8.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23711927",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23711927",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23711927,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-09-03T13:25:05Z",
    "updated_at": "2013-09-03T13:25:05Z",
    "body": "I found that the `Network` panel of devtools has a column of `initiators`, which is the exact thing we want for implementing the `require.resolve` style of resource loading, but the magic hides in the private WebKit code, I'm seeing how to expose it.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23761570",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23761570",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23761570,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-09-04T02:14:10Z",
    "updated_at": "2013-09-04T02:14:10Z",
    "body": "So the devtools' `initiators` feature is implemented by dumping the current JavaScript stack trace just before the request is sent, it's a clever idea. If we want to do the same in atom-shell, we still need to patch Chromium, since devtools is making use of private WebKit API.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/23779837",
    "html_url": "https://github.com/electron/electron/pull/65#issuecomment-23779837",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/65",
    "id": 23779837,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-09-04T10:33:02Z",
    "updated_at": "2013-09-04T10:33:02Z",
    "body": "After some explores on implementing the `initiator` feature, I think there are 4 types of `initiator`s we need to get:\n1. requests from static pages, can be got via referrers.\n2. ajax requests, can be got via devtools's `initiator` column of Network panel.\n3. requests from dynamic DOM inserted by JavaScript scripts.\n4. requests sent from CSS.\n\nThe 1 is simple, the 2 can be implemented but needs small patches on Chromium, the 3 seems impossible, and the 4 needs big patches on Chromium.\n\nNow I give up on this feature and stick to current API.\n"
  }
]