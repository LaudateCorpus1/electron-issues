[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/209147754",
    "html_url": "https://github.com/electron/electron/issues/5115#issuecomment-209147754",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5115",
    "id": 209147754,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-04-12T23:24:56Z",
    "updated_at": "2016-04-12T23:24:56Z",
    "body": "Yeah it is possible with the API you mentioned. Nightmare's usage looks reasonable to me so I'm good adding this.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/238857955",
    "html_url": "https://github.com/electron/electron/issues/5115#issuecomment-238857955",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5115",
    "id": 238857955,
    "user": {
      "login": "kalehrishi",
      "id": 517439,
      "avatar_url": "https://avatars2.githubusercontent.com/u/517439?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kalehrishi",
      "html_url": "https://github.com/kalehrishi",
      "followers_url": "https://api.github.com/users/kalehrishi/followers",
      "following_url": "https://api.github.com/users/kalehrishi/following{/other_user}",
      "gists_url": "https://api.github.com/users/kalehrishi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kalehrishi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kalehrishi/subscriptions",
      "organizations_url": "https://api.github.com/users/kalehrishi/orgs",
      "repos_url": "https://api.github.com/users/kalehrishi/repos",
      "events_url": "https://api.github.com/users/kalehrishi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kalehrishi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T12:56:35Z",
    "updated_at": "2016-08-10T12:56:35Z",
    "body": "Is anyone working on this feature?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/239014077",
    "html_url": "https://github.com/electron/electron/issues/5115#issuecomment-239014077",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5115",
    "id": 239014077,
    "user": {
      "login": "Mr0grog",
      "id": 74178,
      "avatar_url": "https://avatars3.githubusercontent.com/u/74178?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mr0grog",
      "html_url": "https://github.com/Mr0grog",
      "followers_url": "https://api.github.com/users/Mr0grog/followers",
      "following_url": "https://api.github.com/users/Mr0grog/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mr0grog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mr0grog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mr0grog/subscriptions",
      "organizations_url": "https://api.github.com/users/Mr0grog/orgs",
      "repos_url": "https://api.github.com/users/Mr0grog/repos",
      "events_url": "https://api.github.com/users/Mr0grog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mr0grog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-10T21:43:26Z",
    "updated_at": "2016-08-10T21:43:26Z",
    "body": "I have unfortunately not had time to work on this, so as far as I’m aware, no. Do you have another particular need/use case for it?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/239063793",
    "html_url": "https://github.com/electron/electron/issues/5115#issuecomment-239063793",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5115",
    "id": 239063793,
    "user": {
      "login": "kalehrishi",
      "id": 517439,
      "avatar_url": "https://avatars2.githubusercontent.com/u/517439?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kalehrishi",
      "html_url": "https://github.com/kalehrishi",
      "followers_url": "https://api.github.com/users/kalehrishi/followers",
      "following_url": "https://api.github.com/users/kalehrishi/following{/other_user}",
      "gists_url": "https://api.github.com/users/kalehrishi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kalehrishi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kalehrishi/subscriptions",
      "organizations_url": "https://api.github.com/users/kalehrishi/orgs",
      "repos_url": "https://api.github.com/users/kalehrishi/repos",
      "events_url": "https://api.github.com/users/kalehrishi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kalehrishi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T03:23:01Z",
    "updated_at": "2016-08-11T03:23:01Z",
    "body": "We are trying to include an extension which injects script in all frames. Unfortunately `all_frames:true` doesn't work with Electron. It would be really great to have some API to executeScript with frames without disabling `webSecurity`. For now we are using this but I would really like to have a secure way to do it.\n\nIs there somehow I could help?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/239066951",
    "html_url": "https://github.com/electron/electron/issues/5115#issuecomment-239066951",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5115",
    "id": 239066951,
    "user": {
      "login": "Mr0grog",
      "id": 74178,
      "avatar_url": "https://avatars3.githubusercontent.com/u/74178?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mr0grog",
      "html_url": "https://github.com/Mr0grog",
      "followers_url": "https://api.github.com/users/Mr0grog/followers",
      "following_url": "https://api.github.com/users/Mr0grog/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mr0grog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mr0grog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mr0grog/subscriptions",
      "organizations_url": "https://api.github.com/users/Mr0grog/orgs",
      "repos_url": "https://api.github.com/users/Mr0grog/repos",
      "events_url": "https://api.github.com/users/Mr0grog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mr0grog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T03:59:32Z",
    "updated_at": "2016-08-11T03:59:32Z",
    "body": "> Unfortunately `all_frames:true` doesn't work with Electron.\n\nAre you referring to the first argument to [WebContents::SendIPCMessage](https://github.com/electron/electron/blob/master/atom/browser/api/atom_api_web_contents.h#L137) or something else? I’m not sure I exactly get what you’re going for here, though I think I get the general idea.\n\n> Is there somehow I could help?\n\nWell, you could write a patch that does what this issue is suggesting ;)   Otherwise, I certainly don’t think I’m going to be able to get around to this myself anytime soon. I certainly won’t claim any monopoly on working on this issue, though. Anyone can take this if they want!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/239072784",
    "html_url": "https://github.com/electron/electron/issues/5115#issuecomment-239072784",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5115",
    "id": 239072784,
    "user": {
      "login": "kalehrishi",
      "id": 517439,
      "avatar_url": "https://avatars2.githubusercontent.com/u/517439?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kalehrishi",
      "html_url": "https://github.com/kalehrishi",
      "followers_url": "https://api.github.com/users/kalehrishi/followers",
      "following_url": "https://api.github.com/users/kalehrishi/following{/other_user}",
      "gists_url": "https://api.github.com/users/kalehrishi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kalehrishi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kalehrishi/subscriptions",
      "organizations_url": "https://api.github.com/users/kalehrishi/orgs",
      "repos_url": "https://api.github.com/users/kalehrishi/repos",
      "events_url": "https://api.github.com/users/kalehrishi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kalehrishi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T04:39:31Z",
    "updated_at": "2016-08-11T04:39:31Z",
    "body": "I am talking about `all_frames` flag used in chrome extension to inject content script in iframes. https://developer.chrome.com/extensions/content_scripts\n\nI am trying to implement same in my Electron app. I have 3 options:\n1. Use chrome extension which can inject script in iframes on page (This doesn't work with chrome)\n2. There should be some API which will allow to execute script in iframes present in page loaded in WebView tag/BrowserWindow\n3. Disable web-security so that executeScript could execute script in main window which could access elements within iframe \n\nRight now we are using option 3. But it's not right way to do it. So I was thinking if we could get this API developed then we can start using it.\n\nWould you be able to give me some pointers about how we can implement it? I would like to help on this one.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/239080565",
    "html_url": "https://github.com/electron/electron/issues/5115#issuecomment-239080565",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5115",
    "id": 239080565,
    "user": {
      "login": "Mr0grog",
      "id": 74178,
      "avatar_url": "https://avatars3.githubusercontent.com/u/74178?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mr0grog",
      "html_url": "https://github.com/Mr0grog",
      "followers_url": "https://api.github.com/users/Mr0grog/followers",
      "following_url": "https://api.github.com/users/Mr0grog/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mr0grog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mr0grog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mr0grog/subscriptions",
      "organizations_url": "https://api.github.com/users/Mr0grog/orgs",
      "repos_url": "https://api.github.com/users/Mr0grog/repos",
      "events_url": "https://api.github.com/users/Mr0grog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mr0grog/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-11T06:06:47Z",
    "updated_at": "2016-08-11T06:09:31Z",
    "body": "Hmmm, I don't think I had thought too deeply on exactly what the API should be, but my general idea was to expose a method on `WebFrame` that takes an element and returns a `WebFrame` instance for it. e.g. `WebFrame#getFrameForElement()`.\n\nUnder the hood, Electron’s [`atom::api::WebFrame`](https://github.com/electron/electron/blob/master/atom/renderer/api/atom_api_web_frame.h) wraps Blink’s [`blink::WebLocalFrame`](https://chromium.googlesource.com/chromium/blink-public/+/master/web/WebLocalFrame.h) (it’s stored in the `web_frame_` instance variable).\n\n`WebLocalFrame` has a static [`fromFrameOwnerElement()` method](https://chromium.googlesource.com/chromium/blink-public/+/master/web/WebLocalFrame.h#48) that returns the `WebLocalFrame` instance corresponding to an element. So you’d need to call that and then create a new `atom::api::WebFrame` to wrap the result. So you might have a method sorta-kinda like:\n\n``` cpp\nv8::Local<v8::Value> WebFrame::GetFrameForElement(v8::Local<v8::Value> value\n                                                  mate::Arguments* args) {\n  mate::Handle<WebElement> element;\n  // Note you'll probably need to implement the converter for this\n  if (mate::ConvertFromV8(isolate(), value, &element)) {\n    blink::WebLocalFrame* element_frame = WebLocalFrame::fromFrameOwnerElement(element);\n    if (element_frame != 0) {\n      // You'll need to add a way to construct a `WebFrame` with a given `WebLocalFrame`\n      // (it always grabs the current context's frame right now)\n      mate::Handle<WebFrame> frame_handle = mate::CreateHandle(isolate, new WebFrame(isolate, element_frame));\n      return frame_handle.ToV8();\n    }\n  }\n  args->ThrowError(\"Must pass a frame element instance\");\n  return v8::Null(isolate());\n}\n```\n\nHope that helps!\n"
  }
]