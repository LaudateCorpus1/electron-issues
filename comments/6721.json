[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/237459329",
    "html_url": "https://github.com/electron/electron/pull/6721#issuecomment-237459329",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6721",
    "id": 237459329,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-08-04T05:53:51Z",
    "updated_at": "2016-08-04T05:53:51Z",
    "body": "@gerhardberger @brenca\n\nAlso I found that the whole frame is always sent instead of only the dirty areas, and from the implementation this seems to be expected.Should we fix the docs or find a way to actually only send the dirty areas? Current behavior is totally fine in my option though.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/237533685",
    "html_url": "https://github.com/electron/electron/pull/6721#issuecomment-237533685",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6721",
    "id": 237533685,
    "user": {
      "login": "brenca",
      "id": 1690458,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1690458?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brenca",
      "html_url": "https://github.com/brenca",
      "followers_url": "https://api.github.com/users/brenca/followers",
      "following_url": "https://api.github.com/users/brenca/following{/other_user}",
      "gists_url": "https://api.github.com/users/brenca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brenca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brenca/subscriptions",
      "organizations_url": "https://api.github.com/users/brenca/orgs",
      "repos_url": "https://api.github.com/users/brenca/repos",
      "events_url": "https://api.github.com/users/brenca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brenca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T12:04:49Z",
    "updated_at": "2016-08-04T12:04:49Z",
    "body": "@zcbenz I think using `NativeImage` is a good idea, we had some memory issues with the `buffer::Copy` implementation, this could solve that problem, I'm currently testing how big of an overhead it would be compared to `buffer::New` (which might be unsafe, but faster). \nMemory consumption could also be lowered by sending only the dirty areas, the current implementation is what CEF uses, but they don't have to pump the data to node, which seems to be a bottleneck here (I might be wrong).\nWe'll try to cook up a solution that only sends the dirty areas, I think in that case the overhead of `NativeImage` (if any) would be negligible, and it would create a nice API indeed. We could make this optional, like in `FrameSubscriber`. What do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/237552149",
    "html_url": "https://github.com/electron/electron/pull/6721#issuecomment-237552149",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6721",
    "id": 237552149,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-08-04T13:27:07Z",
    "updated_at": "2016-08-04T13:32:54Z",
    "body": "If you are seeking for best performance, you can use `node::Buffer::New` and set the FreeFunction to no-op, so the copy of bitmap is avoided, and `node::Buffer` will not try to free the memory when garbage collected. The downside is the data is only available during the `paint` event, but I think it is fine as long as explicitly documented.\n\nWe can probably add a `getBitmap` method to `NativeImage` which uses `node::Buffer::New` to return the bitmap data, so for performance purpose users can call `getBitmap()` to get the bitmap data without copy, and for other purposes users can freely call methods like `toPNG()`.\n\n> We'll try to cook up a solution that only sends the dirty areas, I think in that case the overhead of NativeImage (if any) would be negligible, and it would create a nice API indeed. We could make this optional, like in FrameSubscriber. What do you think?\n\nHaving an option for only sending dirty areas is good. But I don't know how you would use the API, if you don't need this feature we can just add it in future when someone else needs it.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/237577928",
    "html_url": "https://github.com/electron/electron/pull/6721#issuecomment-237577928",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6721",
    "id": 237577928,
    "user": {
      "login": "brenca",
      "id": 1690458,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1690458?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brenca",
      "html_url": "https://github.com/brenca",
      "followers_url": "https://api.github.com/users/brenca/followers",
      "following_url": "https://api.github.com/users/brenca/following{/other_user}",
      "gists_url": "https://api.github.com/users/brenca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brenca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brenca/subscriptions",
      "organizations_url": "https://api.github.com/users/brenca/orgs",
      "repos_url": "https://api.github.com/users/brenca/repos",
      "events_url": "https://api.github.com/users/brenca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brenca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T14:53:24Z",
    "updated_at": "2016-08-04T15:30:34Z",
    "body": "Adding a `getBitmap` to `NativeImage` is a great idea, I'll implement it, try it out and post a PR ASAP, thanks!\nWe discussed the dirty area thing a bit further with @gerhardberger, and came to the conclusion that it would actually slow down offscreen rendering in most cases, since the software rendering path paints the whole image into a bitmap directly, we would need to copy the relevant parts first, which is rather slow. It could speed up the GPU path, but what we would win with that wouldn't compensate for what we would lose on the software path.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/237591384",
    "html_url": "https://github.com/electron/electron/pull/6721#issuecomment-237591384",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6721",
    "id": 237591384,
    "user": {
      "login": "brenca",
      "id": 1690458,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1690458?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brenca",
      "html_url": "https://github.com/brenca",
      "followers_url": "https://api.github.com/users/brenca/followers",
      "following_url": "https://api.github.com/users/brenca/following{/other_user}",
      "gists_url": "https://api.github.com/users/brenca/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brenca/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brenca/subscriptions",
      "organizations_url": "https://api.github.com/users/brenca/orgs",
      "repos_url": "https://api.github.com/users/brenca/repos",
      "events_url": "https://api.github.com/users/brenca/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brenca/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-04T15:35:26Z",
    "updated_at": "2016-08-04T15:35:26Z",
    "body": "We also did some stress tests with the noop `node::Buffer::New` method you mentioned, and it's indeed much faster, thanks again for the tip. :+1: \n"
  }
]