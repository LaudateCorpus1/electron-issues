[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66439397",
    "html_url": "https://github.com/electron/electron/issues/908#issuecomment-66439397",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/908",
    "id": 66439397,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T11:35:51Z",
    "updated_at": "2014-12-10T11:35:51Z",
    "body": "So, I'm able to stop this in the renderer via `document.drop`, I think this is a bug around WebView and event propagation\n\nIn my WebView contents, I'm handling the `drop` event and preventing default. When I drop a file onto the WebView, the WebView gets the 'drop', but the renderer page (i.e. the WebView's host) _also_ gets the 'drop' and proceeds to open the file.\n\nIf I prevent default in the renderer page, that stops the file from being opened, but it _also_ stops the WebView from receiving the event too.\n\nSo, one thing that might make sense is, a way to pass Event objects to the WebView, so I can write something like:\n\n``` coffee\ndocument.addEventHandler 'drop', (e) ->\n  document.querySelector('webview').forwardDOMEvent(e)\n  e.preventDefault()\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66510118",
    "html_url": "https://github.com/electron/electron/issues/908#issuecomment-66510118",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/908",
    "id": 66510118,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-12-10T19:38:14Z",
    "updated_at": "2014-12-10T19:38:14Z",
    "body": "The `open-url` and `open-file` events are emitted when you drag file to the dock icon or user opens your application from Finder, not related to drop-drag here.\n\nTo solve your problem, I think you can prevent host page to handle `dragover` event when dragging over `<webview>`:\n\n``` javascript\ndocument.addEventListener('drop', function(e) {\n  e.preventDefault();\n  e.stopPropagation();\n});\ndocument.addEventListener('dragover', function(e) {\n  e.preventDefault();\n  e.stopPropagation();\n});\nwebview.addEventListener('dragover', function(e) {\n  e.preventDefault();\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66521266",
    "html_url": "https://github.com/electron/electron/issues/908#issuecomment-66521266",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/908",
    "id": 66521266,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T20:48:44Z",
    "updated_at": "2014-12-10T20:48:44Z",
    "body": "Getting closer - this prevents the renderer from navigating to the movie and results in the `webview` getting the dragover event, but not the `drop` event. If you want an easy test, throw `https://reactivex.slack.com/messages` into a WebView then drop a movie into it (or other content that a browser would open directly)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66530360",
    "html_url": "https://github.com/electron/electron/issues/908#issuecomment-66530360",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/908",
    "id": 66530360,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-12-10T21:49:21Z",
    "updated_at": "2014-12-10T21:49:21Z",
    "body": "There is also a bug of Chromium that `drop` never firing: https://code.google.com/p/chromium/issues/detail?id=412373\n\nIt is not exactly the same with our case but I think they are the same bug.\n\nI think you can work around this bug by sending a message to webview when the host page received `drop` event.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66541055",
    "html_url": "https://github.com/electron/electron/issues/908#issuecomment-66541055",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/908",
    "id": 66541055,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T23:01:56Z",
    "updated_at": "2014-12-10T23:01:56Z",
    "body": "@zcbenz I can do that, but I can't recreate the `DataTransfer` object in the WebView because the constructor is protected. I suppose I could read the files in the renderer via node.js then transfer them via IPC to the WebView, but that's potentially a lot of data to read up into memory and send over IPC since  we allow uploading of arbitrarily large files. \n\nThe entire operation works if the file is not a MIME type that the browser can open inline (i.e. a zip file) and I allow everything (i.e. no `preventDefault` anywhere). Maybe we could rig Atom Shell to just never inline load files that are dropped onto the window? \n\nThis is something we should probably be doing anyways, or else every renderer process has to hook the `drop` event because you could accidentally drop a JPEG on the window and break the app. For apps that (for whatever reason) do want to directly inline load the file, they can hook `drop` and do the navigation themselves\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66687649",
    "html_url": "https://github.com/electron/electron/issues/908#issuecomment-66687649",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/908",
    "id": 66687649,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-12-11T20:58:54Z",
    "updated_at": "2014-12-11T20:58:54Z",
    "body": "> The entire operation works if the file is not a MIME type that the browser can open inline (i.e. a zip file) and I allow everything (i.e. no preventDefault anywhere). Maybe we could rig Atom Shell to just never inline load files that are dropped onto the window?\n\nI'm :+1: on this, I'll see if I can find a way to do it.\n"
  }
]