[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/272634746",
    "html_url": "https://github.com/electron/electron/issues/8392#issuecomment-272634746",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8392",
    "id": 272634746,
    "user": {
      "login": "gerhardberger",
      "id": 1059699,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1059699?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerhardberger",
      "html_url": "https://github.com/gerhardberger",
      "followers_url": "https://api.github.com/users/gerhardberger/followers",
      "following_url": "https://api.github.com/users/gerhardberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerhardberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerhardberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerhardberger/subscriptions",
      "organizations_url": "https://api.github.com/users/gerhardberger/orgs",
      "repos_url": "https://api.github.com/users/gerhardberger/repos",
      "events_url": "https://api.github.com/users/gerhardberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerhardberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-14T16:27:57Z",
    "updated_at": "2017-01-14T16:27:57Z",
    "body": "By passing `show: false` to the `BrowserWindow` constructor the dummy window should not be visible. In your case is it still showing?\r\n\r\nThe dummy window is necessary in offscreen mode, because Chromium needs a window handle."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/273304829",
    "html_url": "https://github.com/electron/electron/issues/8392#issuecomment-273304829",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8392",
    "id": 273304829,
    "user": {
      "login": "vulture",
      "id": 216979,
      "avatar_url": "https://avatars3.githubusercontent.com/u/216979?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vulture",
      "html_url": "https://github.com/vulture",
      "followers_url": "https://api.github.com/users/vulture/followers",
      "following_url": "https://api.github.com/users/vulture/following{/other_user}",
      "gists_url": "https://api.github.com/users/vulture/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vulture/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vulture/subscriptions",
      "organizations_url": "https://api.github.com/users/vulture/orgs",
      "repos_url": "https://api.github.com/users/vulture/repos",
      "events_url": "https://api.github.com/users/vulture/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vulture/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-17T21:25:56Z",
    "updated_at": "2017-01-17T21:25:56Z",
    "body": "So after some more investigation, there are a few issues happening:\r\n1. Even if I pass \"show: false\", there is still a brief flash of the dummy window appearing and then hiding, which looks unprofessional to the end user. I can make this smaller by passing in width: 0 and height: 0, but there is still a minimum size where a white rectangle shows up for a brief period. Setting x: and y: to negative values does not hide this offscreen.\r\n2. The offscreen renderer is supposed to be a frameless window by default (see: https://github.com/electron/electron/blob/master/docs/tutorial/offscreen-rendering.md). However, the dummy window created does not take this default and is a framed window (presumably so that you can drag it around on screen with a titlebar etc). This is problematic because when calling SetSize() or SetContentSize(), the window can get re-resized to a value you didn't choose. For example, if I try to resize the window to 1920x1080, it instead gets sized to 1910x1027 or 1920x1039 (presumably to accommodate the framed window borders). So, it is probably using the dummy window for all this. I need to explicitly specify \"frame: false\" for \"fullscreen\" window sizes to work.\r\n3. If I call .show() on the window, I actually do get a 1920x1080 window after all this, but then the dummy window shows up again.\r\n\r\nCurrently the best set of parameters is something like\r\n```\r\n  win = new BrowserWindow({\r\n    show: false,\r\n    frame: false,\r\n    webPreferences: {\r\n      offscreen: true,\r\n      transparent: true,\r\n    },\r\n  })\r\n```\r\nand then I need to be sure not to call .show().\r\n\r\nIn conclusion:\r\n1. \"frame: false\" is necessary so that the dummy window does not get a frame, because the [offscreen renderer content] size can/will be wrong if you want a resolution near the full screen.\r\n2. This still flashes the dummy window briefly when the BrowserWindow gets created(?)."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/273445854",
    "html_url": "https://github.com/electron/electron/issues/8392#issuecomment-273445854",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8392",
    "id": 273445854,
    "user": {
      "login": "gerhardberger",
      "id": 1059699,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1059699?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerhardberger",
      "html_url": "https://github.com/gerhardberger",
      "followers_url": "https://api.github.com/users/gerhardberger/followers",
      "following_url": "https://api.github.com/users/gerhardberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerhardberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerhardberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerhardberger/subscriptions",
      "organizations_url": "https://api.github.com/users/gerhardberger/orgs",
      "repos_url": "https://api.github.com/users/gerhardberger/repos",
      "events_url": "https://api.github.com/users/gerhardberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerhardberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-18T10:57:52Z",
    "updated_at": "2017-01-18T10:57:52Z",
    "body": "@vulture \r\n\r\n1. Since 1.4.14 offscreen windows are frameless by default: #8250. You should upgrade to this version.\r\n2. On macOS I've never experienced this flashing nor people I know using it on Windows. Could you provide an example program that gives you this flashing?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/273639096",
    "html_url": "https://github.com/electron/electron/issues/8392#issuecomment-273639096",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8392",
    "id": 273639096,
    "user": {
      "login": "vulture",
      "id": 216979,
      "avatar_url": "https://avatars3.githubusercontent.com/u/216979?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vulture",
      "html_url": "https://github.com/vulture",
      "followers_url": "https://api.github.com/users/vulture/followers",
      "following_url": "https://api.github.com/users/vulture/following{/other_user}",
      "gists_url": "https://api.github.com/users/vulture/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vulture/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vulture/subscriptions",
      "organizations_url": "https://api.github.com/users/vulture/orgs",
      "repos_url": "https://api.github.com/users/vulture/repos",
      "events_url": "https://api.github.com/users/vulture/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vulture/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-18T23:49:29Z",
    "updated_at": "2017-01-18T23:49:29Z",
    "body": "After some further investigation (also updated to 1.4.14), I found that my understanding was slightly off. I was mirroring the OSR frame over top my desktop so that I could see it. As it turns out there is no window that flashes. It is actually the OSR framebuffer that (incorrectly?) has a white rectangle the size of the dummy window(?), and since I was just drawing that on my desktop, it seemed like it must actually be drawing a dummy window itself on the desktop. So the problem is actually in the OSR framebuffer. There may actually be nothing wrong with the dummy window at all.\r\n\r\nHere is an imgur album of the saved frames out: http://imgur.com/a/IFUCo\r\nThe damage_rect values are x,y=0,0 width,height=1920,1080 for all of these frames.\r\n\r\nBecause I'm using transparent: true, maybe there's an issue somewhere that does not respect transparent and instead clears some rect on the OSR framebuffer using white instead of transparent? The white value is 0xffffffff (so, alpha really is 0xff too, not 0x00). The flashing does not happen every time, but it does usually happen for me. Sometimes instead, the first frame is correctly all black, and then the second or third frame has the white rectangle, and then it disappears again. I am calling window()->SetContentSize to set the OSR size to 1920x1080, in a js callback, before the first OnPaint. Not sure if that could be causing any funny issues or not, but thought I'd throw that in there.\r\n\r\n```\r\nconst {app, BrowserWindow} = require('electron')\r\napp.disableHardwareAcceleration()\r\nlet win\r\napp.once('ready', () => {\r\n  win = new BrowserWindow({\r\n    show: false,\r\n    frame: false,\r\n    webPreferences: {\r\n      offscreen: true,\r\n      transparent: true,\r\n    },\r\n  })\r\n  win.loadURL('...whatever...')\r\n  win.webContents.setFrameRate(30);\r\n  win.webContents.on('paint', (event, dirty, image) => {  ... same bmp ... })\r\n})\r\n\r\n```"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/274658195",
    "html_url": "https://github.com/electron/electron/issues/8392#issuecomment-274658195",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8392",
    "id": 274658195,
    "user": {
      "login": "gerhardberger",
      "id": 1059699,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1059699?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerhardberger",
      "html_url": "https://github.com/gerhardberger",
      "followers_url": "https://api.github.com/users/gerhardberger/followers",
      "following_url": "https://api.github.com/users/gerhardberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerhardberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerhardberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerhardberger/subscriptions",
      "organizations_url": "https://api.github.com/users/gerhardberger/orgs",
      "repos_url": "https://api.github.com/users/gerhardberger/repos",
      "events_url": "https://api.github.com/users/gerhardberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerhardberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-24T00:02:06Z",
    "updated_at": "2017-01-24T00:02:06Z",
    "body": "It is up to the Chromium renderer to generate the frames that are emitted in the `paint` callback. There are usually frames where the website not fully rendered, but I think it generates these frames to show content as quickly as possible.\r\n\r\nI was able to avoid these initial white frames by setting a flag in BrowserWindow's `ready-to-show` event, to only handle paint events when that event happened.\r\n\r\n``` js\r\nconst {app, BrowserWindow} = require('electron')\r\napp.disableHardwareAcceleration()\r\nlet win\r\napp.once('ready', () => {\r\n  win = new BrowserWindow({\r\n    show: false,\r\n    frame: false,\r\n    webPreferences: {\r\n      offscreen: true,\r\n      transparent: true\r\n    }\r\n  })\r\n  win.loadURL('https://www.github.com')\r\n  win.webContents.setFrameRate(30)\r\n\r\n  let ready = false\r\n  win.on('ready-to-show', () => (ready = true))\r\n  win.webContents.on('paint', (event, dirty, image) => {\r\n    if (!ready) return\r\n    // handle frame\r\n  })\r\n})\r\n```"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/274675915",
    "html_url": "https://github.com/electron/electron/issues/8392#issuecomment-274675915",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8392",
    "id": 274675915,
    "user": {
      "login": "vulture",
      "id": 216979,
      "avatar_url": "https://avatars3.githubusercontent.com/u/216979?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vulture",
      "html_url": "https://github.com/vulture",
      "followers_url": "https://api.github.com/users/vulture/followers",
      "following_url": "https://api.github.com/users/vulture/following{/other_user}",
      "gists_url": "https://api.github.com/users/vulture/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vulture/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vulture/subscriptions",
      "organizations_url": "https://api.github.com/users/vulture/orgs",
      "repos_url": "https://api.github.com/users/vulture/repos",
      "events_url": "https://api.github.com/users/vulture/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vulture/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-24T01:42:20Z",
    "updated_at": "2017-01-24T01:42:48Z",
    "body": "Okay turns out this seems to work pretty well. Due to how I was handling the paint event I actually needed to emulate the ready-to-show a different way (internal to Electron's code). I haven't been able to repro the issue since using this fix, and it seems to work normally otherwise, so I would consider this a working workaround. Ideally OnPaint wouldn't get called in the first place without a valid frame, but, I'm happy enough with this fix. :P\r\nThanks!"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/274775240",
    "html_url": "https://github.com/electron/electron/issues/8392#issuecomment-274775240",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8392",
    "id": 274775240,
    "user": {
      "login": "gerhardberger",
      "id": 1059699,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1059699?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gerhardberger",
      "html_url": "https://github.com/gerhardberger",
      "followers_url": "https://api.github.com/users/gerhardberger/followers",
      "following_url": "https://api.github.com/users/gerhardberger/following{/other_user}",
      "gists_url": "https://api.github.com/users/gerhardberger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gerhardberger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gerhardberger/subscriptions",
      "organizations_url": "https://api.github.com/users/gerhardberger/orgs",
      "repos_url": "https://api.github.com/users/gerhardberger/repos",
      "events_url": "https://api.github.com/users/gerhardberger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gerhardberger/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-24T11:11:30Z",
    "updated_at": "2017-01-24T11:11:30Z",
    "body": "Nice, happy to see you got it working!"
  }
]