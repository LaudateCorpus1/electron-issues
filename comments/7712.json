[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255711676",
    "html_url": "https://github.com/electron/electron/issues/7712#issuecomment-255711676",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7712",
    "id": 255711676,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T11:08:05Z",
    "updated_at": "2016-10-24T11:08:05Z",
    "body": "GitHub issues are for feature requests and bug reports, questions about using Electron should be directed to the [community](https://github.com/electron/electron#community) or to the [Slack Channel](http://atom-slack.herokuapp.com/).\n\nhttps://github.com/electron/electron/blob/master/docs/api/download-item.md#downloaditempause\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255926971",
    "html_url": "https://github.com/electron/electron/issues/7712#issuecomment-255926971",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7712",
    "id": 255926971,
    "user": {
      "login": "idododu",
      "id": 7663884,
      "avatar_url": "https://avatars3.githubusercontent.com/u/7663884?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/idododu",
      "html_url": "https://github.com/idododu",
      "followers_url": "https://api.github.com/users/idododu/followers",
      "following_url": "https://api.github.com/users/idododu/following{/other_user}",
      "gists_url": "https://api.github.com/users/idododu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/idododu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/idododu/subscriptions",
      "organizations_url": "https://api.github.com/users/idododu/orgs",
      "repos_url": "https://api.github.com/users/idododu/repos",
      "events_url": "https://api.github.com/users/idododu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/idododu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T03:31:00Z",
    "updated_at": "2016-10-25T03:31:00Z",
    "body": "In case that anyone have the same question, see below codes.\n\nin main.js\n\n```\n// to store downloadItems\nvar downloadItems = [];\n\nipcMain.on('dowloadFiles', function(evt, options) {\n\n      if(options.command === 'startDownload') {\n           wc.downloadURL(file.url);\n           return;\n      }\n\n      if(options.command === 'stopDownload') {\n           var item = getDownloadItem(options.url);\n           item.pause();\n           return;\n      }\n\n    if(options.command === 'resumeDownload') {\n           var item = getDownloadItem(options.url);\n           item.resume();\n           return;\n      }\n\n});\n\n    mainWindow.webContents.session.on('will-download', function(event, item, webContents) {\n      // Set the save path, making Electron not to prompt a save dialog.\n      item.setSavePath('c:\\\\downloadTest\\\\test.txt');\n\n      // store the download item, so that we can call item.pause/resume in a \n      downloadItems.push(item);\n\n      item.on('updated', function(event, state) {\n          // console.log('when updated send download progress to render process')\n         mainWindow.webContents.send('updateDownload', {\n                url: item.getURL(),\n                progress: item.getReceivedBytes() / item.getTotalBytes()\n            });\n      });\n    });\n```\n"
  }
]