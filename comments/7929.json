[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/259670326",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-259670326",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 259670326,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-10T11:46:12Z",
    "updated_at": "2016-11-10T11:46:12Z",
    "body": "I feel as though if the user exposes the entire IPC module to a remote webpage through a preload script that is kind of their fault for not following the security guidelines not Electron's responsibility to fix.\n\nhttps://github.com/electron/electron/blob/master/docs/tutorial/security.md\n\n> If your application executes code from an online source, it is your responsibility to ensure that the code is not malicious.\n\nIf you need to give a remote app IPC abilities then you should provide hard coded send methods to avoid this security issue.  For instance:\n\n``` js\n// preload.js\nwindow.sendMessage = () => {\n  ipcRenderer.send('thing');\n};\n\n// or this preload.js\nconst whitelist = ['cmd1', 'foo', 'bar'];\nwindow.sendMessage = (msg) => {\n  if (!whitelist.includes(msg)) return;\n  ipcRenderer.send(msg);\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/259672406",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-259672406",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 259672406,
    "user": {
      "login": "MichaelVasseur",
      "id": 21336358,
      "avatar_url": "https://avatars2.githubusercontent.com/u/21336358?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MichaelVasseur",
      "html_url": "https://github.com/MichaelVasseur",
      "followers_url": "https://api.github.com/users/MichaelVasseur/followers",
      "following_url": "https://api.github.com/users/MichaelVasseur/following{/other_user}",
      "gists_url": "https://api.github.com/users/MichaelVasseur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MichaelVasseur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MichaelVasseur/subscriptions",
      "organizations_url": "https://api.github.com/users/MichaelVasseur/orgs",
      "repos_url": "https://api.github.com/users/MichaelVasseur/repos",
      "events_url": "https://api.github.com/users/MichaelVasseur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MichaelVasseur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-10T11:57:56Z",
    "updated_at": "2016-11-10T11:58:11Z",
    "body": "From our point of view, it would be better to completely hide the ipcRenderer in the sandboxed renderer to enforce the security. So, we could not use it to build an application oriented API. \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/259672895",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-259672895",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 259672895,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-10T12:00:29Z",
    "updated_at": "2016-11-10T12:00:29Z",
    "body": "@MichaelVasseur If you disable `nodeIntegration` on your `webPreferences` then no node modules are available so ipcRenderer (along with all other modules) won't be available.  I'm not sure I understand your use case where:\n1. You need ipcRenderer\n2. It needs to be injected globally (to cause this issue)\n\nThose 2 things should never be the case and if they are you probably need to rethink what you're doing and / or use one of the ipcRenderer protection techniques I gave above.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/259983299",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-259983299",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 259983299,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T15:35:16Z",
    "updated_at": "2016-11-11T15:35:16Z",
    "body": "@MarshallOfSound,  the workaround protection you have provided is fine in the simple case. It won't scale for projects with many preloads as the code will be repeated with the needed variation. The lookup code will also be executed by all renders and the performance could be impacted depending on the number of channels in the white list and the message rate. The enhancement proposed by @MichaelVasseur, solves the scalability and the performance issues. The rendere will access a safe and specialized module. The consumer will not need to validate the message as the handler will not process unknown channel. The addition for a new preload will not need the addition of the white list. \nAccording to the PR #6712, other node module are not available but  ipcRenderer can be exposed in the preload .The ipcSafeRenderer could be exposed in the same way. Disabled by default in the sandboxed renderer but enablable in the pre-load. This can be either done in this enhancement or as part of the work planned in the enhancement #6712 to expose more node.js module to sandboxed renderer.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/259986189",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-259986189",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 259986189,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T15:48:00Z",
    "updated_at": "2016-11-11T15:48:00Z",
    "body": "@ahmedmohamedali This is still IMO but I still don't see the need for another module / IPC bus to do something that IMO the implementer should be doing.\n\n>  the workaround protection you have provided is fine in the simple case. It won't scale for projects with many preloads as the code will be repeated with the needed variation. he lookup code will also be executed by all renders and the performance could be impacted depending on the number of channels in the white list and the message rate.\n\nSo do the inverse?  Blacklist the Electron commands with something like.\n\n``` js\nif (channel.startsWith('ELECTRON_INTERNAL')) return;\n```\n\nThat is a constant time comparison that would add negligible time to the IPC message.\n\nI also would like to raise the point I made above again.  What is the use-case where you are loading remote unverifiable content and **have** to inject the `ipcRenderer` module into the global scope.  Perhaps I am missing that context.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/259994632",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-259994632",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 259994632,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T16:23:55Z",
    "updated_at": "2016-11-11T16:23:55Z",
    "body": "@MarshallOfSound We do not want to inject ipcRenderer in the global scope, this is already possible via preload. The module we want to inject is new module we want to contribute. This module will have safety requirements and will have the counter part of ipcMain in the master process. There will be a clear separation between framework ipc and the ipc for the user's logic. The goal is the communication between the renderers and the master to be more safe. As explained in this enhancement there is possibility to send electron command that can be harmful via ipcRenderer.The solution we need should be scalable, with no performance impact and standard in electron so other people can benefit from it.  I already explained the issue with white list and black list is even worst. We can blacklist all the current electron commands but there is no guarantee electron will not be enhanced in the future with new commands that introduce security issues.  \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/260027647",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-260027647",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 260027647,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T18:51:21Z",
    "updated_at": "2016-11-11T18:51:21Z",
    "body": "I think the solution here is to be able to mark certain webContents as \"untrusted\" up-front, and that built-in IPC calls will be mostly ignored. This is an issue because even if a developer doesn't directly expose IPC, they are probably _using_ IPC and it means that it's subject to clever JavaScript injection - i.e. any time you use a non-constant channel name, you have potential for people doing stuff to manipulate that name to send something else\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/260049874",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-260049874",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 260049874,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-11T20:36:28Z",
    "updated_at": "2016-11-14T14:21:53Z",
    "body": "@MarshallOfSound, @paulcbetts thanks for your feedback. I think we have found a solution that fixes the issues I mentioned in my comments above.\nInstead of using a white list or a black list we will route all the messages in a single channel 'ipc-app'.\nThe actual user channel will be encapsulated in the message itself.\n\n``` javascript\n//in preload.js\nwindow.sendMessage = (channel, ...args) => {\n   ipcRenderer.send('ipc-app', channel, args);\n}\n```\n\n``` javascript\n//in the main process\nconst {ipcMain} = require('electron')\nipcMain.on('ipc-app', (event, ...args) => {\n\n//1- get the channel args[0] and the data from args.splice(0)\n//2- Call the application event handler for that channel.\n\n})\n```\n-      There will be no possibility to run electron built-in handlers. \n-      The channel is pre-defined and fixed. There is no need to use a white list or a black list. \n-      The primary channel is passed as a constant. So, this removes the potential security risk mentioned by paulcbetts\n\nI kept the sample code above very simple to explain the idea but the real implementation will be be based on EventEmitter for the secondary channel to use the .on('xxx') syntax.\n\n@MarshallOfSound , please provide you feedback on this solution. If you confirm the option I described above is removing the potential security issue described in this enhancement then we can close this issue.\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/260548340",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-260548340",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 260548340,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-15T05:05:18Z",
    "updated_at": "2016-11-15T05:05:18Z",
    "body": "@ahmedmohamedali It looks good to me.\n\nI think it's the kind of thing that would be best served as a third-party NPM module, maybe `electron-safe-ipc`.  Thoughts @paulcbetts ?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/260628400",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-260628400",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 260628400,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-15T12:28:21Z",
    "updated_at": "2016-11-15T12:28:21Z",
    "body": "@MarshallOfSound, thanks for the review and your suggestion to publlish the solution as a third-party NPM. We will do it and reference back the link here.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/260743365",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-260743365",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 260743365,
    "user": {
      "login": "YurySolovyov",
      "id": 2168518,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2168518?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YurySolovyov",
      "html_url": "https://github.com/YurySolovyov",
      "followers_url": "https://api.github.com/users/YurySolovyov/followers",
      "following_url": "https://api.github.com/users/YurySolovyov/following{/other_user}",
      "gists_url": "https://api.github.com/users/YurySolovyov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YurySolovyov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YurySolovyov/subscriptions",
      "organizations_url": "https://api.github.com/users/YurySolovyov/orgs",
      "repos_url": "https://api.github.com/users/YurySolovyov/repos",
      "events_url": "https://api.github.com/users/YurySolovyov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YurySolovyov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-15T19:36:14Z",
    "updated_at": "2016-11-15T19:36:14Z",
    "body": "> Chromium IPC with JS binding\n\nI think Chrome team is in process of moving APIs to Mojo IPC, if that's not what you meant by \"Chromium IPC\"\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/265162180",
    "html_url": "https://github.com/electron/electron/issues/7929#issuecomment-265162180",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7929",
    "id": 265162180,
    "user": {
      "login": "MichaelVasseur",
      "id": 21336358,
      "avatar_url": "https://avatars2.githubusercontent.com/u/21336358?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MichaelVasseur",
      "html_url": "https://github.com/MichaelVasseur",
      "followers_url": "https://api.github.com/users/MichaelVasseur/followers",
      "following_url": "https://api.github.com/users/MichaelVasseur/following{/other_user}",
      "gists_url": "https://api.github.com/users/MichaelVasseur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MichaelVasseur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MichaelVasseur/subscriptions",
      "organizations_url": "https://api.github.com/users/MichaelVasseur/orgs",
      "repos_url": "https://api.github.com/users/MichaelVasseur/repos",
      "events_url": "https://api.github.com/users/MichaelVasseur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MichaelVasseur/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-06T14:25:36Z",
    "updated_at": "2016-12-06T14:25:36Z",
    "body": "See https://github.com/MichaelVasseur/electron-ipc-bus."
  }
]