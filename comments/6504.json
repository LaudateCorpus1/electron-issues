[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/232920073",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-232920073",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 232920073,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-15T10:43:07Z",
    "updated_at": "2016-07-15T10:43:25Z",
    "body": "This is where you would use the `preload`attribute of `webPreferences`.\n\nFrom the [docs](https://github.com/electron/electron/blob/master/docs/api/browser-window.md)\n\n> preload String - Specifies a script that will be loaded before other scripts run in the page. This script will always have access to node APIs no matter whether node integration is turned on or off. The value should be the absolute file path to the script. When node integration is turned off, the preload script can reintroduce Node global symbols back to the global scope. See example [here](https://github.com/electron/electron/blob/master/docs/api/process.md#event-loaded).\n\nIn this case you would have\n\n``` js\nglobal.id = 17\n```\n\nInside your preload script.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/232921508",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-232921508",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 232921508,
    "user": {
      "login": "dbrugne",
      "id": 4611149,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4611149?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbrugne",
      "html_url": "https://github.com/dbrugne",
      "followers_url": "https://api.github.com/users/dbrugne/followers",
      "following_url": "https://api.github.com/users/dbrugne/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbrugne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbrugne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbrugne/subscriptions",
      "organizations_url": "https://api.github.com/users/dbrugne/orgs",
      "repos_url": "https://api.github.com/users/dbrugne/repos",
      "events_url": "https://api.github.com/users/dbrugne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbrugne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-15T10:51:25Z",
    "updated_at": "2016-07-15T10:51:32Z",
    "body": "@MarshallOfSound, `preload` take a script path as parameter (saying doc). So I'll need to generate on the fly a physical script in FS and pass its absolute path as parameter that is not a very good approach. I'm right?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/232923835",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-232923835",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 232923835,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-15T11:05:20Z",
    "updated_at": "2016-07-15T11:05:20Z",
    "body": "@dbrugne Nope that's not a good plan.  \n\nHmmm, personally I would use the `remote` module to fetch the data in a preload script.  Either that or use synchronous IPC events to request then receive the data from the main process.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/232949644",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-232949644",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 232949644,
    "user": {
      "login": "dbrugne",
      "id": 4611149,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4611149?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbrugne",
      "html_url": "https://github.com/dbrugne",
      "followers_url": "https://api.github.com/users/dbrugne/followers",
      "following_url": "https://api.github.com/users/dbrugne/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbrugne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbrugne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbrugne/subscriptions",
      "organizations_url": "https://api.github.com/users/dbrugne/orgs",
      "repos_url": "https://api.github.com/users/dbrugne/repos",
      "events_url": "https://api.github.com/users/dbrugne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbrugne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-15T13:24:16Z",
    "updated_at": "2016-07-15T13:24:16Z",
    "body": "@MarshallOfSound not sure using IPC solve the problem. The rendered view should pass something (an ID, a type, a request ...) to allow main process pass the correct value.\nSo at a moment the rendered view should know \"who she is\" (so receive a param somewhere).\n\nMaybe this is my reflexion that is wrong, so I'll explain my use case:\nElectron is used to provide a desktop application that it launch with a file that describe a workspace as parameter.\nIn this workspace we have an arbitrary set of window that each contain a set of graphics.\nAll the application state is handle in shared redux store and data is fetched from an HTTP backend.\nEvery window share the same react-redux code (display a set of views and data and dispatch redux async actions to fetch data).\n\nSo on application launch, after parsing workspace file and set initial state of my redux store, I would like open `n` window (all windows load the same .html) and communicate to each window  what is the redux store root to take in consideration for rendering and dispatching.\n\nYes my multi-window scenario and logic is handled in main process.\n\nHope that description will help and isn't off topic (maybe this discussion should take place on stack overflow).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/233000126",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-233000126",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 233000126,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-07-15T16:27:16Z",
    "updated_at": "2016-07-15T16:27:16Z",
    "body": "You can add query parameters in the URL when you call `loadURL` on `BrowserWindow`. Then the window can read those params.\n\nSo for your case it would be `?id=17`.\n\nYou could then create a single preload script that reads these params from `window.location` and then sets them as globals on `global` (or `window`).\n\nThat is how Atom passes the state of the window, size, location, etc. when it reopens all the windows on load.\n\nhttps://github.com/atom/atom/blob/72dbbd8d22d90b808a00f2095dff3b429b6cc351/src/main-process/atom-window.coffee#L83-L88\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/233003785",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-233003785",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 233003785,
    "user": {
      "login": "dbrugne",
      "id": 4611149,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4611149?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbrugne",
      "html_url": "https://github.com/dbrugne",
      "followers_url": "https://api.github.com/users/dbrugne/followers",
      "following_url": "https://api.github.com/users/dbrugne/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbrugne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbrugne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbrugne/subscriptions",
      "organizations_url": "https://api.github.com/users/dbrugne/orgs",
      "repos_url": "https://api.github.com/users/dbrugne/repos",
      "events_url": "https://api.github.com/users/dbrugne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbrugne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-15T16:42:59Z",
    "updated_at": "2016-07-15T16:42:59Z",
    "body": "@kevinsawicki my point was if this technique (using query params on `file://` path) is or not a good practice.\n\nYou gave the anwser, if atom do that, it's probably a reliable and respectful of electron philosophy way.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/233003900",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-233003900",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 233003900,
    "user": {
      "login": "dbrugne",
      "id": 4611149,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4611149?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbrugne",
      "html_url": "https://github.com/dbrugne",
      "followers_url": "https://api.github.com/users/dbrugne/followers",
      "following_url": "https://api.github.com/users/dbrugne/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbrugne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbrugne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbrugne/subscriptions",
      "organizations_url": "https://api.github.com/users/dbrugne/orgs",
      "repos_url": "https://api.github.com/users/dbrugne/repos",
      "events_url": "https://api.github.com/users/dbrugne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbrugne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-15T16:43:25Z",
    "updated_at": "2016-07-15T16:43:25Z",
    "body": "Following previous discussion this feature request seems not required.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/233005722",
    "html_url": "https://github.com/electron/electron/issues/6504#issuecomment-233005722",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6504",
    "id": 233005722,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-07-15T16:50:31Z",
    "updated_at": "2016-07-15T16:50:31Z",
    "body": "> You gave the anwser, if atom do that, it's probably a reliable and respectful of electron philosophy way.\n\nYeah, I also think the IPC approach (that @MarshallOfSound mentioned) is another reliable way of doing this that I've seen other apps use as well.\n"
  }
]