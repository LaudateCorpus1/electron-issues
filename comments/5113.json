[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208514256",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208514256",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208514256,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T19:25:37Z",
    "updated_at": "2016-04-11T19:25:37Z",
    "body": "You can't. This is by design. It doesn't have access to process and IPC since those are only available because of the Node context.\n\nTo achieve what you want to do you need nodeIntegration enabled. I have wrote apps that work in both contexts and take advantage of the Node context if available by detecting if `window.process` is defined.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208516861",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208516861",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208516861,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T19:30:13Z",
    "updated_at": "2016-04-11T19:30:13Z",
    "body": "However there might be a way around it. I haven't tested this yet but you might be able to have a nodeIntegration false BrowserWindow emit events your main.js can listen to. From there it can handle it in the Node context. And then if needed can manipulate or execute code in the BrowserWindow via the main.js. You won't be able to to use IPC but it would set up some form of communication.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208530019",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208530019",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208530019,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T19:56:33Z",
    "updated_at": "2016-04-11T19:56:33Z",
    "body": "@Luncher Create a preload script:\n\n```\nwindow.ipc = require('ipc')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208541808",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208541808",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208541808,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T20:18:02Z",
    "updated_at": "2016-04-11T20:18:02Z",
    "body": "Ha @paulcbetts, I was just returning to this to say the preload script can do this. I was unaware it still had access to the Node context until I started digging into a workaround for this. So disregard what I previously said @Luncher.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208663883",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208663883",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208663883,
    "user": {
      "login": "Luncher",
      "id": 5138977,
      "avatar_url": "https://avatars3.githubusercontent.com/u/5138977?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Luncher",
      "html_url": "https://github.com/Luncher",
      "followers_url": "https://api.github.com/users/Luncher/followers",
      "following_url": "https://api.github.com/users/Luncher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Luncher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Luncher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Luncher/subscriptions",
      "organizations_url": "https://api.github.com/users/Luncher/orgs",
      "repos_url": "https://api.github.com/users/Luncher/repos",
      "events_url": "https://api.github.com/users/Luncher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Luncher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T02:08:30Z",
    "updated_at": "2016-04-12T02:08:30Z",
    "body": "@paulcbetts window.ipc = require ( 'ipc') can be put where?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208713736",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208713736",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208713736,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T05:28:33Z",
    "updated_at": "2016-04-12T05:28:33Z",
    "body": "When you spawn your browser window set the preload option to a script you wish to preload:\n\n``` javascript\nwebPreferences: {\n    nodeIntegration: false,\n    preload: \"preload.js\"\n}\n```\n\nThen in the preload script put in `window.ipc = require('ipc')`. Do your IPC communication in the preload.js and have the code interact with your browser window as if it was loaded using script tags.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208714640",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208714640",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208714640,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T05:30:20Z",
    "updated_at": "2016-04-12T05:30:20Z",
    "body": "The docs also indicate the preload script must have an absolute path.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208733632",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-208733632",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 208733632,
    "user": {
      "login": "Luncher",
      "id": 5138977,
      "avatar_url": "https://avatars3.githubusercontent.com/u/5138977?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Luncher",
      "html_url": "https://github.com/Luncher",
      "followers_url": "https://api.github.com/users/Luncher/followers",
      "following_url": "https://api.github.com/users/Luncher/following{/other_user}",
      "gists_url": "https://api.github.com/users/Luncher/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Luncher/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Luncher/subscriptions",
      "organizations_url": "https://api.github.com/users/Luncher/orgs",
      "repos_url": "https://api.github.com/users/Luncher/repos",
      "events_url": "https://api.github.com/users/Luncher/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Luncher/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-12T06:43:39Z",
    "updated_at": "2016-04-12T06:43:39Z",
    "body": "thanks @baconface \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249669444",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-249669444",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 249669444,
    "user": {
      "login": "akashnimare",
      "id": 2263909,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2263909?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akashnimare",
      "html_url": "https://github.com/akashnimare",
      "followers_url": "https://api.github.com/users/akashnimare/followers",
      "following_url": "https://api.github.com/users/akashnimare/following{/other_user}",
      "gists_url": "https://api.github.com/users/akashnimare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akashnimare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akashnimare/subscriptions",
      "organizations_url": "https://api.github.com/users/akashnimare/orgs",
      "repos_url": "https://api.github.com/users/akashnimare/repos",
      "events_url": "https://api.github.com/users/akashnimare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akashnimare/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-26T19:18:29Z",
    "updated_at": "2016-09-26T19:18:29Z",
    "body": "@paulcbetts is there any way I could use **require** in renderer process while nodeintegration is set to false?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249749560",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-249749560",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 249749560,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T02:20:09Z",
    "updated_at": "2016-09-27T02:20:09Z",
    "body": "@akashnimare Why...  If you insert `require` into the global scope with `nodeIntegration` disabled you may as well just turn on `nodeIntegration`...\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249952771",
    "html_url": "https://github.com/electron/electron/issues/5113#issuecomment-249952771",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5113",
    "id": 249952771,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-27T18:22:45Z",
    "updated_at": "2016-09-27T20:04:23Z",
    "body": "Here is also an alternate way of doing things if the above isn't quite what you wish to do. We have had some issues doing exactly what we wanted with the `preload.js` and `nodeIntegration` false stuff. It was mostly scope issues. Our end goal was to have an Electron app but also load the same code base in a browser. So now we have `nodeIntegration` set to true and do the following and it might work for you too.\n\nFirst we require all our Electron stuff (this must be the first JavaScript to run):\n\n``` javascript\nif (typeof module === 'object') {\n  // Require Electron, IPC, other modules here\n  window.module = module;\n  module = undefined;\n}\n```\n\nUndefining the module now makes it load third party dependencies in a normal browser context opposed to a node context.\n\nIf we do anything that requires Electron we do a check for it. This isn't exactly what we use but it could work for you:\n\n``` javascript\nfunction isElectron() {\n return navigator.userAgent.indexOf('Electron') !== -1;\n}\n```\n\nUsuage:\n\n``` javascript\nif (isElectron()) {\n  // Do Electron stuff\n}\n```\n\nJust remember doing this it means that when using it in Electron node is always \"hot\". And if you run third party scripts you risk them getting file system access, etc.\n"
  }
]