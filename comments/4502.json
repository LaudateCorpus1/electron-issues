[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/184972121",
    "html_url": "https://github.com/electron/electron/issues/4502#issuecomment-184972121",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/4502",
    "id": 184972121,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-02-17T01:55:43Z",
    "updated_at": "2016-02-17T01:55:43Z",
    "body": "Both crashes were because of out of memory, though they came from different parts of code. I'm closing this since this is not something we can fix.\n\nStack trace:\n\n```\nCrash reason:  EXC_BREAKPOINT / 0x00000002\nCrash address: 0x109eba961\nProcess uptime: 81 seconds\n\nThread 5 (crashed)\n 0  Electron Framework!base::debug::BreakDebugger() [debugger_posix.cc : 256 + 0x0]\n    rax = 0x0000000000000400   rdx = 0xffffffffffffffe0\n    rcx = 0x0000000000000020   rbx = 0x0000000000000000\n    rsi = 0x00007fcada013fe0   rdi = 0x000000010d810b04\n    rbp = 0x00007000022aae60   rsp = 0x00007000022aae60\n     r8 = 0x0000000000000040    r9 = 0x00007fff7a29b1e0\n    r10 = 0x00007fff9dbf2501   r11 = 0xfffff035282972a0\n    r12 = 0x00007000022ab2e8   r13 = 0x1e008c3605b20706\n    r14 = 0x00007000022ab2f0   r15 = 0x00007000022ab2f8\n    rip = 0x0000000109eba961\n    Found by: given as instruction pointer in context\n 1  Electron Framework!logging::LogMessage::~LogMessage() [logging.cc : 601 + 0x5]\n    rbp = 0x00007000022ab2d0   rsp = 0x00007000022aae70\n    rip = 0x0000000109ed16df\n    Found by: previous frame's frame pointer\n 2  Electron Framework!base::(anonymous namespace)::OnNoMemory(unsigned long) [memory.cc : 18 + 0x8]\n    rbp = 0x00007000022ab420   rsp = 0x00007000022ab2e0\n    rip = 0x0000000109ee7f5f\n    Found by: previous frame's frame pointer\n 3  Electron Framework!content::ChildDiscardableSharedMemoryManager::AllocateLockedDiscardableSharedMemory(unsigned long, int) [child_discardable_shared_memory_manager.cc : 302 + 0x8]\n    rbp = 0x00007000022ab550   rsp = 0x00007000022ab430\n    rip = 0x000000010a7eb313\n    Found by: previous frame's frame pointer\n 4  Electron Framework!content::ChildDiscardableSharedMemoryManager::AllocateLockedDiscardableMemory(unsigned long) [child_discardable_shared_memory_manager.cc : 178 + 0xd]\n    rbp = 0x00007000022ab600   rsp = 0x00007000022ab560\n    rip = 0x000000010a7eb05c\n    Found by: previous frame's frame pointer\n 5  Electron Framework!SkDiscardableMemory::Create(unsigned long) [SkDiscardableMemory_chrome.cc : 38 + 0x14]\n    rbp = 0x00007000022ab630   rsp = 0x00007000022ab610\n    rip = 0x000000010b88334f\n    Found by: previous frame's frame pointer\n 6  Electron Framework!SkResourceCacheDiscardableAllocator::allocPixelRef(SkBitmap*, SkColorTable*) [SkResourceCache.cpp : 169 + 0x3]\n    rbp = 0x00007000022ab680   rsp = 0x00007000022ab640\n    rip = 0x000000010b90f9fb\n    Found by: previous frame's frame pointer\n 7  Electron Framework!<name omitted> [SkBitmap.cpp : 273 + 0x9]\n    rbp = 0x00007000022ab6a0   rsp = 0x00007000022ab690\n    rip = 0x000000010b891ef1\n    Found by: previous frame's frame pointer\n 8  Electron Framework!SkImageGenerator::tryGenerateBitmap(SkBitmap*, SkImageInfo const*, SkBitmap::Allocator*) [SkImageGenerator.cpp : 149 + 0x11]\n    rbp = 0x00007000022abb00   rsp = 0x00007000022ab6b0\n    rip = 0x000000010b8d71ab\n    Found by: previous frame's frame pointer\n 9  Electron Framework!SkImageCacherator::generateBitmap(SkBitmap*) [SkImageGenerator.h : 173 + 0x11]\n    rbp = 0x00007000022abb90   rsp = 0x00007000022abb10\n    rip = 0x000000010b8d64b1\n    Found by: previous frame's frame pointer\n10  Electron Framework!SkImageCacherator::lockAsBitmap(SkBitmap*, SkImage const*) [SkImageCacherator.cpp : 118 + 0xb]\n    rbp = 0x00007000022abc00   rsp = 0x00007000022abba0\n    rip = 0x000000010b8d659a\n    Found by: previous frame's frame pointer\n11  Electron Framework!SkImage::preroll(GrContext*) const [SkImage.cpp : 64 + 0xc]\n    rbp = 0x00007000022abc70   rsp = 0x00007000022abc10\n    rip = 0x000000010b92e456\n    Found by: previous frame's frame pointer\n12  Electron Framework!cc::(anonymous namespace)::ImageDecodeTaskImpl::RunOnWorkerThread() [image_decode_controller.cc : 82 + 0x5]\n    rbp = 0x00007000022abd40   rsp = 0x00007000022abc80\n    rip = 0x000000010a22150f\n    Found by: previous frame's frame pointer\n13  Electron Framework!cc::TaskGraphRunner::RunTaskWithLockAcquired() [task_graph_runner.cc : 418 + 0x8]\n    rbp = 0x00007000022abe30   rsp = 0x00007000022abd50\n    rip = 0x000000010a20622e\n    Found by: previous frame's frame pointer\n```\n\n```\nCrash reason:  EXC_BAD_INSTRUCTION / 0x00000001\nCrash address: 0x101288dc4\nProcess uptime: 288 seconds\n\nThread 0 (crashed)\n 0  Electron Framework!atom::(anonymous namespace)::Crash() [atom_bindings.cc : 28 +\n 0x0]\n    rax = 0x0000000000000003   rdx = 0x0000020000000200\n    rcx = 0x0000000000000000   rbx = 0x0000000105cf75a0\n    rsi = 0x0000000105ce3d77   rdi = 0x0000000105cf75a0\n    rbp = 0x00007fff5ea40490   rsp = 0x00007fff5ea40490\n     r8 = 0x0000000000000040    r9 = 0x00007fff7a29b110\n    r10 = 0xffffffffffffffff   r11 = 0x00007fdc920fd668\n    r12 = 0x00007fff5ea40d80   r13 = 0x00007fddb902d620\n    r14 = 0x0000000105cf75a0   r15 = 0x0000000105ce3d77\n    rip = 0x0000000101288dc4\n    Found by: given as instruction pointer in context\n 1  Electron Framework!atom::(anonymous namespace)::FatalErrorCallback(char const*, \nchar const*) [atom_bindings.cc : 40 + 0x5]\n    rbp = 0x00007fff5ea405e0   rsp = 0x00007fff5ea404a0\n    rip = 0x0000000101288db9\n    Found by: previous frame's frame pointer\n 2  libnode.dylib!v8::internal::V8::FatalProcessOutOfMemory(char const*, bool) [api.\ncc : 295 + 0xc]\n    rbp = 0x00007fff5ea411d0   rsp = 0x00007fff5ea405f0\n    rip = 0x000000010571bf81\n    Found by: previous frame's frame pointer\n 3  libnode.dylib!v8::internal::Factory::NewFillerObject(int, bool, v8::internal::AllocationSpace) [factory.cc : 79 + 0x11]\n    rbp = 0x00007fff5ea41220   rsp = 0x00007fff5ea411e0\n    rip = 0x00000001058cbab9\n    Found by: previous frame's frame pointer\n 4  libnode.dylib!v8::internal::Runtime_AllocateInTargetSpace(int, v8::internal::Object**, v8::internal::Isolate*) [runtime-internal.cc : 246 + 0x8]\n    rbp = 0x00007fff5ea41250   rsp = 0x00007fff5ea41230\n    rip = 0x0000000105b21c0d\n    Found by: previous frame's frame pointer\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/185163195",
    "html_url": "https://github.com/electron/electron/issues/4502#issuecomment-185163195",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/4502",
    "id": 185163195,
    "user": {
      "login": "felicienfrancois",
      "id": 988144,
      "avatar_url": "https://avatars1.githubusercontent.com/u/988144?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/felicienfrancois",
      "html_url": "https://github.com/felicienfrancois",
      "followers_url": "https://api.github.com/users/felicienfrancois/followers",
      "following_url": "https://api.github.com/users/felicienfrancois/following{/other_user}",
      "gists_url": "https://api.github.com/users/felicienfrancois/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/felicienfrancois/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/felicienfrancois/subscriptions",
      "organizations_url": "https://api.github.com/users/felicienfrancois/orgs",
      "repos_url": "https://api.github.com/users/felicienfrancois/repos",
      "events_url": "https://api.github.com/users/felicienfrancois/events{/privacy}",
      "received_events_url": "https://api.github.com/users/felicienfrancois/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-17T11:35:11Z",
    "updated_at": "2016-02-17T11:35:11Z",
    "body": "OK, thank you for your answer.\n\nIs there a way to known if it was due to a memory leak in my code or if it would be solved by increasing `max_old_space_size`?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/185174056",
    "html_url": "https://github.com/electron/electron/issues/4502#issuecomment-185174056",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/4502",
    "id": 185174056,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-02-17T12:12:49Z",
    "updated_at": "2016-02-17T12:12:49Z",
    "body": "You can use the profile tools in devtools to find out the memory leak, increasing `max_old_space_size` won't really work, it would just delay the crash.\n"
  }
]