[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/131313622",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-131313622",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 131313622,
    "user": {
      "login": "afocus",
      "id": 2716637,
      "avatar_url": "https://avatars0.githubusercontent.com/u/2716637?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afocus",
      "html_url": "https://github.com/afocus",
      "followers_url": "https://api.github.com/users/afocus/followers",
      "following_url": "https://api.github.com/users/afocus/following{/other_user}",
      "gists_url": "https://api.github.com/users/afocus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afocus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afocus/subscriptions",
      "organizations_url": "https://api.github.com/users/afocus/orgs",
      "repos_url": "https://api.github.com/users/afocus/repos",
      "events_url": "https://api.github.com/users/afocus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afocus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-15T07:43:10Z",
    "updated_at": "2015-08-15T07:43:10Z",
    "body": "i want it too\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132743953",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-132743953",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 132743953,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T19:03:17Z",
    "updated_at": "2015-08-19T19:03:17Z",
    "body": "We just put up a bounty for this, as it's going to be the next hold-up in our project. We need an API that both allows us to start downloads and to control downloads that were started by navigating to a link or loading a PDF.\n1. Event on Browser-Window to detect when a new download has started (window.on(\"download\", function (details, downloadID) {})\n   a. Need the ability to approve/deny download\n   b. Need the ability to change the download location\n   c. This should produce a download ID that we can use to pause/resume downloads\n2. Implement this interface for managing downloads:\n\n```\ndownloads.download({url: \"\", download_dir:\"\", file_name\"\"}, function(error, downloadId) {})\ndownloads.pause(downloadId, callback)\ndownloads.resume(downloadId, callback)\ndownloads.cancel(downloadId, callback)\ndownloads.show(downloadId)\n\n// details = {\n//   download_id: \"\",\n//   url: \"\",\n//   file_name: \"\",\n//   total_bytes: \"\",\n//   downloaded_bytes: \"\",\n//   download_location: \"\"\n// }\n\ndownloads.on('changed', function(details) {})\ndownloads.on('progress', function(details) {})\n```\n\nIt might be better to have the downloads manager be a per-Browser Window instance.\n\nIf you have any questions, feel free to ask!\n\n[![Bountysource](https://www.bountysource.com/badge/issue?issue_id=25699517)](https://www.bountysource.com/issues/25699517-downloads-api?utm_source=25699517&utm_medium=shield&utm_campaign=ISSUE_BADGE)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/134433901",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-134433901",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 134433901,
    "user": {
      "login": "bengotow",
      "id": 1037212,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1037212?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bengotow",
      "html_url": "https://github.com/bengotow",
      "followers_url": "https://api.github.com/users/bengotow/followers",
      "following_url": "https://api.github.com/users/bengotow/following{/other_user}",
      "gists_url": "https://api.github.com/users/bengotow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bengotow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bengotow/subscriptions",
      "organizations_url": "https://api.github.com/users/bengotow/orgs",
      "repos_url": "https://api.github.com/users/bengotow/repos",
      "events_url": "https://api.github.com/users/bengotow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bengotow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-25T01:05:22Z",
    "updated_at": "2015-08-25T01:05:22Z",
    "body": "Hey folksâ€”This may eventually be built into Electron, but you can implement it yourself in a BrowserWindow. We do something very similar in the Electron mail client I work on (download attachments, cache them, specify download folder, etc.) We use the https://github.com/request/request library to stream directly to files in the user's temp folder and then move them / open them when downloads have completed.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/134574199",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-134574199",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 134574199,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-08-25T12:49:25Z",
    "updated_at": "2015-08-25T12:49:25Z",
    "body": "We can just add a new `will-download` event for `WebContents` instead of inventing a whole set of download API:\n\n``` js\nwindow.webContents.on('will-download', function(event, url, filename, mimeType, userGesture) {\n  event.preventDefault();\n  require('request')(url, function(data) {\n    require('fs').writeFileSync('/somewhere', data);\n  });\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/134599971",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-134599971",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 134599971,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-25T14:16:04Z",
    "updated_at": "2015-08-25T14:16:04Z",
    "body": "@zcbenz Hopefully that would work well for us, though it would almost be more preferable if the download was handled by Electron so we wouldn't need to deal with the client-certificate aspect of things. I'm assuming the method you provided would require me to setup the request object with our client certificate?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/135617948",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-135617948",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 135617948,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-08-28T02:52:04Z",
    "updated_at": "2015-08-28T02:52:04Z",
    "body": "> @zcbenz Hopefully that would work well for us, though it would almost be more preferable if the download was handled by Electron so we wouldn't need to deal with the client-certificate aspect of things. I'm assuming the method you provided would require me to setup the request object with our client certificate?\n\nYeah it would require you to use Node.js's API to handle requests, and since it is independent from Chrome's networking stack you have to handle the certificate things yourself. \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/135757579",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-135757579",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 135757579,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-28T12:18:40Z",
    "updated_at": "2015-08-28T12:18:40Z",
    "body": "Okay, I think that'd work since we were planning on packaging our certificate with the application anyways. It's not the best solution for everyone, but it would be enough to get us by! Thanks for looking  at it!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/135932140",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-135932140",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 135932140,
    "user": {
      "login": "mmommo",
      "id": 5094263,
      "avatar_url": "https://avatars3.githubusercontent.com/u/5094263?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmommo",
      "html_url": "https://github.com/mmommo",
      "followers_url": "https://api.github.com/users/mmommo/followers",
      "following_url": "https://api.github.com/users/mmommo/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmommo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmommo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmommo/subscriptions",
      "organizations_url": "https://api.github.com/users/mmommo/orgs",
      "repos_url": "https://api.github.com/users/mmommo/repos",
      "events_url": "https://api.github.com/users/mmommo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmommo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-29T02:35:01Z",
    "updated_at": "2015-08-29T02:35:01Z",
    "body": "Hi kjlaw89,\nWould you please give some hints on \"packaging our certificate\"? Will read cookies & add them back to header be enough? \n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/136123023",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-136123023",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 136123023,
    "user": {
      "login": "hokein",
      "id": 2557445,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2557445?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hokein",
      "html_url": "https://github.com/hokein",
      "followers_url": "https://api.github.com/users/hokein/followers",
      "following_url": "https://api.github.com/users/hokein/following{/other_user}",
      "gists_url": "https://api.github.com/users/hokein/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hokein/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hokein/subscriptions",
      "organizations_url": "https://api.github.com/users/hokein/orgs",
      "repos_url": "https://api.github.com/users/hokein/repos",
      "events_url": "https://api.github.com/users/hokein/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hokein/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-30T09:56:11Z",
    "updated_at": "2015-08-30T09:56:11Z",
    "body": "After some investigationa, the download process seems to be hard-coded in Chromium. The `WebContents` in Chromium doesn't expose any `download` related interfaces(except [`CanDownload`](https://code.google.com/p/chromium/codesearch#chromium/src/android_webview/native/aw_web_contents_delegate.h&q=CanDo&sq=package:chromium&l=30)) that allow us to customize the download process. \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/136251050",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-136251050",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 136251050,
    "user": {
      "login": "steelbrain",
      "id": 4278113,
      "avatar_url": "https://avatars2.githubusercontent.com/u/4278113?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/steelbrain",
      "html_url": "https://github.com/steelbrain",
      "followers_url": "https://api.github.com/users/steelbrain/followers",
      "following_url": "https://api.github.com/users/steelbrain/following{/other_user}",
      "gists_url": "https://api.github.com/users/steelbrain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/steelbrain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/steelbrain/subscriptions",
      "organizations_url": "https://api.github.com/users/steelbrain/orgs",
      "repos_url": "https://api.github.com/users/steelbrain/repos",
      "events_url": "https://api.github.com/users/steelbrain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/steelbrain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T04:49:10Z",
    "updated_at": "2015-08-31T04:49:10Z",
    "body": "@zcbenz just a side note, your example loads everything into ram and then flushes it, here's a better example\n\n``` js\nconst request = require('request')\nconst fs = require('fs')\nwindow.webContents.on('will-download', function(event, url, filename, mimeType, userGesture) {\n  event.preventDefault();\n  request(url).on('response', function(res){\n    res.pipe(fs.createWriteStream('/somewhere'))\n  })\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/136360176",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-136360176",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 136360176,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-31T12:37:19Z",
    "updated_at": "2015-08-31T12:37:19Z",
    "body": "@mmommo What part of it do you want to know? Basically I'll be putting a PEM file in our application directory and using it to access certain resources on an external server. Right now I also have to install a .p12 file on the computer because we can't pass in a PEM file directly yet (see #1956), but eventually we'll be able to do that too.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/137576112",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-137576112",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 137576112,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-03T21:10:14Z",
    "updated_at": "2015-09-03T21:11:55Z",
    "body": "@zcbenz @deepak1556 Unfortunately I don't think this event is enough for me to do the download I need to do. These are PDF (http://fpdf.org/en/doc/output.htm) files that are being sent through PHP by  essentially doing:\n\n```\nheader('Content-Description: File Transfer');\nheader('Content-Type: application/pdf');\nheader('Content-Disposition: inline; filename=\"attachmentname.pdf\"');\nheader('Expires: 0');\nheader('Cache-Control: must-revalidate');\nheader('Pragma: public');\nheader('Content-Length: ' . filesize($file));\nreadfile($file);\n```\n\nI did notice that I could change where the downloads would be stored in this event, so maybe we could do some sort of hybrid method? If we updated the \"item\" on will-download to contain a unique ID for the download (randomly generated would be fine...), maybe we could introduce a method to download without prompt (maybe on the event object, in addition to event.preventDefault () have an event.preventDialog ()?) and add another event on session called \"download-finished\", which references the same information in will-download?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/138192089",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-138192089",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 138192089,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-09-07T05:43:56Z",
    "updated_at": "2015-09-07T05:43:56Z",
    "body": "I'm reopening this issue since current API is not able to handle downloads with custom headers.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/138193614",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-138193614",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 138193614,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-09-07T05:49:43Z",
    "updated_at": "2015-09-07T05:49:43Z",
    "body": "I think we probably still need to wrap the Chromium's download API to cover all cases, one possible API is:\n\n``` coffeescript\nwebContents.session.on 'will-download', (event, item, webContents) ->\n  item.on 'update', ->\n    console.log(item.percentComplete);\n  item.on 'complete', ->\n    console.log('completed');\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/140422393",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-140422393",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 140422393,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-15T15:04:49Z",
    "updated_at": "2015-09-15T15:04:49Z",
    "body": "I'd love to see this introduced soon! Especially if I can choose a place for it to download to through the code and prevent the dialog from appearing (so I could download the file to a temporary place for viewing first). We still have a bounty open on this!\n\n[![Bountysource](https://www.bountysource.com/badge/issue?issue_id=25699517)](https://www.bountysource.com/issues/25699517-downloads-api?utm_source=25699517&utm_medium=shield&utm_campaign=ISSUE_BADGE)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141166046",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141166046",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141166046,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-17T17:53:41Z",
    "updated_at": "2015-09-17T17:53:41Z",
    "body": "We just bumped the bounty on this one by another $200! Someone please jump on this, because if I have to do it I it won't be pretty! Haha\n\n[![Bountysource](https://www.bountysource.com/badge/issue?issue_id=25699517)](https://www.bountysource.com/issues/25699517-downloads-api?utm_source=25699517&utm_medium=shield&utm_campaign=ISSUE_BADGE)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141183422",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141183422",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141183422,
    "user": {
      "login": "adilanchian",
      "id": 13204620,
      "avatar_url": "https://avatars3.githubusercontent.com/u/13204620?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adilanchian",
      "html_url": "https://github.com/adilanchian",
      "followers_url": "https://api.github.com/users/adilanchian/followers",
      "following_url": "https://api.github.com/users/adilanchian/following{/other_user}",
      "gists_url": "https://api.github.com/users/adilanchian/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adilanchian/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adilanchian/subscriptions",
      "organizations_url": "https://api.github.com/users/adilanchian/orgs",
      "repos_url": "https://api.github.com/users/adilanchian/repos",
      "events_url": "https://api.github.com/users/adilanchian/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adilanchian/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-17T18:42:35Z",
    "updated_at": "2015-09-17T18:42:35Z",
    "body": "Quick question for you guys, I just updated to v 0.33.0 and I originally was able to inject a pdf url into a pdf.js viewer I implemented in an iFrame. Now when a pdf is detected I get the save pdf dialog. Is this because of this? I was originally running v 0.30.4 and my implementation worked fine! Thanks for all your help in advance\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141542016",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141542016",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141542016,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T19:17:36Z",
    "updated_at": "2015-09-18T19:17:36Z",
    "body": "@denim2x Preferably I'd like Electron to manage the download process, I just need the capability to detect when the file has started, choose where it gets saved to behind the scenes (no dialog), and have some sort of notice when it has finished.\n\nThe reason I'm trying to do this is because our web application serves up PDF files through the browser (obviously with Adobe reader support). Moving to Electron, I don't want to lose this feature, as it's pretty important, so I need the capability to detect when a PDF download with an _inline_ Content Disposition starts, save the file automatically (no dialog) to a temporary directory, then display it in Electron using PDF.js.\n\nThe problem with the current method is that the path to the download file is just a reference to the PHP file in our system which started the download, not the actual PDF itself because the content was returned using PHP and even with all of the headers and session details I cannot get the PDF download from just PHP, though, there may be some way around this that I cannot figure out...\n\nI think @zcbenz's API would be just fine - I'd envision it working something like this for us:\n\n```\nwebContents.session.on ('will-download', function (event, item, webContents) {\n  event.preventDialog ();\n  event.session.setDownloadPath (\"path/to/tmp/folder\");\n\n  item.on ('update', function () {\n    console.log(item.percentComplete);\n  }\n  item.on ('complete', function () {\n    console.log('completed');\n    mainWindow.createPdfView (\"path/to/tmp/folder/item.name\");\n  }\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141559330",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141559330",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141559330,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-18T20:27:41Z",
    "updated_at": "2015-09-18T20:27:41Z",
    "body": "@denim2x This is a simple example of FPDF an Content-Disposition: Inline: http://www.fpdf.org/en/tutorial/tuto2.php\n\nThis doesn't quite mirror our problem and I'm sure PDF.js will load this just fine because it _only_ returns a PDF file. In our use case though, if you went to tuto2.php it would present you with a normal HTML form and a button you would click to generate the PDF, which would POST the form to the current page (lets say tuto2.php, for example) and may or may not return a PDF as the result using headers.\n\nMost of our problem comes from the fact that, depending on how you access tuto2.php you may or may not get a HTML form or PHP form as the result. When you try access everything now and click \"Generate Report\" it pops up with a Download box for the PDF that was sent back and doesn't leave the page (which is what I would expect since there's no way for me to handle anything otherwise).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141703072",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141703072",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141703072,
    "user": {
      "login": "denim2x",
      "id": 8561801,
      "avatar_url": "https://avatars2.githubusercontent.com/u/8561801?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/denim2x",
      "html_url": "https://github.com/denim2x",
      "followers_url": "https://api.github.com/users/denim2x/followers",
      "following_url": "https://api.github.com/users/denim2x/following{/other_user}",
      "gists_url": "https://api.github.com/users/denim2x/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/denim2x/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/denim2x/subscriptions",
      "organizations_url": "https://api.github.com/users/denim2x/orgs",
      "repos_url": "https://api.github.com/users/denim2x/repos",
      "events_url": "https://api.github.com/users/denim2x/events{/privacy}",
      "received_events_url": "https://api.github.com/users/denim2x/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-19T20:23:43Z",
    "updated_at": "2015-09-19T20:24:09Z",
    "body": "@kjlaw89 One more aspect I need to clarify: AFAIK, the only way to implement the 'pause/resume' feature on WebKit would be to download the file in chunks using the `Range` header; if that's not the case please let me know.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141705677",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141705677",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141705677,
    "user": {
      "login": "steelbrain",
      "id": 4278113,
      "avatar_url": "https://avatars2.githubusercontent.com/u/4278113?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/steelbrain",
      "html_url": "https://github.com/steelbrain",
      "followers_url": "https://api.github.com/users/steelbrain/followers",
      "following_url": "https://api.github.com/users/steelbrain/following{/other_user}",
      "gists_url": "https://api.github.com/users/steelbrain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/steelbrain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/steelbrain/subscriptions",
      "organizations_url": "https://api.github.com/users/steelbrain/orgs",
      "repos_url": "https://api.github.com/users/steelbrain/repos",
      "events_url": "https://api.github.com/users/steelbrain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/steelbrain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-19T20:37:39Z",
    "updated_at": "2015-09-19T20:37:39Z",
    "body": "I wonder why wouldn't the fetch API work? It lets you stream data.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141713363",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141713363",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141713363,
    "user": {
      "login": "kjlaw89",
      "id": 4183007,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4183007?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kjlaw89",
      "html_url": "https://github.com/kjlaw89",
      "followers_url": "https://api.github.com/users/kjlaw89/followers",
      "following_url": "https://api.github.com/users/kjlaw89/following{/other_user}",
      "gists_url": "https://api.github.com/users/kjlaw89/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kjlaw89/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kjlaw89/subscriptions",
      "organizations_url": "https://api.github.com/users/kjlaw89/orgs",
      "repos_url": "https://api.github.com/users/kjlaw89/repos",
      "events_url": "https://api.github.com/users/kjlaw89/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kjlaw89/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-19T23:13:48Z",
    "updated_at": "2015-09-19T23:13:48Z",
    "body": "@denim2x Pausing/resuming isn't really necessary in our case, we simply need the ability to download. The original API I specified (the Downloads API in https://github.com/atom/electron/issues/2491#issuecomment-132743953) was just the continuation of another idea in a separate thread (also linked to in that same comment). I think the API that zcbenz specified would be best though because the code already exists at this point (and matches up better with the style of everything else).\n\nI'm not sure if you're going to follow through with the idea you had on Bountysource or not - I'm not quite sure that'll work in the end, but I won't know until I see it. Something to keep in mind is that we require the use of client certificates in order to access our server and that the session established with Electron for the current webview would need to be carried over to the XML Request object in order to do anything. This is another big reason why I'd like all of this to be handled in the Electron side of things because it eliminates the need for us to start a new request and manually add the client certificates and session data from the current webview session.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141722040",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-141722040",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 141722040,
    "user": {
      "login": "mmommo",
      "id": 5094263,
      "avatar_url": "https://avatars3.githubusercontent.com/u/5094263?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmommo",
      "html_url": "https://github.com/mmommo",
      "followers_url": "https://api.github.com/users/mmommo/followers",
      "following_url": "https://api.github.com/users/mmommo/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmommo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmommo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmommo/subscriptions",
      "organizations_url": "https://api.github.com/users/mmommo/orgs",
      "repos_url": "https://api.github.com/users/mmommo/repos",
      "events_url": "https://api.github.com/users/mmommo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmommo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-20T00:30:09Z",
    "updated_at": "2015-09-20T00:30:09Z",
    "body": "@denim2x @kjlaw89 Pausing/resuming isn't really necessary in just your paticular case. It's not even necessary for most of the use cases. The download api would open up a broad opportunities for lots of apps. The majority use of the api would be download a big amount of small files so user only need to see folder selection dialogue for once(or silently). For the small amount of large files I really don't see the necessary to do automatic download in the background.\n\nI'm planning to develop a app for my business to login to Net Banks downloading bank statements automatically. Vote for download API. Vote for zcbenz API.\n\nCheers!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/204563890",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-204563890",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 204563890,
    "user": {
      "login": "hp011235",
      "id": 7158776,
      "avatar_url": "https://avatars1.githubusercontent.com/u/7158776?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hp011235",
      "html_url": "https://github.com/hp011235",
      "followers_url": "https://api.github.com/users/hp011235/followers",
      "following_url": "https://api.github.com/users/hp011235/following{/other_user}",
      "gists_url": "https://api.github.com/users/hp011235/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hp011235/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hp011235/subscriptions",
      "organizations_url": "https://api.github.com/users/hp011235/orgs",
      "repos_url": "https://api.github.com/users/hp011235/repos",
      "events_url": "https://api.github.com/users/hp011235/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hp011235/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-01T20:58:22Z",
    "updated_at": "2016-04-01T20:58:22Z",
    "body": "@adilanchian Were you able to disable the show pdf dialog? I am facing the exact same problem and showing the pdfs in pdf.js viewer also shows me the save dialog which I want to hide.\nTIA.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/231063369",
    "html_url": "https://github.com/electron/electron/issues/2491#issuecomment-231063369",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2491",
    "id": 231063369,
    "user": {
      "login": "coreybruce",
      "id": 8393780,
      "avatar_url": "https://avatars1.githubusercontent.com/u/8393780?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/coreybruce",
      "html_url": "https://github.com/coreybruce",
      "followers_url": "https://api.github.com/users/coreybruce/followers",
      "following_url": "https://api.github.com/users/coreybruce/following{/other_user}",
      "gists_url": "https://api.github.com/users/coreybruce/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/coreybruce/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/coreybruce/subscriptions",
      "organizations_url": "https://api.github.com/users/coreybruce/orgs",
      "repos_url": "https://api.github.com/users/coreybruce/repos",
      "events_url": "https://api.github.com/users/coreybruce/events{/privacy}",
      "received_events_url": "https://api.github.com/users/coreybruce/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-07T12:28:23Z",
    "updated_at": "2016-07-07T12:28:23Z",
    "body": "Hey @steelbrain where exactly do I put your download api code in, I am using it for my Google Drive application and would really need this until it's implemented or hard coded into electron.\n"
  }
]