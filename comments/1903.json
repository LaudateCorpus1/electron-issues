[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110232253",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110232253",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110232253,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-06-09T05:50:28Z",
    "updated_at": "2015-06-09T05:50:28Z",
    "body": "I don't think `graceful-fs` can work in latest io.js, `graceful-fs` works by hooking `fs.open`, it worked in Node 0.10.x:\nhttps://github.com/joyent/node/blob/v0.10.38/lib/fs.js#L207\n\nbut recent io.js releases calls `binding.open` directly in `readFile` so it doesn't work anymore:\nhttps://github.com/nodejs/io.js/blob/v1.6.4/lib/fs.js#L246\n\nI suggest reporting a bug to graceful-fs, or you can implement your own file reading pool, opening thousands of files at the same time seems pretty bad to me.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110232411",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110232411",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110232411,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-09T05:52:16Z",
    "updated_at": "2015-06-09T05:52:16Z",
    "body": "Thanks for the explanation!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110361424",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110361424",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110361424,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-09T13:46:12Z",
    "updated_at": "2015-06-09T13:46:12Z",
    "body": "@zcbenz I think this needs to reopen, I tried my sample on io.js and cannot reproduce the EMFILE issue. To reproduce take this code:\n\n``` javascript\nvar fs = require(\"fs\");\n\nvar glob = require(\"glob\");\nglob(\"/<path to folder with many JS files>/**/*.js\", function (error, matches) {\n    counter = 0;\n    console.log(\"matches: \", matches.length);\n    matches.forEach(function (m) {\n        fs.readFile(m, function (e, c) {\n            if (e) {\n                console.log(e);\n            } else {\n                console.log(counter++);\n            }\n        });\n    });\n});\n```\n\n``` json\n{\n    \"name\": \"name\",\n    \"description\": \"description\",\n    \"author\": \"author\",\n    \"version\": \"1.0.0\",\n    \"main\": \"pathToMain\",\n    \"dependencies\": {\n        \"glob\": \"*\"\n    }\n}\n```\n\nUse io.js version 1.6.3 and run it. I can get to 8000 files without EMFILE error. When I try the same folder within Electron renderer, it quickly fails with EMFILE.\n\nInterestingly in this example I don't even need graceful-fs. I am not sure why io.js behaves differently here though :-(. Any ideas?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110439678",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110439678",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110439678,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-09T17:25:31Z",
    "updated_at": "2015-06-09T17:25:31Z",
    "body": "> Use io.js version 1.6.3 and run it. I can get to 8000 files without EMFILE error. When I try the same folder within Electron renderer, it quickly fails with EMFILE.\n\nElectron is going to have more files open from start versus a command line app, so you're going to hit that limit way quicker. \n\n> opening thousands of files at the same time seems pretty bad to me.\n\nThis is still good advice - why leave all these files open?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110441900",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110441900",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110441900,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-09T17:34:52Z",
    "updated_at": "2015-06-09T17:34:52Z",
    "body": "> Electron is going to have more files open from start versus a command line app, so you're going to hit that limit way quicker.\n\nI see that, but being able to open 900 files in electron vs. 8000 files in io.js seems like a huge difference to me even if electron keeps files open.\n\n> This is still good advice - why leave all these files open?\n\nWell, the files are not left open, they are closed once readFile() is calling into the callback. There is no leak here and its arguable if the code is good or bad. At least it maximizes fs throughput by trying to read as many files in parallel as possible. If you look at libraries like glob, you will notice that all of them read the fs and open stats and directories in parallel up to as many files and folders you have. \n\nSo, the only reason why it might be a bad idea is because of EMFILE and hence, thats why graceful-fs exists and is popular.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110461570",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110461570",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110461570,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-09T18:45:25Z",
    "updated_at": "2015-06-09T18:45:25Z",
    "body": "> So, the only reason why it might be a bad idea is because of EMFILE and hence, thats why graceful-fs exists and is popular.\n\nHm, you're still opening 8000 files concurrently though - even if you can successfully do this, you'd probably get better performance if you batched these and issued N at a time. At the end of the day there's still only one filesystem / disk, and you've just hit it with 8000 requests at the same time. \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110475243",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110475243",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110475243,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-09T19:25:48Z",
    "updated_at": "2015-06-09T19:25:48Z",
    "body": "And then what is the right batch to avoid EMFILE?\nAm 09.06.2015 8:45 nachm. schrieb \"Paul Betts\" notifications@github.com:\n\n> So, the only reason why it might be a bad idea is because of EMFILE and\n> hence, thats why graceful-fs exists and is popular.\n> \n> Hm, you're still opening 8000 files concurrently though - even if you can\n> successfully do this, you'd probably get better performance if you batched\n> these and issued N at a time. At the end of the day there's still only one\n> filesystem / disk, and you've just hit it with 8000 requests at the same\n> time.\n> \n> —\n> Reply to this email directly or view it on GitHub\n> https://github.com/atom/electron/issues/1903#issuecomment-110461570.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110594542",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110594542",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110594542,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-06-10T05:31:40Z",
    "updated_at": "2015-06-10T05:31:40Z",
    "body": "I believe Chromium has restricted the number of maximum opened files, so it reaches `EMFILE` much earlier than io.js. Even if we find a way to increase the number, your app will still see `EMFILE` when reading hundreds of thousands of files.\n\nI think the solution is to monkey-patch `fs.readFile` to hang when `EMFILE` happens and continue when some `fs.readFile` ends, like [what graceful-fs did](https://github.com/isaacs/node-graceful-fs/blob/master/graceful-fs.js).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/110609077",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-110609077",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 110609077,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-10T06:21:21Z",
    "updated_at": "2015-06-10T06:21:21Z",
    "body": "> I believe Chromium has restricted the number of maximum opened files\n\nOk thats interesting. Would it be possible to lift this restriction, similar to how Electron lifts the storage quota?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111352147",
    "html_url": "https://github.com/electron/electron/issues/1903#issuecomment-111352147",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1903",
    "id": 111352147,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-06-12T04:23:14Z",
    "updated_at": "2015-06-12T04:23:14Z",
    "body": "> Would it be possible to lift this restriction, similar to how Electron lifts the storage quota?\n\nIt should be possible, but I'm not sure where to patch. Patching user code to handle `EMFILE` or fixing it in graceful-fs seems a much faster way.\n"
  }
]