[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/50488339",
    "html_url": "https://github.com/electron/electron/issues/526#issuecomment-50488339",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/526",
    "id": 50488339,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-07-29T15:02:21Z",
    "updated_at": "2014-07-29T15:02:21Z",
    "body": "There is not such API and no plan for it. You can store window's state in either a file or via `localStorage`.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132942967",
    "html_url": "https://github.com/electron/electron/issues/526#issuecomment-132942967",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/526",
    "id": 132942967,
    "user": {
      "login": "imskull",
      "id": 3264061,
      "avatar_url": "https://avatars1.githubusercontent.com/u/3264061?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/imskull",
      "html_url": "https://github.com/imskull",
      "followers_url": "https://api.github.com/users/imskull/followers",
      "following_url": "https://api.github.com/users/imskull/following{/other_user}",
      "gists_url": "https://api.github.com/users/imskull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/imskull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/imskull/subscriptions",
      "organizations_url": "https://api.github.com/users/imskull/orgs",
      "repos_url": "https://api.github.com/users/imskull/repos",
      "events_url": "https://api.github.com/users/imskull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/imskull/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-20T08:52:53Z",
    "updated_at": "2015-08-20T08:52:53Z",
    "body": "For anyone needs.\nIn your init js:\n\n```\napp.on('ready', function() {\n  var path = require(\"path\");\n  var fs = require(\"fs\");\n  var initPath = path.join(app.getDataPath(), \"init.json\");\n  var data;\n  try {\n    data = JSON.parse(fs.readFileSync(initPath, 'utf8'));\n  }\n  catch(e) {\n  }\n  // Create the browser window.\n  mainWindow = new BrowserWindow((data && data.bounds) ? data.bounds : {width: 800, height: 600});\n  ...\n  mainWindow.on(\"close\", function() {\n    var data = {\n      bounds: mainWindow.getBounds()\n    };\n    fs.writeFileSync(initPath, JSON.stringify(data));\n  }\n  ...\n}\n```\n\nI couldn't find any way to use localStorage in the init js, have to use \"fs\" module instead.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/245821655",
    "html_url": "https://github.com/electron/electron/issues/526#issuecomment-245821655",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/526",
    "id": 245821655,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-09-09T05:17:25Z",
    "updated_at": "2016-09-09T05:17:25Z",
    "body": "Thanks for the snippet, @imskull. I used `electron-config` to persist the bounds to disk. Here's what I ended up with:\n\n``` js\nconst {app, BrowserWindow} = require('electron')\nconst Config = require('electron-config')\nconst config = new Config()\nlet win\n\napp.on('ready', () => {\n  let opts = {show: false}\n  Object.assign(opts, config.get('winBounds'))\n  win = new BrowserWindow(opts)\n  win.loadURL(`file://${__dirname}/app/index.html`)\n\n  win.once('ready-to-show', win.show)\n\n  // save window size and position\n  win.on('close', () => {\n    config.set('winBounds', win.getBounds())\n  })\n})\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/245822845",
    "html_url": "https://github.com/electron/electron/issues/526#issuecomment-245822845",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/526",
    "id": 245822845,
    "user": {
      "login": "steverandy",
      "id": 525332,
      "avatar_url": "https://avatars1.githubusercontent.com/u/525332?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/steverandy",
      "html_url": "https://github.com/steverandy",
      "followers_url": "https://api.github.com/users/steverandy/followers",
      "following_url": "https://api.github.com/users/steverandy/following{/other_user}",
      "gists_url": "https://api.github.com/users/steverandy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/steverandy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/steverandy/subscriptions",
      "organizations_url": "https://api.github.com/users/steverandy/orgs",
      "repos_url": "https://api.github.com/users/steverandy/repos",
      "events_url": "https://api.github.com/users/steverandy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/steverandy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-09T05:28:34Z",
    "updated_at": "2016-09-09T05:28:34Z",
    "body": "@zeke Is it safe to do fs operation during close event?\nIf user quits the app, how do we make sure file has been written?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/245823828",
    "html_url": "https://github.com/electron/electron/issues/526#issuecomment-245823828",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/526",
    "id": 245823828,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-09T05:37:07Z",
    "updated_at": "2016-09-09T05:37:07Z",
    "body": "@steverandy Doing synchronous `fs` operations in the close event will work.  Asynchronous operations are not guaranteed to be completed.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/245824406",
    "html_url": "https://github.com/electron/electron/issues/526#issuecomment-245824406",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/526",
    "id": 245824406,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-09-09T05:42:12Z",
    "updated_at": "2016-09-09T05:42:12Z",
    "body": "> safe to do fs operation during close event?\n\nSpeaking of saving data when the app is closed: I used `electron-config` instead of localStorage because localStorage only saves if the app exits \"cleanly\". So if you kill your process (say with `^C`) you're out of luck.\n\nSee https://github.com/electron/electron/issues/1731#issuecomment-221922779\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/247291739",
    "html_url": "https://github.com/electron/electron/issues/526#issuecomment-247291739",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/526",
    "id": 247291739,
    "user": {
      "login": "andymartinwork",
      "id": 1785253,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1785253?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andymartinwork",
      "html_url": "https://github.com/andymartinwork",
      "followers_url": "https://api.github.com/users/andymartinwork/followers",
      "following_url": "https://api.github.com/users/andymartinwork/following{/other_user}",
      "gists_url": "https://api.github.com/users/andymartinwork/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andymartinwork/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andymartinwork/subscriptions",
      "organizations_url": "https://api.github.com/users/andymartinwork/orgs",
      "repos_url": "https://api.github.com/users/andymartinwork/repos",
      "events_url": "https://api.github.com/users/andymartinwork/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andymartinwork/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-15T10:24:19Z",
    "updated_at": "2016-09-15T10:24:19Z",
    "body": "Just for future visitors to this bug\n\nThe code above does not take into account if the app is \n- saved on an external monitor\n- quit\n- external monitor disconnected\n- app opened again\n\nYou can quite often end up with the app being off the end of the screen (dependent on zoom factor). So something more complicated is necessary for a professional implementation.\n"
  }
]