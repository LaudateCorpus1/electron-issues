[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/243364062",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-243364062",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 243364062,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-30T08:05:50Z",
    "updated_at": "2016-08-30T08:05:50Z",
    "body": "Hi again\n\nI'm done making changes and adding tests, so this is ready for review.\n\nThis PR currently has some issues:\n- The C++ implementation of sandboxed renderer shares little code with the non-sandboxed renderer. As a consequence, sandboxed renderers have some missing functionality(setting background color doesn't work, for example). This can be fixed by extracting a base common class for `AtomRendererClient` and `AtomSandboxedRendererClient`.\n- The javascript code that supports sandboxed renderers(lib/sandboxed_renderer/init.js) only shares part of `ipcRenderer` with the non-sandboxed version(lib/renderer/init.js), but nothing stops more code to be shared by the two. For example, I believe it is possible to expose the most electron/node.js API to sandboxed renderers by augmenting the browser-renderer RPC module.\n- Right now, the code which determines which navigations will create a new `SiteInstance` is reimplementing some logic from content module. This is necessary because renderers spawned from sandboxed navigations should also be sandboxed, and I've found no way of associating newly spawned  renderers(`AppendExtraCommandLineSwitches`) with sandboxed parents other than reusing the pending process logic in `OverrideSiteIntanceForNavigation`. The ideal implementation would probably require patching libchromiumcontent to notify AtomBrowserClient whenever a new SiteInstance is created, and populating `pending_processes_` with the renderer id for the new instance.\n\nI want to fix all of these issues, but I prefer to do it in separate PRs as this one is very big already.\n\nAnother possible issue(depending on the POV) is that browserify is now a build dependency and is used to provide commonjs for preload scripts in sandboxed renderers. I've opted to use browserify because is a very mature browser commonjs implementation and also was the fastest path to get a working commonjs environment in sandboxed renders.\n\nAn alternative to using browserify would be to implement a commonjs environment that uses IPC to read files from disk using the main process, though I'd prefer to stick with browserify as it is cleaner than repeatedly loading a bunch of files via IPC.\n\nFinally think its worth mentioning that this PR adds a lot of code but the existing use cases of electron should not be affected by the changes made here. My goal is to allow electron to be used in more scenarios, such as implementing a web browser that shares some of chromium security features.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/244314775",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-244314775",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 244314775,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-02T08:27:41Z",
    "updated_at": "2016-09-02T08:27:41Z",
    "body": "Can you enable this for WebView tags (Guest Views) as well?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/244362354",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-244362354",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 244362354,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-02T12:33:40Z",
    "updated_at": "2016-09-02T12:33:40Z",
    "body": "> Can you enable this for WebView tags (Guest Views) as well?\n\nYes I want to do that, but I'm not sure the amount of work required, I'm still trying to figure out how the content module components connect to each other.\n\nIf this is a simple task and you can show me the sections of code that handle webview tags, I can do it here, but I'd rather implement in a future PR due to the size of this one.\n\nAbout this request: I assume you mean we should provide a way to allow a sandboxed `<webview>` tag to be created from a non-sandboxed electron window, or there would be a security hole if any page could create these tags.\n\nSince one of the reasons I'm adding the sandboxed option is to allow electron to be run with OS-level sandbox enabled, would it be possible to enable a webview tag only to the top-level sandboxed window, the one created from the main process?\n\nI ask this because it would be nice to implement a sandboxed web browser in electron using `<webview>` to display the web contents and javascript/html to implement the browser UI such as tabs and menus, but clearly this top-level sandboxed renderer would need to have some privileges not available to pages displayed by `<webview>`\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/244363197",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-244363197",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 244363197,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-02T12:37:31Z",
    "updated_at": "2016-09-02T12:37:31Z",
    "body": "@zcbenz It's not clear whats the rebase/merge policy I should follow: Do I keep this branch updated by rebasing or merging master branch?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/244850723",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-244850723",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 244850723,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-09-06T05:05:31Z",
    "updated_at": "2016-09-06T05:05:31Z",
    "body": "> @zcbenz It's not clear whats the rebase/merge policy I should follow: Do I keep this branch updated by rebasing or merging master branch?\n\nI'm good with either, we are currently doing a Chrome upgrade so you probably want to do it later when we merged the Chrome upgrade pull request.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/244851200",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-244851200",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 244851200,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-09-06T05:10:20Z",
    "updated_at": "2016-09-06T05:10:20Z",
    "body": "Also I think we need opinions from Brave browser team on this since they are already doing a similar thing in their fork, /cc @bridiver @bbondy @darkdh.\n\nAnd does anyone know whom from OpenFin to ping? I heard their are also doing a similar patch.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/248205414",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-248205414",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 248205414,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-09-20T05:30:32Z",
    "updated_at": "2016-09-20T05:30:32Z",
    "body": "@tarruda Do you mind rebasing the branch on master? Since no one is opposed against this I would like to get it merged.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/248242415",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-248242415",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 248242415,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-20T08:50:41Z",
    "updated_at": "2016-09-20T08:50:41Z",
    "body": "@zcbenz Ok but I still need to address some of your comments. I should be able to finish the requested fixes + rebase by tomorrow.\n\nAbout this concern:\n\n> Right now, the code which determines which navigations will create a new SiteInstance is reimplementing some logic from content module. This is necessary because renderers spawned from sandboxed navigations should also be sandboxed, and I've found no way of associating newly spawned renderers(AppendExtraCommandLineSwitches) with sandboxed parents other than reusing the pending process logic in OverrideSiteIntanceForNavigation. The ideal implementation would probably require patching libchromiumcontent to notify AtomBrowserClient whenever a new SiteInstance is created, and populating pending_processes_ with the renderer id for the new instance.\n\nNext week I might be able to start looking into the libchromiumcontent patch that enables fully reusing chromium cross site navigation logic, and will send another PR after it is ready.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/248667340",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-248667340",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 248667340,
    "user": {
      "login": "bridiver",
      "id": 34129,
      "avatar_url": "https://avatars0.githubusercontent.com/u/34129?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bridiver",
      "html_url": "https://github.com/bridiver",
      "followers_url": "https://api.github.com/users/bridiver/followers",
      "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
      "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
      "organizations_url": "https://api.github.com/users/bridiver/orgs",
      "repos_url": "https://api.github.com/users/bridiver/repos",
      "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bridiver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-21T16:30:21Z",
    "updated_at": "2016-09-21T16:30:21Z",
    "body": "might be better to split into 2 PRs to separate window.opener from sandbox. There are a lot of subtle issues with window.opener on different platforms and with different methods of opening and most of them are on windows. We've had opener support for a while and have tweaked it several times to deal with crashes resulting from different types of opener triggers. You've taken a different approach which will leave fixing most of those issues to the app, but I don't think it will be possible to handle them all unless you return `false` from `ShouldResumeRequestsForCreatedWindow` in `atom_api_web_contents.cc' and this ugly hack in`atom_api_web_frame.cc`\n\n```\nvoid WebFrame::AttachGuest(int id) {\n  // This is a workaround for a strange issue on windows with background tabs\n  // libchromiumcontent doesn't appear to be making the check for\n  // params.disposition == NEW_BACKGROUND_TAB in WebContentsImpl\n  // This results in the BrowserPluginGuest trying to access the native\n  // window before it's actually ready.\n  //\n  // It's also possible that the guest is being treated as\n  // visible because the \"embedder\", which is the same for all tabs\n  // in the window, is always visible.\n  //\n  // This hack works around the issue by always\n  // marking it as hidden while attaching\n  content::BrowserPluginManager::Get()->GetBrowserPlugin(id)->\n    updateVisibility(false);\n  content::RenderFrame::FromWebFrame(web_frame_)->AttachGuest(id);\n  content::BrowserPluginManager::Get()->GetBrowserPlugin(id)->\n    updateVisibility(true);\n}\n```\n\nThe second is specific to the use of guest webviews vs the main window, but the first one covers both. You will also find a memory leak with spellcheck provider that only appears when the renderer process persists across page loads and/or contains more than one webcontents. There are some other issues we have found as well, but those are the ones that come to mind.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/248670727",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-248670727",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 248670727,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-21T16:42:16Z",
    "updated_at": "2016-09-21T16:42:16Z",
    "body": "@bridiver is it possible that these issues you have experienced are caused by node.js running in the renderer? It would be great if you could provide a couple of test cases that reproduce these crashes\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/248703339",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-248703339",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 248703339,
    "user": {
      "login": "bridiver",
      "id": 34129,
      "avatar_url": "https://avatars0.githubusercontent.com/u/34129?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bridiver",
      "html_url": "https://github.com/bridiver",
      "followers_url": "https://api.github.com/users/bridiver/followers",
      "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
      "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
      "organizations_url": "https://api.github.com/users/bridiver/orgs",
      "repos_url": "https://api.github.com/users/bridiver/repos",
      "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bridiver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-21T18:38:29Z",
    "updated_at": "2016-09-21T18:38:29Z",
    "body": "@tarruda we disabled node on sandboxed renderer processes. I do really need to add a set of test cases to cover all the different ways that the opener can be used, I'll see if I can at least come up with a list of examples and go from there. You can take a look at our fork as well https://github.com/brave/electron I think we can both learn something from the two different implementations. Our opener support is actually limited to guest webviews because that was all we needed, but it could easily be extended to the main window.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/248704758",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-248704758",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 248704758,
    "user": {
      "login": "bridiver",
      "id": 34129,
      "avatar_url": "https://avatars0.githubusercontent.com/u/34129?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bridiver",
      "html_url": "https://github.com/bridiver",
      "followers_url": "https://api.github.com/users/bridiver/followers",
      "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
      "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
      "organizations_url": "https://api.github.com/users/bridiver/orgs",
      "repos_url": "https://api.github.com/users/bridiver/repos",
      "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bridiver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-21T18:43:42Z",
    "updated_at": "2016-09-21T18:43:42Z",
    "body": "I'm trying to remember the exact problem with the spell check client, but I think the issue was that the webFrame never got destroyed and so the spellcheck client also never got destroyed. I never came up with a good fix in `atom_api_web_frame` and we handled the problem by moving spellcheck to `web_frame_bindings` which uses extensions, but obviously that's not available to you here\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/248705198",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-248705198",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 248705198,
    "user": {
      "login": "bridiver",
      "id": 34129,
      "avatar_url": "https://avatars0.githubusercontent.com/u/34129?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bridiver",
      "html_url": "https://github.com/bridiver",
      "followers_url": "https://api.github.com/users/bridiver/followers",
      "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
      "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
      "organizations_url": "https://api.github.com/users/bridiver/orgs",
      "repos_url": "https://api.github.com/users/bridiver/repos",
      "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bridiver/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-21T18:45:26Z",
    "updated_at": "2016-09-21T18:45:26Z",
    "body": "I shouldn't say that `webFrame` never got destroyed. It (they in this case) did get properly destroyed when the renderer process shut down, but within the life of a renderer process a new one was created for each navigation without destroying the previous one.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249567068",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-249567068",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 249567068,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-26T13:19:38Z",
    "updated_at": "2016-09-26T13:19:38Z",
    "body": "@zcbenz The branch is rebased but I still need to squash the fixup commits, which I will do after you approve the PR. I've updated #6712 to keep track of the remaining tasks the will be done in future PRs.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249599717",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-249599717",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 249599717,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-26T15:13:27Z",
    "updated_at": "2016-09-26T15:15:03Z",
    "body": "@bridiver I have looked into brave/electron master branch, but the diff from upstream electron is quite big, so I can only comment on some parts which relate to what I've changed in this PR.\n\nI've noticed that you subclassed `AtomBrowserClient` to provide a custom implementation to `CanCreateWindow`, which is the main gateway to native window.open API. I couldn't use the same approach here because electron must still support its custom `window.open` implementation which returns the `BrowserWindowProxy`(In other words, it must support both sandboxed and non-sandboxed renderers in the same browser)\n\nThe best solution I found was use the `sandbox` option as a flag to determine when `CanCreateWindow` should fork into native `window.open` behavior. This introduced the problem of determining when the `CanCreateWindow` call comes from a renderer which has `sandbox` enabled, which is why I used a set containing all ids of sandboxed renderers.\n\nAnother problem is that the content API doesn't seem to provide a way to map `AppendExtraCommandLineParameters` calls with the renderer which originated the navigation, so I also had to duplicate some chromium logic for determining cross-site navigations in `ShouldCreateNewSiteInstance`.\n\nIt should be noted that in the current state, sandboxed windows are very limited because I've created a new subclass from `ContentRendererClient`, but I plan to fix this in another PR.\n\nI also looked into CEF code and noticed that it doesn't override `ShouldResumeRequestsForCreatedWindow`, even though it has native `window.open` fully working in all platforms, but maybe this is because CEF takes a different approach to creating native windows.\n\nIf I override `ShouldResumeRequestsForCreatedWindow`, how do I unblock the renderer after the window is created? Can you point me to which parts of the brave code I can extract information regarding this issue?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249690757",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-249690757",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 249690757,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-26T20:40:25Z",
    "updated_at": "2016-09-26T20:40:25Z",
    "body": "Regarding @paulcbetts request for `<webview>` tag, the following patch enables the sandbox option:\n\n``` diff\ndiff --git a/lib/browser/guest-view-manager.js b/lib/browser/guest-view-manager.js\nindex df2589a..267fdeb 100644\n--- a/lib/browser/guest-view-manager.js\n+++ b/lib/browser/guest-view-manager.js\n@@ -177,6 +177,7 @@ const attachGuest = function (embedder, elementInstanceId, guestInstanceId, para\n   webPreferences = {\n     guestInstanceId: guestInstanceId,\n     nodeIntegration: (ref1 = params.nodeintegration) != null ? ref1 : false,\n+    sandbox: !!params.sandbox,\n     plugins: params.plugins,\n     zoomFactor: params.zoomFactor,\n     webSecurity: !params.disablewebsecurity,\ndiff --git a/lib/renderer/web-view/web-view-attributes.js b/lib/renderer/web-view/web-view-attributes.js\nindex 3bbc833..3234135 100644\n--- a/lib/renderer/web-view/web-view-attributes.js\n+++ b/lib/renderer/web-view/web-view-attributes.js\n@@ -321,6 +321,7 @@ WebViewImpl.prototype.setupWebViewAttributes = function () {\n   this.attributes[webViewConstants.ATTRIBUTE_HTTPREFERRER] = new HttpReferrerAttribute(this)\n   this.attributes[webViewConstants.ATTRIBUTE_USERAGENT] = new UserAgentAttribute(this)\n   this.attributes[webViewConstants.ATTRIBUTE_NODEINTEGRATION] = new BooleanAttribute(webViewConstants.ATTRIBUTE_NODEINTEGRATION, this)\n+  this.attributes[webViewConstants.ATTRIBUTE_SANDBOX] = new BooleanAttribute(webViewConstants.ATTRIBUTE_SANDBOX, this)\n   this.attributes[webViewConstants.ATTRIBUTE_PLUGINS] = new BooleanAttribute(webViewConstants.ATTRIBUTE_PLUGINS, this)\n   this.attributes[webViewConstants.ATTRIBUTE_DISABLEWEBSECURITY] = new BooleanAttribute(webViewConstants.ATTRIBUTE_DISABLEWEBSECURITY, this)\n   this.attributes[webViewConstants.ATTRIBUTE_ALLOWPOPUPS] = new BooleanAttribute(webViewConstants.ATTRIBUTE_ALLOWPOPUPS, this)\ndiff --git a/lib/renderer/web-view/web-view-constants.js b/lib/renderer/web-view/web-view-constants.js\nindex 5aed6d5..31b0112 100644\n--- a/lib/renderer/web-view/web-view-constants.js\n+++ b/lib/renderer/web-view/web-view-constants.js\n@@ -10,6 +10,7 @@ module.exports = {\n   ATTRIBUTE_SRC: 'src',\n   ATTRIBUTE_HTTPREFERRER: 'httpreferrer',\n   ATTRIBUTE_NODEINTEGRATION: 'nodeintegration',\n+  ATTRIBUTE_SANDBOX: 'sandbox',\n   ATTRIBUTE_PLUGINS: 'plugins',\n   ATTRIBUTE_DISABLEWEBSECURITY: 'disablewebsecurity',\n   ATTRIBUTE_ALLOWPOPUPS: 'allowpopups',\n```\n\nWhich works but causes a crash when javascript running in the `<webview>` invokes `window.open`. The crash happens inside libcontent(`content::WebContentsImpl::CreateNewWindow`). I wasn't able to determine the cause of crash because there are no debug symbols in the prebuilt libcontent, so I will leave `<webview>` out for now.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249692609",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-249692609",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 249692609,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-26T20:47:08Z",
    "updated_at": "2016-09-26T20:47:08Z",
    "body": "Squashed commits and rebased on master.  The original unsquashed branch was copied https://github.com/tarruda/electron/tree/support-chromium-sandbox-save2.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/249844940",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-249844940",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 249844940,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-09-27T12:01:38Z",
    "updated_at": "2016-09-27T12:01:38Z",
    "body": "👍 \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/250763110",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-250763110",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 250763110,
    "user": {
      "login": "YurySolovyov",
      "id": 2168518,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2168518?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YurySolovyov",
      "html_url": "https://github.com/YurySolovyov",
      "followers_url": "https://api.github.com/users/YurySolovyov/followers",
      "following_url": "https://api.github.com/users/YurySolovyov/following{/other_user}",
      "gists_url": "https://api.github.com/users/YurySolovyov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YurySolovyov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YurySolovyov/subscriptions",
      "organizations_url": "https://api.github.com/users/YurySolovyov/orgs",
      "repos_url": "https://api.github.com/users/YurySolovyov/repos",
      "events_url": "https://api.github.com/users/YurySolovyov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YurySolovyov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-30T14:45:04Z",
    "updated_at": "2016-09-30T14:45:04Z",
    "body": "@tarruda this seems interesting, are you going to add some docs to explain the option and what it gived to developers. There are some information in this thread, but it is not easy to find.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255220996",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255220996",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255220996,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T20:37:19Z",
    "updated_at": "2016-10-20T20:37:19Z",
    "body": "Hi @tarruda,\n\nUnderstood ipcRenderer is exposed in the sandboxed renderer.  Is there a plan to extend the list of exposed modules? for example websocket ?\n\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255227598",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255227598",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255227598,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T21:03:40Z",
    "updated_at": "2016-10-20T21:03:40Z",
    "body": "> @tarruda this seems interesting, are you going to add some docs to explain the option and what it gived to developers. There are some information in this thread, but it is not easy to find.\n\nI will add documentation later\n\n> Understood ipcRenderer is exposed in the sandboxed renderer. Is there a plan to extend the list of exposed modules? for example websocket ?\n\nIt is possible that we'll eventually expose every module available to non-sandboxed renderers, but you can already achieve anything with `ipcRenderer` alone. From a security POV, it is better that only ipcRenderer is exposed.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255231017",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255231017",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255231017,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T21:17:22Z",
    "updated_at": "2016-10-20T21:17:22Z",
    "body": "@tarruda I agree for the security constraints and this the reason I'm interested in your contribution. However I also need to establish a communication with a standalone node.js process (non electron process). Websocket seems an easy option for a electron renderer to communicate with the node.js process. Is it possible to require the websocket module in the preload in js or this can only be achievable by modifying electron code ? Thanks\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255441934",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255441934",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255441934,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T18:59:00Z",
    "updated_at": "2016-10-21T18:59:00Z",
    "body": "I think the list of modules to expose  should be passed with a new parameter such as sandboxAllowedModules.  The default electron behavior will not be impacted and the change will give an opportunity for those who needs to support some more modules. Not sure if there is way to raise a change request  here or if I need to create a PR. Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255523458",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255523458",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255523458,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-22T11:38:48Z",
    "updated_at": "2016-10-22T11:38:48Z",
    "body": "> However I also need to establish a communication with a standalone node.js process (non electron process). Websocket seems an easy option for a electron renderer to communicate with the node.js process. Is it possible to require the websocket module in the preload in js or this can only be achievable by modifying electron code ? Thanks\n\nI'm not an expert in the chrome sandbox architecture, but if I understood it correctly, the renderer is only allowed to communicate with the browser process, so even if we allow arbitrary node/electron modules to be required from the renderer, the entire API would be proxied using IPC(it would simply be hidden from you). Even network access is done via the browser process, so the renderer is never opening any network connections directly.\n\nIf you simply want to  use `WebSocket` web api, then it should already be available to sandboxed renderers, there's no need to modify anything.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255523566",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255523566",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255523566,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-22T11:41:02Z",
    "updated_at": "2016-10-22T11:41:02Z",
    "body": "> Not sure if there is way to raise a change request here or if I need to create a PR. Thanks.\n\nNo need to create an issue a, simply use #6712  to track progress. I plan to implement it as soon as I get a free weekend, work/family have been demanding a lot lately :)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255529049",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255529049",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255529049,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-22T13:40:28Z",
    "updated_at": "2016-10-27T16:13:36Z",
    "body": "That's fine, many thanks.\nExposing ipcRenderer by default in sandboxed mode will still be unsafe as security hole in the main process can be exploited to harm the user machine.\nSo,I think ipcRenderer should be disabled by default and it will be the responsibility of the  developer to select it in the allowed modules if he wills. Another option is to expose a new  safeIpcRender module that will only process user defined messages.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255724677",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-255724677",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 255724677,
    "user": {
      "login": "GregoryGatellier",
      "id": 20106544,
      "avatar_url": "https://avatars0.githubusercontent.com/u/20106544?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregoryGatellier",
      "html_url": "https://github.com/GregoryGatellier",
      "followers_url": "https://api.github.com/users/GregoryGatellier/followers",
      "following_url": "https://api.github.com/users/GregoryGatellier/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregoryGatellier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregoryGatellier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregoryGatellier/subscriptions",
      "organizations_url": "https://api.github.com/users/GregoryGatellier/orgs",
      "repos_url": "https://api.github.com/users/GregoryGatellier/repos",
      "events_url": "https://api.github.com/users/GregoryGatellier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregoryGatellier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T12:19:28Z",
    "updated_at": "2016-10-24T12:19:28Z",
    "body": "@tarruda I would like your opinion about having a default preload used when we are in sandbox mode (and in that case no need to have preload attribute in webpreferences). \nWe are very interested by using the sandbox but having a preload script for each application is not so easy to maintain (depending if the application need specific code in the preload) \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/257792565",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-257792565",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 257792565,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-02T07:35:20Z",
    "updated_at": "2016-11-02T07:35:20Z",
    "body": "> @tarruda I would like your opinion about having a default preload used when we are in sandbox mode (and in that case no need to have preload attribute in webpreferences). \n> We are very interested by using the sandbox but having a preload script for each application is not so easy to maintain (depending if the application need specific code in the preload)\n\nNot sure if I understand what you mean by \"default preload\". Can you give an example?\n\nIf you want to have a single preload API that exports all electron/node.js APIs to the renderer, then the sandbox won't help much(assuming you are using it for security purposes).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258130413",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258130413",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258130413,
    "user": {
      "login": "GregoryGatellier",
      "id": 20106544,
      "avatar_url": "https://avatars0.githubusercontent.com/u/20106544?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregoryGatellier",
      "html_url": "https://github.com/GregoryGatellier",
      "followers_url": "https://api.github.com/users/GregoryGatellier/followers",
      "following_url": "https://api.github.com/users/GregoryGatellier/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregoryGatellier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregoryGatellier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregoryGatellier/subscriptions",
      "organizations_url": "https://api.github.com/users/GregoryGatellier/orgs",
      "repos_url": "https://api.github.com/users/GregoryGatellier/repos",
      "events_url": "https://api.github.com/users/GregoryGatellier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregoryGatellier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T12:35:11Z",
    "updated_at": "2016-11-03T12:35:11Z",
    "body": "Today with your solution all the developers who want to use sandbox have to manage on their side a preload for initiliazing some code (if they want to use it) for each application and depending if they want to activate or not the sandbox.\nMy main concern is for having window.open works in sandbox mode, we need some specific code in the preload and it's not very helpful to adding manually the code every time we need to use sandbox (it should be automatic).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258141478",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258141478",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258141478,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T13:27:19Z",
    "updated_at": "2016-11-03T13:27:19Z",
    "body": "There's no need to have a preload, you can simply use `new BrowserWindow({webPreferences: {sandbox: true}})` and it will create a sandboxed window. This should work for loading most web applications and offer the same security as chrome. `window.open` will also work without a preload.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258145628",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258145628",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258145628,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T13:44:15Z",
    "updated_at": "2016-11-03T13:44:15Z",
    "body": "@tarruda,\n\nI think security whole in the master process can be exploited via IpcRenderer. If I need a pre-load file to expose ipcRenderer this is fine, I will just avoid to expose it. But if it is automatically exposed what is the best way to disable it before starting the renderer process ?\nThanks.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258149336",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258149336",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258149336,
    "user": {
      "login": "GregoryGatellier",
      "id": 20106544,
      "avatar_url": "https://avatars0.githubusercontent.com/u/20106544?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregoryGatellier",
      "html_url": "https://github.com/GregoryGatellier",
      "followers_url": "https://api.github.com/users/GregoryGatellier/followers",
      "following_url": "https://api.github.com/users/GregoryGatellier/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregoryGatellier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregoryGatellier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregoryGatellier/subscriptions",
      "organizations_url": "https://api.github.com/users/GregoryGatellier/orgs",
      "repos_url": "https://api.github.com/users/GregoryGatellier/repos",
      "events_url": "https://api.github.com/users/GregoryGatellier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregoryGatellier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T13:57:50Z",
    "updated_at": "2016-11-03T14:00:09Z",
    "body": "Yes but for having window.open works correctly in sandbox mode I need to have some code to be loaded. That's why I ask the question (if some was interesting to have a fix for window.open).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258153993",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258153993",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258153993,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T14:14:55Z",
    "updated_at": "2016-11-03T14:14:55Z",
    "body": "> But if it is automatically exposed what is the best way to disable it before starting the renderer process ?\n\nIt is not automatically exposed. Since one of the main use cases of sandbox mode is enabling chromium sandbox for security, you have to explicitly create any extra APIs that use `ipcRenderer` to communicate with the main process.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258156149",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258156149",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258156149,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T14:22:43Z",
    "updated_at": "2016-11-03T14:22:43Z",
    "body": "I already got that. I need that  ipcRenderer not even be available in the Renderer process.\nHow to achieve that ?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258158203",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258158203",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258158203,
    "user": {
      "login": "GregoryGatellier",
      "id": 20106544,
      "avatar_url": "https://avatars0.githubusercontent.com/u/20106544?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GregoryGatellier",
      "html_url": "https://github.com/GregoryGatellier",
      "followers_url": "https://api.github.com/users/GregoryGatellier/followers",
      "following_url": "https://api.github.com/users/GregoryGatellier/following{/other_user}",
      "gists_url": "https://api.github.com/users/GregoryGatellier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GregoryGatellier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GregoryGatellier/subscriptions",
      "organizations_url": "https://api.github.com/users/GregoryGatellier/orgs",
      "repos_url": "https://api.github.com/users/GregoryGatellier/repos",
      "events_url": "https://api.github.com/users/GregoryGatellier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GregoryGatellier/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T14:29:51Z",
    "updated_at": "2016-11-03T14:29:51Z",
    "body": "In order to give more details: 'default preload' means for me specific code in init.js for renderer sandboxed\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258158487",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258158487",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258158487,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T14:30:50Z",
    "updated_at": "2016-11-03T14:36:01Z",
    "body": "> I already got that. I need that ipcRenderer not even be available in the Renderer process.\n> How to achieve that ?\n\n`ipcRenderer` is only available if your preload script exposes it as a global variable. The preload script is executed in the scope of an anonymous function before any javascript from the web page is loaded. The only way ipcRenderer is available to javascript loaded by web page is if you do something like this:\n\n``` js\n// preload.js\nwindow.ipcRenderer = require('electron').ipcRenderer\n// ipcRenderer is a global variable visible to untrusted javascript.\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258160084",
    "html_url": "https://github.com/electron/electron/pull/6919#issuecomment-258160084",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/6919",
    "id": 258160084,
    "user": {
      "login": "ahmedmohamedali",
      "id": 19594093,
      "avatar_url": "https://avatars0.githubusercontent.com/u/19594093?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ahmedmohamedali",
      "html_url": "https://github.com/ahmedmohamedali",
      "followers_url": "https://api.github.com/users/ahmedmohamedali/followers",
      "following_url": "https://api.github.com/users/ahmedmohamedali/following{/other_user}",
      "gists_url": "https://api.github.com/users/ahmedmohamedali/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ahmedmohamedali/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ahmedmohamedali/subscriptions",
      "organizations_url": "https://api.github.com/users/ahmedmohamedali/orgs",
      "repos_url": "https://api.github.com/users/ahmedmohamedali/repos",
      "events_url": "https://api.github.com/users/ahmedmohamedali/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ahmedmohamedali/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-03T14:36:24Z",
    "updated_at": "2016-11-03T14:36:24Z",
    "body": "Great. This is what I wanted to confirm with you.\nThank you.\n"
  }
]