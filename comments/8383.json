[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/271935659",
    "html_url": "https://github.com/electron/electron/issues/8383#issuecomment-271935659",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8383",
    "id": 271935659,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-01-11T17:33:59Z",
    "updated_at": "2017-01-11T17:33:59Z",
    "body": "From https://github.com/electron/electron/issues/7780:\r\n\r\n> the opener is null because a window created with `new BrowserWindow` is a top-level window created by the main process. `window.opener` should only be set in a child window that you create with `window.open`. \r\n\r\nHow are you creating the window? Please share some example code that reproduces the issue.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/272048165",
    "html_url": "https://github.com/electron/electron/issues/8383#issuecomment-272048165",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8383",
    "id": 272048165,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-01-12T01:19:36Z",
    "updated_at": "2017-01-12T01:19:36Z",
    "body": "`window.opener.document` is not supported in Electron, you can use the `ipcRenderer` and `ipcMain` modules to communicate between windows/processes.\r\n\r\nhttp://electron.atom.io/docs/api/ipc-renderer/\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/272772702",
    "html_url": "https://github.com/electron/electron/issues/8383#issuecomment-272772702",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8383",
    "id": 272772702,
    "user": {
      "login": "haribabu500",
      "id": 6425207,
      "avatar_url": "https://avatars2.githubusercontent.com/u/6425207?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/haribabu500",
      "html_url": "https://github.com/haribabu500",
      "followers_url": "https://api.github.com/users/haribabu500/followers",
      "following_url": "https://api.github.com/users/haribabu500/following{/other_user}",
      "gists_url": "https://api.github.com/users/haribabu500/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/haribabu500/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/haribabu500/subscriptions",
      "organizations_url": "https://api.github.com/users/haribabu500/orgs",
      "repos_url": "https://api.github.com/users/haribabu500/repos",
      "events_url": "https://api.github.com/users/haribabu500/events{/privacy}",
      "received_events_url": "https://api.github.com/users/haribabu500/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-16T04:40:48Z",
    "updated_at": "2017-01-16T04:40:48Z",
    "body": "`console.log(require.resolve('electron'))\r\n\r\nconst electron = require('electron')\r\n// Module to control application life.\r\nconst app = electron.app\r\n// Module to create native browser window.\r\nconst BrowserWindow = electron.BrowserWindow\r\n\r\nconst path = require('path')\r\nconst url = require('url')\r\n\r\n// Keep a global reference of the window object, if you don't, the window will\r\n// be closed automatically when the JavaScript object is garbage collected.\r\nlet mainWindow\r\n\r\nfunction createWindow () {\r\n  // Create the browser window.\r\n  mainWindow = new BrowserWindow({width: 800, height: 600})\r\n\r\n  // and load the index.html of the app.\r\n  mainWindow.loadURL(url.format({\r\n    pathname: path.join(__dirname, 'index.html'),\r\n    protocol: 'file:',\r\n    slashes: true\r\n  }))\r\n\r\n  // Open the DevTools.\r\n  mainWindow.webContents.openDevTools()\r\n\r\n  // Emitted when the window is closed.\r\n  mainWindow.on('closed', function () {\r\n    // Dereference the window object, usually you would store windows\r\n    // in an array if your app supports multi windows, this is the time\r\n    // when you should delete the corresponding element.\r\n    mainWindow = null\r\n  })\r\n          //============================= nfc begin============================  \r\n          // 'use strict';\r\n\r\n          var _nfcPcsc = require('nfc-pcsc');\r\n\r\n          var _nfcPcsc2 = _interopRequireDefault(_nfcPcsc);\r\n\r\n          function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n          var nfc = new _nfcPcsc2.default();\r\n\r\n          // var mod=require('nfc-pcsc');\r\n          // var nfc=new mod.NFC();\r\n           \r\n          nfc.on('reader', reader => {\r\n           \r\n              // console.log(`${reader.reader.name}  device attached`);\r\n           \r\n              // needed for reading tags emulated with Android HCE \r\n              // custom AID, change according to your Android for tag emulation \r\n              // see https://developer.android.com/guide/topics/connectivity/nfc/hce.html \r\n              reader.aid = 'F222222222';\r\n           \r\n              reader.on('card', card => {\r\n                  console.log(\"==================================================\");\r\n                  var cardid=card.uid;\r\n                  console.log(cardid);\r\n                  \r\n                  mainWindow.loadURL('http://localhost/AA-EMR/interface/main/card_dashboard.php?card_id='+cardid);\r\n           \r\n              });\r\n           \r\n              reader.on('error', err => {\r\n                  console.log(`${reader.reader.name}  an error occurred`, err);\r\n              });\r\n           \r\n              reader.on('end', () => {\r\n                  console.log(`${reader.reader.name}  device removed`);\r\n              });\r\n           \r\n          });\r\n           \r\n          nfc.on('error', err => {\r\n              console.log('an error occurred', err);\r\n          });  \r\n          //============================= nfc end============================\r\n  }\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.on('ready', createWindow)\r\n\r\n// Quit when all windows are closed.\r\napp.on('window-all-closed', function () {\r\n  // On OS X it is common for applications and their menu bar\r\n  // to stay active until the user quits explicitly with Cmd + Q\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n})\r\n\r\napp.on('activate', function () {\r\n  // On OS X it's common to re-create a window in the app when the\r\n  // dock icon is clicked and there are no other windows open.\r\n  if (mainWindow === null) {\r\n    createWindow()\r\n  }\r\n})\r\n\r\n// In this file you can include the rest of your app's specific main process`\r\n\r\nAnd I included my project in index page by\r\n`<script type=\"text/javascript\">\r\n    \r\n    location.href=\"<<My project URl>>\";\r\n    </script>`"
  }
]