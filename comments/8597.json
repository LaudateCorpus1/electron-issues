[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/277945859",
    "html_url": "https://github.com/electron/electron/issues/8597#issuecomment-277945859",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8597",
    "id": 277945859,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-07T09:31:23Z",
    "updated_at": "2017-02-07T09:31:36Z",
    "body": "@pronebird Is `componentWillUnmount` actually being called on unload/reload?  I seem to remember having issues with this before in actual browsers as well where it is actually a race condition as to whether componentWillUnmount is actually fired?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/278811310",
    "html_url": "https://github.com/electron/electron/issues/8597#issuecomment-278811310",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8597",
    "id": 278811310,
    "user": {
      "login": "groundwater",
      "id": 538488,
      "avatar_url": "https://avatars3.githubusercontent.com/u/538488?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/groundwater",
      "html_url": "https://github.com/groundwater",
      "followers_url": "https://api.github.com/users/groundwater/followers",
      "following_url": "https://api.github.com/users/groundwater/following{/other_user}",
      "gists_url": "https://api.github.com/users/groundwater/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/groundwater/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/groundwater/subscriptions",
      "organizations_url": "https://api.github.com/users/groundwater/orgs",
      "repos_url": "https://api.github.com/users/groundwater/repos",
      "events_url": "https://api.github.com/users/groundwater/events{/privacy}",
      "received_events_url": "https://api.github.com/users/groundwater/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-02-09T23:37:22Z",
    "updated_at": "2017-02-09T23:37:22Z",
    "body": "Hey all! I am assuming `componentWillUnmount` is part of a React app? Is there a repro case for this that doesn't involve react, or is the problem that React and electron just won't play well together?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/278994558",
    "html_url": "https://github.com/electron/electron/issues/8597#issuecomment-278994558",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8597",
    "id": 278994558,
    "user": {
      "login": "pronebird",
      "id": 704044,
      "avatar_url": "https://avatars1.githubusercontent.com/u/704044?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pronebird",
      "html_url": "https://github.com/pronebird",
      "followers_url": "https://api.github.com/users/pronebird/followers",
      "following_url": "https://api.github.com/users/pronebird/following{/other_user}",
      "gists_url": "https://api.github.com/users/pronebird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pronebird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pronebird/subscriptions",
      "organizations_url": "https://api.github.com/users/pronebird/orgs",
      "repos_url": "https://api.github.com/users/pronebird/repos",
      "events_url": "https://api.github.com/users/pronebird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pronebird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-10T16:41:55Z",
    "updated_at": "2017-02-10T16:48:11Z",
    "body": "@groundwater It's React yes. You can easily reproduce this by creating Tray menu from renderer process. Since entire web view is being trashed on page reload (cmd + r?), the reference to tray menu is being lost too. Then after page is reloaded, the same script kicks in and creates new tray menu. Now we have two of them. \r\n\r\nThere is probably a way to create tray menu in backend process which is never reloaded and somehow share the reference with renderer. Or maybe we could persist the handle for menu item so we could always reconnect with it in case of reload.\r\n\r\nI experience this issue during development only because of live reload. But then over time, detached tray menus are being released and removed from menubar automatically. So it leaves me wonder how that works."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/279113306",
    "html_url": "https://github.com/electron/electron/issues/8597#issuecomment-279113306",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8597",
    "id": 279113306,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-11T02:13:33Z",
    "updated_at": "2017-02-11T02:13:33Z",
    "body": ">  But then over time, detached tray menus are being released and removed from menubar automatically. So it leaves me wonder how that works.\r\n\r\nI believe that is just periodic GC you are seeing there\r\n\r\nI think one thing I want to convey to people is just because the `remote` module is there, it's isn't a lifeline to be used for everything ðŸ˜†.  I think your best bet with this is either.\r\n\r\n* Don't rely on `componentWillUnmount`, manually attach a `beforeunload` listener is `componentDidMount` and use that to destroy your tray icon.\r\n* Don't create the tray icon through the `remote` module in a renderer process, instead create it in the main process by listening to IPC events you can fire from the renderer process."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/281740790",
    "html_url": "https://github.com/electron/electron/issues/8597#issuecomment-281740790",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8597",
    "id": 281740790,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-02-22T17:29:44Z",
    "updated_at": "2017-02-22T17:29:44Z",
    "body": "Any luck getting it working, @pronebird?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/281745383",
    "html_url": "https://github.com/electron/electron/issues/8597#issuecomment-281745383",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8597",
    "id": 281745383,
    "user": {
      "login": "pronebird",
      "id": 704044,
      "avatar_url": "https://avatars1.githubusercontent.com/u/704044?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pronebird",
      "html_url": "https://github.com/pronebird",
      "followers_url": "https://api.github.com/users/pronebird/followers",
      "following_url": "https://api.github.com/users/pronebird/following{/other_user}",
      "gists_url": "https://api.github.com/users/pronebird/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pronebird/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pronebird/subscriptions",
      "organizations_url": "https://api.github.com/users/pronebird/orgs",
      "repos_url": "https://api.github.com/users/pronebird/repos",
      "events_url": "https://api.github.com/users/pronebird/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pronebird/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-22T17:45:19Z",
    "updated_at": "2017-02-22T17:46:31Z",
    "body": "@zeke I moved tray creation in main process. I haven't tried passing it to renderer via IPC since I changed my mind about having popup menu in tray.\r\n\r\nSomething like that should work:\r\n\r\n```js\r\n// main\r\nconst tray = new Tray(__dirname + '/trayicon.png');\r\nipcMain.on('give me tray', (e) => e.returnValue = tray);\r\n\r\n// renderer\r\nconst tray = ipcRenderer.sendSync('give me tray');\r\n// do something with tray...\r\n```\r\n\r\nClosing this since there is not much can be done about when and how GC collects garbage."
  }
]