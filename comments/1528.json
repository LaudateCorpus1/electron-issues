[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/97590309",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-97590309",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 97590309,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-29T21:24:12Z",
    "updated_at": "2015-04-29T21:24:12Z",
    "body": "You don't need a native node module on Windows or OS X to do this, you can actually use `node-ffi` - we've done the Windows one, I'll leave the OS X one as an exercise to the reader :)\n\n``` js\n'use babel';\n\nlet ref = require('ref');\nlet refStruct = require('ref-struct');\nlet refArray = require('ref-array');\nlet ffi = require('ffi-atom-shell');\n\nvar intPtr = null;\nvar boolPtr = null;\nvar LASTINPUTINFO = null;\nvar OSVERSIONINFO = null;\nvar pOSVERSIONINFO = null;\nvar pLASTINPUTINFO = null;\nvar shell32 = null;\nvar user32 = null;\nvar kernel32 = null;\nvar dwmApi = null;\n\nlet setupWindowsLibs = function() {\n  intPtr = intPtr || ref.refType(ref.types.int32);\n  boolPtr = boolPtr || ref.refType(ref.types.bool);\n\n  LASTINPUTINFO = LASTINPUTINFO || refStruct({\n    cbSize: ref.types.int32,\n    dwTime: ref.types.uint32,\n  });\n\n  pLASTINPUTINFO = pLASTINPUTINFO || ref.refType(LASTINPUTINFO);\n\n  user32 = user32 || ffi.Library('user32', {\n    'GetLastInputInfo': [ 'int', [ pLASTINPUTINFO ] ]\n  });\n};\n\nexports = {\n  'win32': {\n    getIdleTimeInMs: () => {\n      setupWindowsLibs();\n\n      let result = new LASTINPUTINFO();\n      result.cbSize = LASTINPUTINFO.size;\n\n      let failed = (user32.GetLastInputInfo(result.ref()) === 0);\n\n      if (failed) {\n        throw new Error(\"Couldn't get idle time\");\n      }\n\n      let ret = kernel32.GetTickCount() - result.dwTime;\n      return ret;\n    },\n  },\n\n  'darwin': {\n\n    getIdleTimeInMs: () => {\n      // TODO: Replace with a call to CGEventSourceCounterForEventType\n      return 100000000;\n    },\n\n  },\n\n  'linux': {\n    getIdleTimeInMs: () => {\n      return 100000000;\n    },\n};\n\nmodule.exports = exports[process.platform];\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/98038928",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-98038928",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 98038928,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-05-01T04:02:41Z",
    "updated_at": "2015-05-01T04:02:41Z",
    "body": "For building a native module that doesn't exist, you can seek help from io.js's docs and community:\nhttps://iojs.org/api/addons.html\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/130601953",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-130601953",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 130601953,
    "user": {
      "login": "iamdriz",
      "id": 801252,
      "avatar_url": "https://avatars0.githubusercontent.com/u/801252?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamdriz",
      "html_url": "https://github.com/iamdriz",
      "followers_url": "https://api.github.com/users/iamdriz/followers",
      "following_url": "https://api.github.com/users/iamdriz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamdriz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamdriz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamdriz/subscriptions",
      "organizations_url": "https://api.github.com/users/iamdriz/orgs",
      "repos_url": "https://api.github.com/users/iamdriz/repos",
      "events_url": "https://api.github.com/users/iamdriz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamdriz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-13T10:08:36Z",
    "updated_at": "2015-08-13T10:08:36Z",
    "body": "@paulcbetts How do you use what you have posted in Electron if you don't need a Node module?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/130964895",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-130964895",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 130964895,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-14T04:48:07Z",
    "updated_at": "2015-08-14T04:48:07Z",
    "body": "> How do you use what you have posted in Electron if you don't need a Node module?\n\nI phrased this badly - I mean, you don't need to _write a custom_ native Node module. You just use `node-ffi`\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/131030981",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-131030981",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 131030981,
    "user": {
      "login": "iamdriz",
      "id": 801252,
      "avatar_url": "https://avatars0.githubusercontent.com/u/801252?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/iamdriz",
      "html_url": "https://github.com/iamdriz",
      "followers_url": "https://api.github.com/users/iamdriz/followers",
      "following_url": "https://api.github.com/users/iamdriz/following{/other_user}",
      "gists_url": "https://api.github.com/users/iamdriz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/iamdriz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/iamdriz/subscriptions",
      "organizations_url": "https://api.github.com/users/iamdriz/orgs",
      "repos_url": "https://api.github.com/users/iamdriz/repos",
      "events_url": "https://api.github.com/users/iamdriz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/iamdriz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-14T08:57:58Z",
    "updated_at": "2015-08-14T08:57:58Z",
    "body": "@paulcbetts I'm still not following what you mean mate. Could you show an example of how you could use what you posted inside an electron app? That'd be awesome, thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/180005231",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-180005231",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 180005231,
    "user": {
      "login": "chandrachivukula",
      "id": 12478356,
      "avatar_url": "https://avatars1.githubusercontent.com/u/12478356?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/chandrachivukula",
      "html_url": "https://github.com/chandrachivukula",
      "followers_url": "https://api.github.com/users/chandrachivukula/followers",
      "following_url": "https://api.github.com/users/chandrachivukula/following{/other_user}",
      "gists_url": "https://api.github.com/users/chandrachivukula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/chandrachivukula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/chandrachivukula/subscriptions",
      "organizations_url": "https://api.github.com/users/chandrachivukula/orgs",
      "repos_url": "https://api.github.com/users/chandrachivukula/repos",
      "events_url": "https://api.github.com/users/chandrachivukula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/chandrachivukula/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-02-04T19:08:48Z",
    "updated_at": "2016-02-04T19:08:48Z",
    "body": "@iamdriz did you get an example code that could be tested inside an electron app?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195426052",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-195426052",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 195426052,
    "user": {
      "login": "nickaversano",
      "id": 5448363,
      "avatar_url": "https://avatars1.githubusercontent.com/u/5448363?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nickaversano",
      "html_url": "https://github.com/nickaversano",
      "followers_url": "https://api.github.com/users/nickaversano/followers",
      "following_url": "https://api.github.com/users/nickaversano/following{/other_user}",
      "gists_url": "https://api.github.com/users/nickaversano/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nickaversano/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nickaversano/subscriptions",
      "organizations_url": "https://api.github.com/users/nickaversano/orgs",
      "repos_url": "https://api.github.com/users/nickaversano/repos",
      "events_url": "https://api.github.com/users/nickaversano/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nickaversano/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T15:55:55Z",
    "updated_at": "2016-03-11T15:55:55Z",
    "body": "For anyone else who has this issue in the future, see: https://github.com/paulcbetts/node-system-idle-time\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305900222",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-305900222",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 305900222,
    "user": {
      "login": "watsoncj",
      "id": 31694,
      "avatar_url": "https://avatars0.githubusercontent.com/u/31694?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/watsoncj",
      "html_url": "https://github.com/watsoncj",
      "followers_url": "https://api.github.com/users/watsoncj/followers",
      "following_url": "https://api.github.com/users/watsoncj/following{/other_user}",
      "gists_url": "https://api.github.com/users/watsoncj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/watsoncj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/watsoncj/subscriptions",
      "organizations_url": "https://api.github.com/users/watsoncj/orgs",
      "repos_url": "https://api.github.com/users/watsoncj/repos",
      "events_url": "https://api.github.com/users/watsoncj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/watsoncj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-02T20:24:25Z",
    "updated_at": "2017-06-02T20:25:07Z",
    "body": "This expands on @paulcbetts excellent answer:\r\n\r\n```\r\nlet ffi = require('ffi');\r\nlet ref = require('ref');\r\nlet refStruct = require('ref-struct');\r\n\r\nvar intPtr = null;\r\nvar boolPtr = null;\r\nvar LASTINPUTINFO = null;\r\nvar OSVERSIONINFO = null;\r\nvar pOSVERSIONINFO = null;\r\nvar pLASTINPUTINFO = null;\r\nvar shell32 = null;\r\nvar user32 = null;\r\nvar kernel32 = null;\r\nvar dwmApi = null;\r\nlet setupWindowsLibs = function() {\r\n  intPtr = intPtr || ref.refType(ref.types.int32);\r\n  boolPtr = boolPtr || ref.refType(ref.types.bool);\r\n  LASTINPUTINFO = LASTINPUTINFO || refStruct({\r\n    cbSize: ref.types.int32,\r\n    dwTime: ref.types.uint32,\r\n  });\r\n  pLASTINPUTINFO = pLASTINPUTINFO || ref.refType(LASTINPUTINFO);\r\n  user32 = user32 || ffi.Library('user32', {\r\n    'GetLastInputInfo': [ 'int', [ pLASTINPUTINFO ] ],\r\n  });\r\n  kernel32 = kernel32 || ffi.Library('kernel32', {\r\n    'GetTickCount': [ 'int32', [ ref.types.void ] ],\r\n  });\r\n};\r\nexports = {\r\n  'win32': {\r\n    getIdleTimeInMs: () => {\r\n      setupWindowsLibs();\r\n      let result = new LASTINPUTINFO();\r\n      result.cbSize = LASTINPUTINFO.size;\r\n      let failed = (user32.GetLastInputInfo(result.ref()) === 0);\r\n      if (failed) {\r\n        throw new Error(\"Couldn't get idle time\");\r\n      }\r\n      return kernel32.GetTickCount(ref.void) - result.dwTime;\r\n    },\r\n  },\r\n  'darwin': {\r\n    getIdleTimeInMs: () => {\r\n      // TODO: Replace with a call to CGEventSourceCounterForEventType\r\n      return 100000000;\r\n    },\r\n  },\r\n  'linux': {\r\n    getIdleTimeInMs: () => {\r\n      return 100000000;\r\n    },\r\n  },\r\n};\r\nmodule.exports = exports[process.platform];\r\nconsole.log(module.exports.getIdleTimeInMs());\r\n```"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/308580492",
    "html_url": "https://github.com/electron/electron/issues/1528#issuecomment-308580492",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/1528",
    "id": 308580492,
    "user": {
      "login": "robverhoef",
      "id": 6018695,
      "avatar_url": "https://avatars3.githubusercontent.com/u/6018695?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robverhoef",
      "html_url": "https://github.com/robverhoef",
      "followers_url": "https://api.github.com/users/robverhoef/followers",
      "following_url": "https://api.github.com/users/robverhoef/following{/other_user}",
      "gists_url": "https://api.github.com/users/robverhoef/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robverhoef/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robverhoef/subscriptions",
      "organizations_url": "https://api.github.com/users/robverhoef/orgs",
      "repos_url": "https://api.github.com/users/robverhoef/repos",
      "events_url": "https://api.github.com/users/robverhoef/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robverhoef/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T22:52:36Z",
    "updated_at": "2017-06-14T22:52:36Z",
    "body": "This works for me in OS X. I have a timer running, in Electron+Vue, after pressing a button. \r\nAnd I need to know the Idle time while it is running:\r\n```\r\n    import shell from 'shelljs'\r\n    //\r\n    // In the Vue methods block:\r\n    //\r\n      starttimer (event) {\r\n        event.preventDefault()\r\n        this.startDate = new Date()\r\n        this.intv = setInterval(() => {\r\n          this.endDate = new Date()\r\n          const command = \"/usr/sbin/ioreg -c IOHIDSystem | /usr/bin/awk '/HIDIdleTime/ {print int($NF/1000000000); exit}'\"\r\n          var child = shell.exec(command, {async: true, silent: true})\r\n          child.stdout.on('data', (seconds) => {\r\n            // do something after a certain amount of idle time\r\n            console.log(seconds)\r\n          })\r\n        }, 1000)\r\n      },\r\n      stoptimer (event) {\r\n        event.preventDefault()\r\n        clearInterval(this.intv)\r\n        this.intv = -1\r\n      },\r\n```"
  }
]