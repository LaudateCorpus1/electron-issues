[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255835799",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255835799",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255835799,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T19:09:42Z",
    "updated_at": "2016-10-24T19:10:35Z",
    "body": "For us it has always been easy to do with minimal code. This solution works in both the main and render processes.\n\nHere is an example:\n\n``` javascript\nfunction isDev() {\n  return process.mainModule.filename.indexOf('app.asar') === -1;\n}\n```\n\nUsage:\n\n``` javascript\nif (isDev()) {\n  // Do dev stuff\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255837458",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255837458",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255837458,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-24T19:16:04Z",
    "updated_at": "2016-10-24T19:16:04Z",
    "body": "@baconface that's a nice one-liner. I see a few drawbacks, though:\n1. Requires deep knowledge of how Electron works. Not intuitive to new users.\n2. Will break for apps that are not using ASAR.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255844571",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255844571",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255844571,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T19:44:05Z",
    "updated_at": "2016-10-24T19:44:05Z",
    "body": "@zeke I agree. And even though this works for us I would also like to see an official solution as well.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255867084",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255867084",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255867084,
    "user": {
      "login": "ungoldman",
      "id": 427322,
      "avatar_url": "https://avatars3.githubusercontent.com/u/427322?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ungoldman",
      "html_url": "https://github.com/ungoldman",
      "followers_url": "https://api.github.com/users/ungoldman/followers",
      "following_url": "https://api.github.com/users/ungoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ungoldman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ungoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ungoldman/subscriptions",
      "organizations_url": "https://api.github.com/users/ungoldman/orgs",
      "repos_url": "https://api.github.com/users/ungoldman/repos",
      "events_url": "https://api.github.com/users/ungoldman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ungoldman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T21:10:06Z",
    "updated_at": "2016-10-24T21:10:06Z",
    "body": "Hi @zeke! I agree with your point about solving the issue in electron rather than userland, and think the `NODE_ENV` convention is a good model. I also think it's important to have something distinct from `NODE_ENV`, so `ELECTRON_ENV` sounds good to me. So basically yes, I would like to see `ELECTRON_ENV` set to `development` when an app is unpackaged. 👍 \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255877825",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255877825",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255877825,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-24T21:55:28Z",
    "updated_at": "2016-10-24T21:55:28Z",
    "body": "@ungoldman glad to hear it.\n\n> I also think it's important to have something distinct from `NODE_ENV`\n\nI forgot to mention that during an internal discussion, `NODE_ENV` was floated as an alternative to `ELECTRON_ENV`. I tend to agree with you, but I wonder: any particular reason you think the two should be distinct?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255879375",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255879375",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255879375,
    "user": {
      "login": "ungoldman",
      "id": 427322,
      "avatar_url": "https://avatars3.githubusercontent.com/u/427322?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ungoldman",
      "html_url": "https://github.com/ungoldman",
      "followers_url": "https://api.github.com/users/ungoldman/followers",
      "following_url": "https://api.github.com/users/ungoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ungoldman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ungoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ungoldman/subscriptions",
      "organizations_url": "https://api.github.com/users/ungoldman/orgs",
      "repos_url": "https://api.github.com/users/ungoldman/repos",
      "events_url": "https://api.github.com/users/ungoldman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ungoldman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T22:02:38Z",
    "updated_at": "2016-10-24T22:02:38Z",
    "body": "> any particular reason you think the two should be distinct?\n\nBecause it's not node? I think it's possible to have a situation where NODE_ENV is already set in the environment... but this may just be me imagining things.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255913669",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255913669",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255913669,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-25T01:45:31Z",
    "updated_at": "2016-10-25T01:45:31Z",
    "body": "> Because it's not node?\n\n👍 \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255913880",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255913880",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255913880,
    "user": {
      "login": "baconbrad",
      "id": 4763342,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4763342?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/baconbrad",
      "html_url": "https://github.com/baconbrad",
      "followers_url": "https://api.github.com/users/baconbrad/followers",
      "following_url": "https://api.github.com/users/baconbrad/following{/other_user}",
      "gists_url": "https://api.github.com/users/baconbrad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/baconbrad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/baconbrad/subscriptions",
      "organizations_url": "https://api.github.com/users/baconbrad/orgs",
      "repos_url": "https://api.github.com/users/baconbrad/repos",
      "events_url": "https://api.github.com/users/baconbrad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/baconbrad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T01:47:06Z",
    "updated_at": "2016-10-25T01:47:47Z",
    "body": "I don't think a distinction is appropriate. Code is not ran in the Electron context. It is ran in in the Node context (although a slightly modified Node). Accessing Electron's functionalities are APIs available in that Node context. Using NODE_ENV would also yield useful for modules that use it already for debugging/development.\n\nBut I am indifferent to how it is done either way.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255918223",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255918223",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255918223,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T02:20:20Z",
    "updated_at": "2016-10-25T02:21:59Z",
    "body": "I put some thought into this a while back as well, internally in GPMDP we use a rather funky `--dev` CLI arg to switch between \"production\" and \"development\" modes.  I would much prefer a standard way in Electron to do it but I'd like to make a case for **not** using an environment variable.\n1. Using environment variables in standard node modules is OK, in reality most node modules are developed and run on *nix based systems that allow commands such as `NODE_ENV=production npm run doThing`.  However Electron has to remember that it is completely cross-platform and as such needs an easy way for Windows users to make this switch as well.  Unfortunately windows does not support that environment variable syntax and requires that you use another module `cross-env`\n2. All core features of Electron are currently toggled through an API and I believe that should remain the same, we have some debugging environment variables but nothing that modifies how code actually runs.  I believe if users want an environment variable to switch between production and development they can configure that themselves.\n\nI would love to see an api such as\n\n``` markdown\n## Events\n### Event: 'in-production-changed'\n\nReturns:\n\n* `event` Event\n* `inProd` Boolean\n\nEmitted when the application is switched in or out of production mode\n\n\n## Methods\n### `app.inProduction()`\n\nReturns `Boolean` - Whether the application should run in a production environment\n\n### `app.setProduction(inProd)`\n\n* `inProd` Boolean - Whether the application should run in a production environment\n\n**NOTE:** This does not affect any of Electron's internals, only your code and third\nparty modules that read this option.\n```\n\nThis way if a user does want to map `ELECTRON_ENV` to `inProduction()` they simple have to call\n\n``` js\napp.setProduction(!!process.env.ELECTRON_ENV);\n```\n\nWith this API renderer modules can use `remote.app.inProduction()` to obtain the same information.  What do people think of this (relatively simple to implement) approach.\n\n**EDIT:** For clarification `app.inProduction()` would return `!process.defaultApp` by default.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255934331",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255934331",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255934331,
    "user": {
      "login": "enlight",
      "id": 233003,
      "avatar_url": "https://avatars3.githubusercontent.com/u/233003?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/enlight",
      "html_url": "https://github.com/enlight",
      "followers_url": "https://api.github.com/users/enlight/followers",
      "following_url": "https://api.github.com/users/enlight/following{/other_user}",
      "gists_url": "https://api.github.com/users/enlight/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/enlight/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/enlight/subscriptions",
      "organizations_url": "https://api.github.com/users/enlight/orgs",
      "repos_url": "https://api.github.com/users/enlight/repos",
      "events_url": "https://api.github.com/users/enlight/events{/privacy}",
      "received_events_url": "https://api.github.com/users/enlight/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T04:38:57Z",
    "updated_at": "2016-10-25T04:38:57Z",
    "body": "I could see some utility in providing a standard way of determining if an app is packaged or not, but this issue seems to be conflating that feature with app environments/configurations. I don't think Electron should assume anything about how apps handle different environments, apps may have more than one development environment and/or more than one production environment.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255946739",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-255946739",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 255946739,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-25T06:19:26Z",
    "updated_at": "2016-10-25T06:19:26Z",
    "body": "> I could see some utility in providing a standard way of determining if an app is packaged\n\nAgreed. There is less ambiguity in answering whether an app is \"packaged\". This approach would also eliminate the need for users to set the value. Hence we could just get away with a single getter method. This is also more clear than the existing main-process `process.defaultApp` property, which is not intuitively named.\n\nSeveral existing boolean-returning API methods have an `is` prefix:\n\napp.isReady()\napp.isUnityRunning()\napp.isAccessibilitySupportEnabled()\netc..\n\nSo how about `app.isPackaged()` and `remote.app.isPackaged()`?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/256083834",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-256083834",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 256083834,
    "user": {
      "login": "ungoldman",
      "id": 427322,
      "avatar_url": "https://avatars3.githubusercontent.com/u/427322?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ungoldman",
      "html_url": "https://github.com/ungoldman",
      "followers_url": "https://api.github.com/users/ungoldman/followers",
      "following_url": "https://api.github.com/users/ungoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ungoldman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ungoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ungoldman/subscriptions",
      "organizations_url": "https://api.github.com/users/ungoldman/orgs",
      "repos_url": "https://api.github.com/users/ungoldman/repos",
      "events_url": "https://api.github.com/users/ungoldman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ungoldman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T16:17:33Z",
    "updated_at": "2016-10-25T16:17:33Z",
    "body": "Hmm, responded via email earlier but it looks like it didn't go through...\n\nI thought about this last night and was about to suggest `app.isPackaged()` as being more in line with the current API. So re: @enlight and @zeke's previous comments: 👍 \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/256131628",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-256131628",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 256131628,
    "user": {
      "login": "ungoldman",
      "id": 427322,
      "avatar_url": "https://avatars3.githubusercontent.com/u/427322?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ungoldman",
      "html_url": "https://github.com/ungoldman",
      "followers_url": "https://api.github.com/users/ungoldman/followers",
      "following_url": "https://api.github.com/users/ungoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ungoldman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ungoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ungoldman/subscriptions",
      "organizations_url": "https://api.github.com/users/ungoldman/orgs",
      "repos_url": "https://api.github.com/users/ungoldman/repos",
      "events_url": "https://api.github.com/users/ungoldman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ungoldman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T18:36:29Z",
    "updated_at": "2016-10-25T18:36:29Z",
    "body": "I thought about this last night and was about to suggest app.isPackaged()\nas being more in line with current API 😂\nOn Mon, Oct 24, 2016 at 11:20 PM Zeke Sikelianos notifications@github.com\nwrote:\n\n> I could see some utility in providing a standard way of determining if an\n> app is packaged\n> \n> Agreed. There is less ambiguity in answering whether an app is \"packaged\".\n> This approach would also eliminate the need for users to set the value.\n> Hence we could just get away with a single getter method. This is also more\n> clear than the existing main-process process.defaultApp property, which\n> is not intuitively named.\n> \n> Several existing boolean-returning API methods have an is prefix:\n> \n> app.isReady()\n> app.isUnityRunning()\n> app.isAccessibilitySupportEnabled()\n> etc..\n> \n> So how about app.isPackaged() and remote.app.isPackaged()?\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/electron/electron/issues/7714#issuecomment-255946739,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAaFOgvWeCJ0O3czr2RNaf6eoRgqgjVyks5q3Z-ngaJpZM4KfJCm\n> .\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/256141660",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-256141660",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 256141660,
    "user": {
      "login": "parro-it",
      "id": 11197111,
      "avatar_url": "https://avatars1.githubusercontent.com/u/11197111?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/parro-it",
      "html_url": "https://github.com/parro-it",
      "followers_url": "https://api.github.com/users/parro-it/followers",
      "following_url": "https://api.github.com/users/parro-it/following{/other_user}",
      "gists_url": "https://api.github.com/users/parro-it/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parro-it/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parro-it/subscriptions",
      "organizations_url": "https://api.github.com/users/parro-it/orgs",
      "repos_url": "https://api.github.com/users/parro-it/repos",
      "events_url": "https://api.github.com/users/parro-it/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parro-it/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T18:59:34Z",
    "updated_at": "2016-10-25T18:59:57Z",
    "body": "The `app.isPackaged()` solution alone has the same disadvantage of the actual `electron-is-dev` implementation: some tools and apps are in production state but they are not packaged.\n\nI would prefer the solution proposed by @MarshallOfSound: seems more flexible and has the advantage that the state can be changed while an app is running.\n\nHowever, also the `isPackaged` method is useful, normal app could set theirs state doing:\n\n``` js\napp.setProduction(app.isPackaged());\n```\n\nwhile tools that ships unpackaged could do what @MarshallOfSound said:\n\n``` js\napp.setProduction(process.env.ELECTRON_ENV === 'production');\n```\n\nor whatever they want...\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258018110",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-258018110",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 258018110,
    "user": {
      "login": "lukeed",
      "id": 5855893,
      "avatar_url": "https://avatars2.githubusercontent.com/u/5855893?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukeed",
      "html_url": "https://github.com/lukeed",
      "followers_url": "https://api.github.com/users/lukeed/followers",
      "following_url": "https://api.github.com/users/lukeed/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukeed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukeed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukeed/subscriptions",
      "organizations_url": "https://api.github.com/users/lukeed/orgs",
      "repos_url": "https://api.github.com/users/lukeed/repos",
      "events_url": "https://api.github.com/users/lukeed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukeed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-02T22:24:58Z",
    "updated_at": "2016-11-02T22:34:09Z",
    "body": "FWIW, I'd much prefer binary flags. It's a little more concise & accepting a string suggests that `development` is just as welcome as `production`. But if `dev` is already the default mode, there's no reason to check if `ENV === 'dev'` everywhere; it's assumed until made otherwise.\n\n``` json\n{\n  \"scripts\": {\n    \"start\": \"ELECTRON_PROD=1 electron .\"\n  }\n}\n```\n\n> Could just as easily be `ELECTRON_DEV`, whichever you think should _not_ be run by default.\n\n``` js\napp.isProduction = () => process.env.ELECTRON_PROD || false;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/270073522",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-270073522",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 270073522,
    "user": {
      "login": "deepak",
      "id": 9192,
      "avatar_url": "https://avatars1.githubusercontent.com/u/9192?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deepak",
      "html_url": "https://github.com/deepak",
      "followers_url": "https://api.github.com/users/deepak/followers",
      "following_url": "https://api.github.com/users/deepak/following{/other_user}",
      "gists_url": "https://api.github.com/users/deepak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deepak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deepak/subscriptions",
      "organizations_url": "https://api.github.com/users/deepak/orgs",
      "repos_url": "https://api.github.com/users/deepak/repos",
      "events_url": "https://api.github.com/users/deepak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deepak/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-03T09:11:13Z",
    "updated_at": "2017-01-03T09:11:25Z",
    "body": "tl;dr: have NODE_ENV and ELECTRON_ENV. and both are almost synonymous \r\n\r\ni like how many libraries have a `DEBUG` environment variable and we can just start the app with \r\n`DEBUG=* npm start` to see all the messages. it is a standard (ish) and everything is good with the world :-)\r\n\r\nsomething similar for dev/production would be nice. so rather than `NODE_ENV` or `ELECTRON_ENV` \r\nwe just have one flag maybe `APP_ENV=development|production|staging`\r\n\r\ndo not think this will happen :-) \r\nunless everyone changes over from `NODE_ENV` to `APP_ENV` or some-such\r\n\r\nalso i think, it still might be a good idea to set node and electron env seperately. so\r\n\r\n1. if there is only `NODE_ENV`, it sets `ELECTRON_ENV`. so `NODE_ENV=production` automatically sets `ELECTRON_ENV=production` as well\r\n2. can override `ELECTRON_ENV`. so `ELECTRON_ENV=development NODE_ENV=production` is valid\r\n\r\nalso not sure what to do when only `ELECTRON_ENV` is used. \r\nie. should `ELECTRON_ENV=production` set `NODE_ENV=production` as well ? (yes, i think) \r\n\r\nwe may still need to set `NODE_ENV` even with `ELECTRON_ENV` because electron can and will use nodejs libraries.\r\n\r\nnot sure where different NODE_ENV and ELECTRON_ENV would be useful \r\nmaybe to give a custom development build\r\n\r\nbtw [Nylas N1](https://github.com/nylas/N1/blob/0fd751d40363ac1ce58cfc9313bdc18350faeb79/package.json#L109) uses a `--dev` flag to start Electron. But is not documented in the [electron command-line flags](https://github.com/electron/electron/blob/master/docs/api/chrome-command-line-switches.md). Not sure where it is coming from ? cc @emorikawa "
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/270081579",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-270081579",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 270081579,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-03T10:01:15Z",
    "updated_at": "2017-01-03T10:01:15Z",
    "body": "@deepak \r\n\r\n> btw Nylas N1 uses a --dev flag to start Electron.\r\n\r\nThe `--dev` flag is custom and read in from `process.argv`, I also use `--dev` in GPMDP and read it from `process.argv` to determine if I am in \"development mode\" or not.  It is not related to the Chromium CLI flags"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/270193633",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-270193633",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 270193633,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-03T18:58:43Z",
    "updated_at": "2017-01-03T18:59:23Z",
    "body": "@zeke how about:\r\n\r\n```js\r\nlet isDevMode = process.execPath.match(/dist[\\\\/]electron/i)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/270220263",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-270220263",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 270220263,
    "user": {
      "login": "ungoldman",
      "id": 427322,
      "avatar_url": "https://avatars3.githubusercontent.com/u/427322?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ungoldman",
      "html_url": "https://github.com/ungoldman",
      "followers_url": "https://api.github.com/users/ungoldman/followers",
      "following_url": "https://api.github.com/users/ungoldman/following{/other_user}",
      "gists_url": "https://api.github.com/users/ungoldman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ungoldman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ungoldman/subscriptions",
      "organizations_url": "https://api.github.com/users/ungoldman/orgs",
      "repos_url": "https://api.github.com/users/ungoldman/repos",
      "events_url": "https://api.github.com/users/ungoldman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ungoldman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-03T20:47:19Z",
    "updated_at": "2017-01-03T20:50:36Z",
    "body": "Old thread, but after above discussion I still think `app.isPackaged()` is the way to go for now in terms of actually implementing something in electron core. It's a meaningful thing electron can easily return.\r\n\r\n`NODE_ENV`/`ELECTRON_ENV`, though useful conventions, are arbitrary environmental variables that should be managed by users, just like in Node.\r\n\r\n> re: Where is NODE_ENV documented (nodejs google group, 2012)\r\n>\r\n> It's not documented in node core because it's just a convention, made\r\npopular by express. Node itself doesn't care what the environment vars\r\nare really, it just lets you read and write them via\r\nhttp://nodejs.org/docs/latest/api/process.html#process_process_env .\r\n\r\n- https://groups.google.com/d/msg/nodejs/GGL-SGfWKkI/iz9qBYUysVIJ\r\n\r\n[DEBUG](https://www.npmjs.com/package/debug) is also a useful convention, but was something introduced in userland (also by tj of express fame) the usage of which can vary wildly project to project. There's already a method for debugging the main process (https://github.com/electron/electron/blob/master/docs/tutorial/debugging-main-process.md) that should remain separate from debugging user code."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/270407511",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-270407511",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 270407511,
    "user": {
      "login": "myst729",
      "id": 519733,
      "avatar_url": "https://avatars0.githubusercontent.com/u/519733?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myst729",
      "html_url": "https://github.com/myst729",
      "followers_url": "https://api.github.com/users/myst729/followers",
      "following_url": "https://api.github.com/users/myst729/following{/other_user}",
      "gists_url": "https://api.github.com/users/myst729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myst729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myst729/subscriptions",
      "organizations_url": "https://api.github.com/users/myst729/orgs",
      "repos_url": "https://api.github.com/users/myst729/repos",
      "events_url": "https://api.github.com/users/myst729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myst729/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-01-04T16:01:10Z",
    "updated_at": "2017-01-04T16:01:10Z",
    "body": "I personally find the proposal from @parro-it makes sense. Also agreed with @ungoldman that `ELECTRON_ENV` sounds like something controlled by the end user."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/281847350",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-281847350",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 281847350,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-02-23T00:09:19Z",
    "updated_at": "2017-02-23T00:09:19Z",
    "body": "Dusting off this thread. 🌬 \r\n\r\nReading back through, there are two basic points we're all mostly agreeing on:\r\n\r\n1. Environment variables like `NODE_ENV` and `ELECTRON_ENV` should be set by users, not by Electron.\r\n1. A new `app.isPackaged()` method would be useful.\r\n\r\nImplementation-wise, how can one reliably determine whether an app is packaged, regardless of ASAR settings, operating system, etc?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/310859278",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-310859278",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 310859278,
    "user": {
      "login": "zackshapiro",
      "id": 882251,
      "avatar_url": "https://avatars3.githubusercontent.com/u/882251?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zackshapiro",
      "html_url": "https://github.com/zackshapiro",
      "followers_url": "https://api.github.com/users/zackshapiro/followers",
      "following_url": "https://api.github.com/users/zackshapiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/zackshapiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zackshapiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zackshapiro/subscriptions",
      "organizations_url": "https://api.github.com/users/zackshapiro/orgs",
      "repos_url": "https://api.github.com/users/zackshapiro/repos",
      "events_url": "https://api.github.com/users/zackshapiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zackshapiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-24T18:56:04Z",
    "updated_at": "2017-06-24T18:56:16Z",
    "body": "Hey @zeke, was there ever a PR here to change the current behavior? Thanks!"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/310878996",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-310878996",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 310878996,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-06-25T03:03:37Z",
    "updated_at": "2017-06-25T03:03:37Z",
    "body": "@zackshapiro no this never turned into a PR, but it still should! :)\r\n\r\nAre you interested in working on it? If not, I can eventually get to it."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/310885608",
    "html_url": "https://github.com/electron/electron/issues/7714#issuecomment-310885608",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7714",
    "id": 310885608,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-25T06:33:36Z",
    "updated_at": "2017-06-25T06:33:36Z",
    "body": "Just because I saw this flying through my inbox, I think the most reliable way to determine if an app is \"packaged\" or not is to check if `app.asar` or `app` **exists**.  If it does assume prod, if it doesn't assume dev.\r\n\r\nThis logic is based on the search paths: https://github.com/electron/electron/blob/a6ea316a5de1964761a82d9376c23e99eff16d25/lib/browser/init.js#L106"
  }
]