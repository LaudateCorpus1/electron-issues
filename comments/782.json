[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62115683",
    "html_url": "https://github.com/electron/electron/issues/782#issuecomment-62115683",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/782",
    "id": 62115683,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-11-07T09:03:38Z",
    "updated_at": "2014-11-07T09:03:38Z",
    "body": "We need to make the `.asar` file be treated as directory because it is very likely that some code would want to scan the files under the application (for example the `walkdir` module).\n\nHow about providing a `original-fs` built-in module that provides access to original `fs` module without asar support?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62158263",
    "html_url": "https://github.com/electron/electron/issues/782#issuecomment-62158263",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/782",
    "id": 62158263,
    "user": {
      "login": "joshuawarner32",
      "id": 182686,
      "avatar_url": "https://avatars0.githubusercontent.com/u/182686?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshuawarner32",
      "html_url": "https://github.com/joshuawarner32",
      "followers_url": "https://api.github.com/users/joshuawarner32/followers",
      "following_url": "https://api.github.com/users/joshuawarner32/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuawarner32/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshuawarner32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuawarner32/subscriptions",
      "organizations_url": "https://api.github.com/users/joshuawarner32/orgs",
      "repos_url": "https://api.github.com/users/joshuawarner32/repos",
      "events_url": "https://api.github.com/users/joshuawarner32/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshuawarner32/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-07T15:16:34Z",
    "updated_at": "2014-11-07T15:16:34Z",
    "body": "Makes sense - but looking through the fs api, `readdir` is the only api there that would make sense to me using the .asar file itself as a directory. That's presumably what's used under the covers in `walkdir`.  Furthermore, it doesn't make any sense for that to ever treat an .asar file as a file.\n\nWhat about having `readdir` (and any other functions that make sense, that I'm missing) still operate on a `*.asar` path as a directory?\n\nOr, barring that, have a subset of functions that could only possibly make sense in the context of files, be able to use the .asar file directly?  e.g. `open*`, `fsync*`, `read*`, `write*`, `append*`, `createReadStream`, and `createWriteStream`.  Everything else, including `readdir` would still see a `*.asar` path as a directory.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62342770",
    "html_url": "https://github.com/electron/electron/issues/782#issuecomment-62342770",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/782",
    "id": 62342770,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-11-10T05:23:14Z",
    "updated_at": "2014-11-10T05:23:14Z",
    "body": "Some modules would use `fs.stat` to determine whether a path is file or directory before actually operating on it, if we treat `*.asar` as file in `fs.stat`, `walkdir` will fail to iterate through the `*.asar`, if we treat it as directory, modules that read the file information before reading/writing would fail. So having `fs` treat `*.asar` as both file and directory would have some failing cases.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62397034",
    "html_url": "https://github.com/electron/electron/issues/782#issuecomment-62397034",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/782",
    "id": 62397034,
    "user": {
      "login": "joshuawarner32",
      "id": 182686,
      "avatar_url": "https://avatars0.githubusercontent.com/u/182686?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshuawarner32",
      "html_url": "https://github.com/joshuawarner32",
      "followers_url": "https://api.github.com/users/joshuawarner32/followers",
      "following_url": "https://api.github.com/users/joshuawarner32/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuawarner32/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshuawarner32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuawarner32/subscriptions",
      "organizations_url": "https://api.github.com/users/joshuawarner32/orgs",
      "repos_url": "https://api.github.com/users/joshuawarner32/repos",
      "events_url": "https://api.github.com/users/joshuawarner32/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshuawarner32/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-10T15:11:18Z",
    "updated_at": "2014-11-10T15:11:18Z",
    "body": "I wouldn't mind if stat fell in the directory-interpretation case, though that does bring up an API that's really valid for both files and directories, which could confuse people.\n\nOptions I see now, in order of preference:\n- Divide the APIs into file-like and directory-like.  File-like read the .asar as a file, and directory-like read it as a directory.  Stat would fall in the latter case.\n- For ambiguous cases (stat, for instance), we could instead have them default to file-like behavior, but read it as a directory when passed a path ending in '/'. e.g. `~/foo.asar/`.\n- Like you originally suggested, expose the 'original' fs API.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/69047855",
    "html_url": "https://github.com/electron/electron/issues/782#issuecomment-69047855",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/782",
    "id": 69047855,
    "user": {
      "login": "joshuawarner32",
      "id": 182686,
      "avatar_url": "https://avatars0.githubusercontent.com/u/182686?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joshuawarner32",
      "html_url": "https://github.com/joshuawarner32",
      "followers_url": "https://api.github.com/users/joshuawarner32/followers",
      "following_url": "https://api.github.com/users/joshuawarner32/following{/other_user}",
      "gists_url": "https://api.github.com/users/joshuawarner32/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joshuawarner32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joshuawarner32/subscriptions",
      "organizations_url": "https://api.github.com/users/joshuawarner32/orgs",
      "repos_url": "https://api.github.com/users/joshuawarner32/repos",
      "events_url": "https://api.github.com/users/joshuawarner32/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joshuawarner32/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-07T16:30:14Z",
    "updated_at": "2015-01-07T17:23:16Z",
    "body": "@zcbenz, sorry for taking so long to test this in my app, and thanks for the fix... but it doesn't completely work :(.\n\n(Also, sorry for posting on a closed issue; I can open a new issue if you want)\n\nThe problem is this: the low-level fs functions that asar.coffee replaces work fine in original-fs (i.e. I actually get access to the original behavior); however, all the higher-level fs functions call through the fs module object (the exports object), so when the low-level functions are swapped out, the high-level functions change to the new behavior.  This is convenient for the .asar functionality, since you only have to swap out those low-level functions to get the uniform asar-handling behavior, but it also means that you can't simply keep references to the high-level functions in original-fs and expect them not to change.\n\nThe obvious way to do this in my mind is to have original-fs bypass the normal `require` machinery and obtain a unique version of the exports of the 'fs' module, before asar.coffee modifies it.  I looked into how to do this a little but I don't see a way, short of modifying nodejs itself.\n\nAny ideas?\n\nEDIT: I'm currently working around this by patching 'original-fs' with all the high-level implementations copied directly from nodejs (i.e. copying & modifying the source code for nodejs's fs module).  It works, but it's very hacky.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/69080312",
    "html_url": "https://github.com/electron/electron/issues/782#issuecomment-69080312",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/782",
    "id": 69080312,
    "user": {
      "login": "bwin",
      "id": 1673361,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1673361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwin",
      "html_url": "https://github.com/bwin",
      "followers_url": "https://api.github.com/users/bwin/followers",
      "following_url": "https://api.github.com/users/bwin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwin/subscriptions",
      "organizations_url": "https://api.github.com/users/bwin/orgs",
      "repos_url": "https://api.github.com/users/bwin/repos",
      "events_url": "https://api.github.com/users/bwin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-01-07T19:49:19Z",
    "updated_at": "2015-01-07T19:53:45Z",
    "body": "What about handling an asar archive differently if it ends with a `/`?\n`path/to/archive.asar` = as file\n`path/to/archive.asar/` = as directory\n**Edit:** `path/to/archive.asar/some/dir/file.txt` = as file in archive\n\nI don't like the code that checks if a path is an asar archive anyway, but I'll come back to this. Just my 2 cents because this came up.\n\n**Edit**: I think this would be more elegant than exposing `original-fs`.\nAlso this happens when you don't read... :( joshuawarner32 already suggested this, so just count it as a +1 in favor of that.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/69105492",
    "html_url": "https://github.com/electron/electron/issues/782#issuecomment-69105492",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/782",
    "id": 69105492,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-01-07T22:38:23Z",
    "updated_at": "2015-01-07T22:38:23Z",
    "body": "@joshuawarner32 I didn't realize some high level `fs` functions depend on exported functions, I'm reopening this issue to track the problem.\n\n> What about handling an asar archive differently if it ends with a /?\n\nIf all code you use are written by yourself then it would be fine, but I have to guarantee that no third party code would fail because of the `asar` support, event it is very very rare.\n\nAs an example, a script running `walkdir(__dirname)` under the root of `asar` archive will fail if we treat `path/to/archive.asar` as file.\n"
  }
]