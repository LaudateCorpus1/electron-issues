[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/203626188",
    "html_url": "https://github.com/electron/electron/issues/4957#issuecomment-203626188",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/4957",
    "id": 203626188,
    "user": {
      "login": "felixrieseberg",
      "id": 1426799,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1426799?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/felixrieseberg",
      "html_url": "https://github.com/felixrieseberg",
      "followers_url": "https://api.github.com/users/felixrieseberg/followers",
      "following_url": "https://api.github.com/users/felixrieseberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/felixrieseberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/felixrieseberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/felixrieseberg/subscriptions",
      "organizations_url": "https://api.github.com/users/felixrieseberg/orgs",
      "repos_url": "https://api.github.com/users/felixrieseberg/repos",
      "events_url": "https://api.github.com/users/felixrieseberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/felixrieseberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-30T20:40:49Z",
    "updated_at": "2016-03-30T20:40:49Z",
    "body": "Hey, thanks for reporting! This is actually not a bug, but expected behavior - you're dealing with two different threads and not all objects make it across the inter-process communication bridge. In fact, only enumerable objects make it through.\n\nYou can find more information in the docs and here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\n\nI'm closing this in the meantime, but feel free to reopen if I misunderstood you and this is actually a bug.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/203799181",
    "html_url": "https://github.com/electron/electron/issues/4957#issuecomment-203799181",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/4957",
    "id": 203799181,
    "user": {
      "login": "berlysia",
      "id": 950573,
      "avatar_url": "https://avatars2.githubusercontent.com/u/950573?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/berlysia",
      "html_url": "https://github.com/berlysia",
      "followers_url": "https://api.github.com/users/berlysia/followers",
      "following_url": "https://api.github.com/users/berlysia/following{/other_user}",
      "gists_url": "https://api.github.com/users/berlysia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/berlysia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/berlysia/subscriptions",
      "organizations_url": "https://api.github.com/users/berlysia/orgs",
      "repos_url": "https://api.github.com/users/berlysia/repos",
      "events_url": "https://api.github.com/users/berlysia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/berlysia/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-31T07:36:14Z",
    "updated_at": "2016-03-31T07:36:14Z",
    "body": "Hi @felixrieseberg , thanks for reaction.\n\nI know that the remote module exposes enumerable props only, and now changed.\nThe remote module currently works without enumerability.\nhttps://github.com/atom/electron/blob/master/lib/browser/rpc-server.js#L19\n\nThese codes related to the problem that ES6 class's methods are non-enumerable. see #4066.\n\nIn addition, exactly ES6 class's method is non-enumerable. But traditional-notated class's method is enumerable, also reproduce.\n\nBack to this issue.\nnew simple example:\n\n``` js\nclass Klass{\n  static func(){return 123}\n}\nKlass.prop = 345;\n// and access Klass.func/prop in renderer via remote module\n\nmodule.exports = { Klass }; // reproduce\n// require('remote').require('./lib').Klass.prop\n// > undefined\n\nmodule.exports = Klass; // not reproduce\nmodule.exports = [ Klass ] // not reproduce\n\nmodule.exports = [ { Klass } ] // reproduce\n// require('remote').require('./lib')[0].Klass.prop\n// > undefined\n```\n\nInstantiation works. Accessing to property does not work.\n\nAccording to this, if a callable object(function and consturctor) is in the object and the callable object has properties, the properties are not exposed.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/239670625",
    "html_url": "https://github.com/electron/electron/issues/4957#issuecomment-239670625",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/4957",
    "id": 239670625,
    "user": {
      "login": "seanchas116",
      "id": 1025246,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1025246?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/seanchas116",
      "html_url": "https://github.com/seanchas116",
      "followers_url": "https://api.github.com/users/seanchas116/followers",
      "following_url": "https://api.github.com/users/seanchas116/following{/other_user}",
      "gists_url": "https://api.github.com/users/seanchas116/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/seanchas116/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/seanchas116/subscriptions",
      "organizations_url": "https://api.github.com/users/seanchas116/orgs",
      "repos_url": "https://api.github.com/users/seanchas116/repos",
      "events_url": "https://api.github.com/users/seanchas116/events{/privacy}",
      "received_events_url": "https://api.github.com/users/seanchas116/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-14T12:17:35Z",
    "updated_at": "2016-08-14T12:17:35Z",
    "body": "Hi, I'm facing the same problem.\n\n> if a callable object(function and consturctor) is in the object and the callable object has properties, the properties are not exposed.\n\nI think this weird behavior is obviously a bug.\n"
  }
]