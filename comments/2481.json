[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/130327175",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-130327175",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 130327175,
    "user": {
      "login": "etiktin",
      "id": 4381579,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4381579?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etiktin",
      "html_url": "https://github.com/etiktin",
      "followers_url": "https://api.github.com/users/etiktin/followers",
      "following_url": "https://api.github.com/users/etiktin/following{/other_user}",
      "gists_url": "https://api.github.com/users/etiktin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etiktin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etiktin/subscriptions",
      "organizations_url": "https://api.github.com/users/etiktin/orgs",
      "repos_url": "https://api.github.com/users/etiktin/repos",
      "events_url": "https://api.github.com/users/etiktin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etiktin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-12T14:45:36Z",
    "updated_at": "2015-08-12T14:45:36Z",
    "body": "This happens also in v0.30.2 on Windows 8.1 64 bit.\n\nI tried inspecting the `beforeunload` listeners using `getEventListeners(window)` and everything looks fine. Also tried using `Object.getOwnPropertyDescriptor(window, 'onbeforeunload')`, to see if there's a special setter for `onbeforeunload` but there isn't.\n\nI agree that modifying the behavior of `beforeunload` is confusing (see #2361 for additional issues).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132154556",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-132154556",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 132154556,
    "user": {
      "login": "deepak1556",
      "id": 964386,
      "avatar_url": "https://avatars2.githubusercontent.com/u/964386?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deepak1556",
      "html_url": "https://github.com/deepak1556",
      "followers_url": "https://api.github.com/users/deepak1556/followers",
      "following_url": "https://api.github.com/users/deepak1556/following{/other_user}",
      "gists_url": "https://api.github.com/users/deepak1556/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deepak1556/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deepak1556/subscriptions",
      "organizations_url": "https://api.github.com/users/deepak1556/orgs",
      "repos_url": "https://api.github.com/users/deepak1556/repos",
      "events_url": "https://api.github.com/users/deepak1556/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deepak1556/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T10:07:28Z",
    "updated_at": "2015-08-18T10:07:28Z",
    "body": "@duanyao you need to set the return value of event object in `beforeunload` handler to `false` or `empty` string inorder to prevent navigation.\n\n```\nwindow.addEventListener('beforeunload', onbeforeunload);\nfunction onbeforeunload(e) {\n    console.log('>>>> onbeforeunload called');\n    e.returnValue = \"false\";\n};\n```\n\nThe spec [states](https://html.spec.whatwg.org/multipage/browsers.html#unloading-documents)\n\n```\nIf the user did not confirm the page navigation, then the user agent refused to allow the document to be unloaded.\n```\n\nSince the developers are free to create their own confirmation dialogs in Electron, we require  the developers to return the result for the required action to proceed. Maybe this should be documented ?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132179812",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-132179812",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 132179812,
    "user": {
      "login": "duanyao",
      "id": 1684137,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duanyao",
      "html_url": "https://github.com/duanyao",
      "followers_url": "https://api.github.com/users/duanyao/followers",
      "following_url": "https://api.github.com/users/duanyao/following{/other_user}",
      "gists_url": "https://api.github.com/users/duanyao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duanyao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duanyao/subscriptions",
      "organizations_url": "https://api.github.com/users/duanyao/orgs",
      "repos_url": "https://api.github.com/users/duanyao/repos",
      "events_url": "https://api.github.com/users/duanyao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duanyao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T11:24:25Z",
    "updated_at": "2015-08-18T11:32:12Z",
    "body": "@deepak1556 \nThe spec says:\n\n> If the returnValue attribute of the event object is not the empty string, or if the event was canceled, then the user agent should ask the user to confirm that they wish to unload the document.\n\nSo `e.returnValue = \"false\"` should result in a confirm dialog per spec; however Electron simply rejects the navigation/closing in this case.\n\nSo I suggest adding a Electron specific event, e.g. `electron-beforeunload` to allow custom dialogs, and make `beforeunload` spec-compaliant.\n\nAlso note that this issue is mainly about the different behaviors of `window.onbeforeunload` and `window.addEventListener('beforeunload',)` in Electron.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132184273",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-132184273",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 132184273,
    "user": {
      "login": "deepak1556",
      "id": 964386,
      "avatar_url": "https://avatars2.githubusercontent.com/u/964386?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deepak1556",
      "html_url": "https://github.com/deepak1556",
      "followers_url": "https://api.github.com/users/deepak1556/followers",
      "following_url": "https://api.github.com/users/deepak1556/following{/other_user}",
      "gists_url": "https://api.github.com/users/deepak1556/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deepak1556/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deepak1556/subscriptions",
      "organizations_url": "https://api.github.com/users/deepak1556/orgs",
      "repos_url": "https://api.github.com/users/deepak1556/repos",
      "events_url": "https://api.github.com/users/deepak1556/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deepak1556/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T11:45:07Z",
    "updated_at": "2015-08-18T11:45:07Z",
    "body": "Proiding a new event doesnt sound good, if `event.returnValue` is something other than empty string or `false` Electron can fallback to provide its own dialog for confirmation. Does that sound good ? will wait for others thoughts.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132245246",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-132245246",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 132245246,
    "user": {
      "login": "etiktin",
      "id": 4381579,
      "avatar_url": "https://avatars1.githubusercontent.com/u/4381579?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/etiktin",
      "html_url": "https://github.com/etiktin",
      "followers_url": "https://api.github.com/users/etiktin/followers",
      "following_url": "https://api.github.com/users/etiktin/following{/other_user}",
      "gists_url": "https://api.github.com/users/etiktin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/etiktin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/etiktin/subscriptions",
      "organizations_url": "https://api.github.com/users/etiktin/orgs",
      "repos_url": "https://api.github.com/users/etiktin/repos",
      "events_url": "https://api.github.com/users/etiktin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/etiktin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T15:13:28Z",
    "updated_at": "2015-08-18T15:13:28Z",
    "body": "@deepak1556, in your example you wrote `e.returnValue = \"false\";`, didn't you mean `e.returnValue = false;`?\n\nWhy does returning `false` from `window.onbeforeunload` works, but we need to use `e.returnValue` from handlers added through `window.addEventListener`? I have no problem using `e.returnValue`, but I'm just curious why it works differently.\n\n@duanyao, `BrowserWindow` already has a special event that allows you to prevent unload. See the [close](https://github.com/atom/electron/blob/master/docs/api/browser-window.md#event-close) event. That's why it's weird that we also mess with the normal behavior of `beforeunload`.\n\nRegarding the following:\n\n> providing a new event doesn't sound good, if event.returnValue is something other than empty string or false Electron can fallback to provide its own dialog for confirmation.\n\nI would prefer that `beforeunload` will act exactly like it does in browsers. If we can't do that because it's a breaking change (although I think most developers will be for it), then yes I would go for what you're suggesting, but we need to make sure that the fallback confirmation dialog appears only once per propagation (see #2361 for details). \n\nI think it would be better if customization of dialogs (confirm navigation, alert, confirm and prompt), would be done by registering a handler. So for example if I want my alerts to have a custom title and icon, I could do something like this:\n\n``` javascript\nmainWindow.onalert = function (msg) {\n    var dialog = remote.require('dialog');\n    dialog.showMessageBox(\n        mainWindow,\n        {\n            type: 'none',\n                        icon: './alert.png',\n            title: 'Foobar',\n            message: msg,\n            buttons: ['Click me'],\n            noLink: true\n        }\n    );\n}\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132270266",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-132270266",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 132270266,
    "user": {
      "login": "duanyao",
      "id": 1684137,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duanyao",
      "html_url": "https://github.com/duanyao",
      "followers_url": "https://api.github.com/users/duanyao/followers",
      "following_url": "https://api.github.com/users/duanyao/following{/other_user}",
      "gists_url": "https://api.github.com/users/duanyao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duanyao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duanyao/subscriptions",
      "organizations_url": "https://api.github.com/users/duanyao/orgs",
      "repos_url": "https://api.github.com/users/duanyao/repos",
      "events_url": "https://api.github.com/users/duanyao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duanyao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T16:39:11Z",
    "updated_at": "2015-08-18T16:44:29Z",
    "body": "@deepak1556 I'm not sure how fallback would work in your mind. Currently I have to do some UA-sniff:\n\n```\nfunction onBeforeUnload(ev) {\n    var msg = '...';\n    if (!config.isElectron) {       \n        ev.returnValue = msg;\n    } else {\n        return confirm(msg);\n    }\n}\n```\n\n@etiktin It seems `close` event is unavailable to web content. `e.returnValue = false` is equivlant to `e.returnValue = \"false\"`, because `BeforeUnloadEvent.returnValue` is a string, and `false` is converted to string \"false\".\n\nI agree that `beforeunload` should be web-compatible unless you have very good reason not to.\n\nCustomization of dialogs globally sounds a good idea. In fact gecko/xulrunner allow you do this, take the [geckofx code](https://bitbucket.org/geckofx/geckofx-33.0/src/3e2c6436b414984328d4e3cbee6dedf5f09a9e9d/Geckofx-Core/PromptService.cs) as an example.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132308624",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-132308624",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 132308624,
    "user": {
      "login": "deepak1556",
      "id": 964386,
      "avatar_url": "https://avatars2.githubusercontent.com/u/964386?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deepak1556",
      "html_url": "https://github.com/deepak1556",
      "followers_url": "https://api.github.com/users/deepak1556/followers",
      "following_url": "https://api.github.com/users/deepak1556/following{/other_user}",
      "gists_url": "https://api.github.com/users/deepak1556/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deepak1556/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deepak1556/subscriptions",
      "organizations_url": "https://api.github.com/users/deepak1556/orgs",
      "repos_url": "https://api.github.com/users/deepak1556/repos",
      "events_url": "https://api.github.com/users/deepak1556/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deepak1556/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-18T18:28:01Z",
    "updated_at": "2015-08-18T18:28:01Z",
    "body": "@duanyao you shldnt need to UA sniff with the fallback, my suggestion was\n\n```\nev.returnValue = '' // empty string run silently\nev.returnValue = 'false' // result from custom dialog to cancel\nev.returnValue = msg // create dailog with message for conformation\n```\n\nnot favouring the false value, just dont want to break existing users using custom dialogs.\n\n```\nfunction onBeforeUnload(ev) {\n    var msg = '...';   \n     ev.returnValue = msg; // non-empty string create a dialog with message for confirmation\n}\n```\n\nHaving said that, a better approach would be to set custom dialogs via api as callback to `AtomJavaScriptDialogManager` as noted by @etiktin https://github.com/atom/electron/issues/2522 and use them or default to native, that way can be made web-compatible. If any of you would like a PR the required logic is [here](https://github.com/atom/electron/blob/master/atom/browser/atom_javascript_dialog_manager.cc#L25)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/132419797",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-132419797",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 132419797,
    "user": {
      "login": "duanyao",
      "id": 1684137,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duanyao",
      "html_url": "https://github.com/duanyao",
      "followers_url": "https://api.github.com/users/duanyao/followers",
      "following_url": "https://api.github.com/users/duanyao/following{/other_user}",
      "gists_url": "https://api.github.com/users/duanyao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duanyao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duanyao/subscriptions",
      "organizations_url": "https://api.github.com/users/duanyao/orgs",
      "repos_url": "https://api.github.com/users/duanyao/repos",
      "events_url": "https://api.github.com/users/duanyao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duanyao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-19T02:23:22Z",
    "updated_at": "2015-08-19T02:23:22Z",
    "body": "@deepak1556 Thanks for explanation. I think it is acceptable to just reserve 'false' for Electron apps.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/134467494",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-134467494",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 134467494,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-08-25T03:53:05Z",
    "updated_at": "2015-08-25T03:53:05Z",
    "body": "For the difference between `window.addEventListener` and `window.onbeforeunload`, it is not an Electron thing, it is actually designed by DOM and you can see the same behavior in every modern browser.\n\nFor the behavior of `beforeunload` handler, showing a confirmation dialog doesn't cover all use cases. Suppose you are writing a text editor, before you close or refresh the window you need to show a dialog to ask the users whether to save the file, and if they choose \"Save\" you also need to show another dialog to ask where to save the file, and finally do some filesystem operations, and it can not be solved by showing a confirmation dialog. And example is what Atom did:\nhttps://github.com/atom/atom/blob/a13e0020796b323e3e6c85bfeb873dfb81e0a779/src/window-event-handler.coffee#L60\n\nAllowing registering custom handler for the `beforeunload` dialog doesn't solve the problem completely, because the custom handler will run in the main process while all your data is in the renderer process. So can we make Electron run the custom handler in renderer process to solve it? No, it will just create a dead lock since the renderer process is already waiting for the main process to answer.\n\nMaking use of `unload` handler is not an options too, because there is an optimization in Chrome that will delay the call of `unload` handler after loading the new page.\n\nFor changing the behavior of return `false` in `beforeunload` handler, in normal browser returning `false` is the same with returning `\"false\"`, because the `beforeunload` handler converts all results to string type. In electron we treated `false` and `\"false\"` specially because many APIs just return boolean type and this makes things simpler. Is this a good behavior? Probably not. But it is too late to change that since lots of apps are already relying on it.\n\nWe can do breaking changes, but existing code must break very noisily, if we do a breaking change silently it would just result in lots of developers spending hours trying to find why their apps stop working.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/134474126",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-134474126",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 134474126,
    "user": {
      "login": "duanyao",
      "id": 1684137,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duanyao",
      "html_url": "https://github.com/duanyao",
      "followers_url": "https://api.github.com/users/duanyao/followers",
      "following_url": "https://api.github.com/users/duanyao/following{/other_user}",
      "gists_url": "https://api.github.com/users/duanyao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duanyao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duanyao/subscriptions",
      "organizations_url": "https://api.github.com/users/duanyao/orgs",
      "repos_url": "https://api.github.com/users/duanyao/repos",
      "events_url": "https://api.github.com/users/duanyao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duanyao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-25T04:56:05Z",
    "updated_at": "2015-08-25T04:58:00Z",
    "body": "@zcbenz \nWow, you are correct about the difference between `window.addEventListener('beforeunload')` and `window.onbeforeunload`, `OnBeforeUnloadEventHandler` has a special treatment in the spec:\nhttps://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n\nHowever, for the behavior of `beforeunload` handler in Electron, I think the problem is that Electron already breaks existing web pages. If we assume that all codes served to Electron are designed with Electron in mind, then it is fine. But this is not the case. What if one wants to build an app that may load arbitray web pages (My current project is one example)?\n\nI think the reasonable trade-off has already been proposed by @deepak1556, let me make it clearer: \n\n``` JS\nev.returnValue = 'false' // do what Electron does currently\n\nreturn 'false';  // do what Electron does currently\n\nev.returnValue = a_string_other_than_false; // do what the spec says\n\nreturn a_string_other_than_false; // do what the spec says\n```\n\nWhat do you think?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/134481693",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-134481693",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 134481693,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-08-25T05:29:31Z",
    "updated_at": "2015-08-25T05:29:31Z",
    "body": "@duanyao I think we should also handle the case of returning `true`, so for apps that returning booleans the behavior is not changed. Other parts of the proposal looks good to me, can you create a new issue for that?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/134510252",
    "html_url": "https://github.com/electron/electron/issues/2481#issuecomment-134510252",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2481",
    "id": 134510252,
    "user": {
      "login": "duanyao",
      "id": 1684137,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1684137?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/duanyao",
      "html_url": "https://github.com/duanyao",
      "followers_url": "https://api.github.com/users/duanyao/followers",
      "following_url": "https://api.github.com/users/duanyao/following{/other_user}",
      "gists_url": "https://api.github.com/users/duanyao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/duanyao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/duanyao/subscriptions",
      "organizations_url": "https://api.github.com/users/duanyao/orgs",
      "repos_url": "https://api.github.com/users/duanyao/repos",
      "events_url": "https://api.github.com/users/duanyao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/duanyao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-08-25T07:30:13Z",
    "updated_at": "2015-08-25T07:30:13Z",
    "body": "@zcbenz  Done with #2579.\n"
  }
]