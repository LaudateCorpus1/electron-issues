[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/300774211",
    "html_url": "https://github.com/electron/electron/pull/9389#issuecomment-300774211",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9389",
    "id": 300774211,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-11T12:29:42Z",
    "updated_at": "2017-05-11T12:29:42Z",
    "body": "@zcbenz it turns out `render-view-deleted` was never called because sandbox reuses the same process for reload, so the fix was to use the same `ChildWebContentsTracker` trick used by `nativeWindowOpen` to force a process respawn on reload of the top-level window.\r\n\r\nThis creates another question though: Won't this be a problem for child windows given that they also have dedicated `webContents` that can be reloaded without creating new processes? If so, maybe we should fix the assumption of one webContents only having one reference in objects-registry.js?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/301403818",
    "html_url": "https://github.com/electron/electron/pull/9389#issuecomment-301403818",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9389",
    "id": 301403818,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-05-15T07:59:16Z",
    "updated_at": "2017-05-15T07:59:16Z",
    "body": "@tarruda We can probably solve this by sending an sync message to the main process when a web page's V8 context is going to be released, and clear the `ObjectsRegistry` when received that event instead of listening to `render-view-deleted`.\r\n\r\n> maybe we should fix the assumption of one webContents only having one reference in objects-registry.js?\r\n\r\nThis would result in the same object in main process having different remote objects, e.g. in renderer process `remote.require('module') !== remote.require('module')`."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/301462239",
    "html_url": "https://github.com/electron/electron/pull/9389#issuecomment-301462239",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9389",
    "id": 301462239,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-15T12:38:15Z",
    "updated_at": "2017-05-15T12:38:15Z",
    "body": "@zcbenz I have fixed according to your specifications, but sending a synchronous message before navigation seems risky due to the possibility of deadlocks(I remember reading somewhere in chrome docs that it is a good practice to avoid relying on synchronous messages, if possible). Also it doesn't seem very robust since if the renderer crashes no message will be sent(assuming \"render-view-deleted\" is emitted even if the process crashes).\r\n\r\nIMHO I think it is cleaner if we simply assume one webcontents can reference the same object multiple times, I don't see how `remote.require('module') !== remote.require('module')` could happen in this case. If the renderer receives the same id for an object, it would simply fetch the existing object from its `remoteObjectCache`, no?\r\n\r\nAs for a solution, I imagine the following: We maintain a global per-object reference count(all references to the object across all webcontents) plus a webcontents-specific per-object reference count. If a webcontents is ever killed of removed before all objects referenced by it are explicitly garbage collected, we simply subtract the webcontents count from the global count. If you are ok with it, I can give a shot at implementing this."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/301692040",
    "html_url": "https://github.com/electron/electron/pull/9389#issuecomment-301692040",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9389",
    "id": 301692040,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-05-16T06:52:50Z",
    "updated_at": "2017-05-16T06:52:50Z",
    "body": "> but sending a synchronous message before navigation seems risky due to the possibility of deadlocks\r\n\r\nIt depends on the direction of the message, sending sync message from renderer process to main process is totally fine, and the `remote` module has been doing it very heavily.\r\n\r\n> IMHO I think it is cleaner if we simply assume one webcontents can reference the same object multiple times, I don't see how remote.require('module') !== remote.require('module') could happen in this case. If the renderer receives the same id for an object, it would simply fetch the existing object from its remoteObjectCache, no?\r\n\r\nThe reference count of remote object in renderer process is only subtracted when it gets garbage collected, currently it works like this:\r\n\r\n```js\r\nlet a = remote.require('module')\r\n// referenceCount +=1 \r\nlet b = remote.require('module')\r\n// the object exists in remoteCache, so referenceCount is not changed\r\na === b\r\n\r\na = null\r\ngc()\r\n// the object is still referenced by b, so referenceCount is not changed\r\n\r\nb = null\r\ngc()\r\n// referenceCount -=1\r\n\r\n// referenceCount ==0, object is released.\r\n```\r\n\r\nIf we add reference count whenever an object is requested, the there will have leak:\r\n\r\n```js\r\nlet a = remote.require('module')\r\n// referenceCount +=1 \r\nlet b = remote.require('module')\r\n// referenceCount +=1 \r\na === b\r\n\r\na = null\r\ngc()\r\n// the object is still referenced by b, so referenceCount is not changed\r\n\r\nb = null\r\ngc()\r\n// garbage collection happened, referenceCount -=1\r\n\r\n// referenceCount == 1, the object is leaked.\r\n```\r\n\r\nUnless we don't cache remote objects and create a proxy whenever an object is requested:\r\n\r\n```js\r\nlet a = remote.require('module')\r\n// referenceCount +=1 \r\nlet b = remote.require('module')\r\n// referenceCount +=1 \r\na !== b\r\n\r\na = null\r\ngc()\r\n// garbage collection happened, referenceCount -=1\r\n\r\nb = null\r\ngc()\r\n// garbage collection happened, referenceCount -=1\r\n\r\n// referenceCount ==0, object is released.\r\n```\r\n\r\nBut it breaks object equality and consumes much more resources, (operations like `remote.getCurrentWindow()` would create a huge proxy object every time)."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/301762215",
    "html_url": "https://github.com/electron/electron/pull/9389#issuecomment-301762215",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9389",
    "id": 301762215,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-16T12:10:05Z",
    "updated_at": "2017-05-16T12:10:05Z",
    "body": "OK @zcbenz I understand the issue now, thanks again for explaining.\r\n\r\nI have added the synchronous message to release references but didn't remove the `render-view-deleted` listener since that will be fired even if the renderer is terminated abnormally. It should be fine since the `clear` method guards against double release."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/301867664",
    "html_url": "https://github.com/electron/electron/pull/9389#issuecomment-301867664",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9389",
    "id": 301867664,
    "user": {
      "login": "lneir",
      "id": 1760440,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1760440?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lneir",
      "html_url": "https://github.com/lneir",
      "followers_url": "https://api.github.com/users/lneir/followers",
      "following_url": "https://api.github.com/users/lneir/following{/other_user}",
      "gists_url": "https://api.github.com/users/lneir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lneir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lneir/subscriptions",
      "organizations_url": "https://api.github.com/users/lneir/orgs",
      "repos_url": "https://api.github.com/users/lneir/repos",
      "events_url": "https://api.github.com/users/lneir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lneir/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-16T18:09:59Z",
    "updated_at": "2017-05-16T18:10:49Z",
    "body": "any updates when this will be merged?  thanks."
  }
]