[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33446037",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33446037",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33446037,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-28T02:31:41Z",
    "updated_at": "2014-01-28T02:31:41Z",
    "body": "For example, I see that v8 provides a \"snapshot\" facility that [Roger Wang mentioned in over in node-webkit](https://github.com/rogerwang/node-webkit/wiki/Protect-JavaScript-source-code-with-v8-snapshot). Making the loading of JS as fast as possible could really improve our startup performance.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33464511",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33464511",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33464511,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-28T09:56:18Z",
    "updated_at": "2014-01-28T09:57:32Z",
    "body": "Hmm, from the link the `snapshot` facility would actually slow down the speed:\n\n```\nThe compiled code runs slower than normal JS: ~30% performance according to v8bench.\n```\n\nTo improve the speed of `require`, I think there are roughly two way:\n\n**1. Rewrite the whole module.js in C++**\n\n  There are some very costly operations in the js code, like string concatenation, converting String to Buffer, etc, carefully rewriting the `module.js` in C++ could easily optimize those parts, plus the much faster speed of native code.\n\n  The size of `module.js` is not huge, but the code seems a little mess, I think it could be done in less than a week.\n\n**2. Cache as much as we could**\n\n  The `require.cache` basically contains everything we know of the required modules, like filename, search paths, etc, we could save everything into a single file, and then restore the cache from the file the next time. In the case of Atom, we could do the caching when building and ship the cache file along with the zip distribution.\n\n  Of course we can not really save the running js state into a file with V8's public API, but we could just save the module's js source code and re-evaluate when restoring from cache.\n\n  This way is much more easier, I'll give it a try.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33564903",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33564903",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33564903,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-29T08:29:21Z",
    "updated_at": "2014-01-29T08:29:59Z",
    "body": "After some tests on the cache way, I think unless we could make javascript compilation faster, it would have little affect on the load time, the `runInThisContext` and `Module._resolveFilename` still take most of time.\n\nOn making javascript compilation faster, since V8 is a JIT compiler that compiles into machine code directly, I believe feeding it js code is already the fastest way we could get. \n\nTo make `Module._resolveFilename` faster, rewriting parts or all of `module.js` is required, which led to the first way in my last comment.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33601078",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33601078",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33601078,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-29T16:29:00Z",
    "updated_at": "2014-01-29T16:29:00Z",
    "body": "A few questions:\n- Regarding \"snapshotting\", Roger Wang indicated that the speed issue was fixable: \"Again, if you have a real need against this limit, please file an issue and we'll find time to fix it.\" Intuitively, it seems like handing bytecode instead of source to V8 would be faster to load because you could skip the parsing step. What am I missing?\n- Is there any way to cache `Model._resolveFilename`? I suppose the problem there is knowing when to invalidate it.\n- How much time could we save by rewriting `module.js`? If it's significant, it still might be worth it to get our load time more competitive with other editors.\n- Do you have any other ideas from an atom-shell perspective to get us loading faster?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33602211",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33602211",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33602211,
    "user": {
      "login": "mcolyer",
      "id": 1424,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1424?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mcolyer",
      "html_url": "https://github.com/mcolyer",
      "followers_url": "https://api.github.com/users/mcolyer/followers",
      "following_url": "https://api.github.com/users/mcolyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/mcolyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mcolyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mcolyer/subscriptions",
      "organizations_url": "https://api.github.com/users/mcolyer/orgs",
      "repos_url": "https://api.github.com/users/mcolyer/repos",
      "events_url": "https://api.github.com/users/mcolyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mcolyer/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-29T16:38:45Z",
    "updated_at": "2014-01-29T16:38:45Z",
    "body": "The endianness might matter for bytecode, however I'm not an expert so that\ncould totally not be an issue.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33603006",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33603006",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33603006,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-29T16:45:29Z",
    "updated_at": "2014-01-29T16:45:29Z",
    "body": "Yeah he mentions it's platform-specific. The whole idea might be just a little too insane. I just want to explore every reasonable avenue to make the editor open insanely fast.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33654692",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33654692",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33654692,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-30T02:21:52Z",
    "updated_at": "2014-01-30T02:21:52Z",
    "body": "> Regarding \"snapshotting\", Roger Wang indicated that the speed issue was fixable: \"Again, if you have a real need against this limit, please file an issue and we'll find time to fix it.\" Intuitively, it seems like handing bytecode instead of source to V8 would be faster to load because you could skip the parsing step. What am I missing?\n\nI'll do some research on it.\n\n> Is there any way to cache Model._resolveFilename? I suppose the problem there is knowing when to invalidate it.\n\n`Model._resolveFilename` needs to search `module.paths` all its parents' `paths` to find the module, so we have to cache the whole tree structure of module to be able to cache the result of it. I'm not sure if caching could get it faster.\n\n> How much time could we save by rewriting module.js? If it's significant, it still might be worth it to get our load time more competitive with other editors.\n\nMaybe 30% to 50%, the time spent by `require` includes both compiling and running the required script, so it's hard to say how much more performance could we really get, but I think it worth a try.\n\n> Do you have any other ideas from an atom-shell perspective to get us loading faster?\n\nOne thing is to try to use Google Closure Compiler to preprocess all the scripts, it claims to make scripts much faster: https://code.google.com/p/closure-compiler/.\n\nAnother thing is to reduce the usage of synchronous IPC messages on startup, it's very expensive. In the profile `Ipc.sendChannelSync` takes more time than `runInThisContext`.\n\nFor example in `index.html`, both `currentWindow.loadSettings.bootstrapScript` and `currentWindow.emit('window:loaded')` are sending synchronous messages, the previous one could be replaced by putting path of bootstrap script in the page's url, the latter one could be replaced by sending a explicit asynchronous message. There are other usages of synchronous messages in places like `Atom.setWindowDimensions` and `Atom.focus`.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33667112",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33667112",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33667112,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-30T08:03:18Z",
    "updated_at": "2014-01-30T08:03:18Z",
    "body": "Results on the investigation of V8 snapshot:\n\n**Can .js file be translated to byte code and then be loaded by V8?**\n\nNo, V8 is not a byte code engine, and it doesn't generate byte code and translate it. It just translates javascript to machine code and runs that.\n\n**So what's snapshot?**\n\nV8's snapshot feature, as its name says, is to serialize current js heap into a file, and when V8 is initializing next time it can use the snapshot file to restore the heap immediately.\n\nIn V8 some runtime files are written in javascript, in order to load those runtime files as fast as possible, V8 would create a instance that includes all of those files and then serialize current heap state into a snapshot file, this process happens during building and the snapshot file is built into the final V8 library. When final user uses V8, it would restore the js heap from the snapshot file, so the time of reading, compiling and running runtime files is saved.\n\n**What's the snapshot file actually?**\n\nThe snapshot file is a serialization of js heap, it is not byte code. To generate a snapshot we have to use the `mksnapshot` tool to **run** the script and then serialize what's in V8 into a snapshot file.\n\n**What's the limitation of snapshot?**\n- The script has to be evaluated before snapshot, instead of just compilation.\n- The snapshot file is loaded and can only be loaded when V8 is initialized.\n- The snapshot file would be used for all js contexts.\n- There is no public API for the snapshot.\n- The snapshot file is platform-dependent (I don't think it matters though).\n\n**Good news?**\n\nThe good news is in theory it's possible to cache all node modules in the snapshot file. The `require` function works by wrapping the module code into a function and then evaluating the function code, so we could write a script that caches all the node modules and then dump the snapshot file.\n\n**Conclusion**\n\nI think it's possible to speed up Atom by using snapshot, though it needs modifications to both V8 and node, and it's hard to cache the a large project like Atom into a single snapshot file, but yes, it's possible.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/33692768",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-33692768",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 33692768,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-01-30T14:36:58Z",
    "updated_at": "2014-01-30T14:36:58Z",
    "body": "Wow, thanks for the thorough report. At this point it sounds very tempting but also pretty complex. It sounds like you had some other ideas that might be easier to implement before resorting to digging into non-public V8 APIs. As always, it's up to you in terms of what the best course of action is. I was just curious about this one.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/34604817",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-34604817",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 34604817,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-02-10T06:56:01Z",
    "updated_at": "2014-02-10T06:56:01Z",
    "body": "I have patched V8 to make it support external snapshot files, for small js files it works perfectly, but for large js file it would crash when deserializing.\n\nWhen V8 deserializes the snapshot, it would reserve the heap space first, and there is a hard limit on memory used by objects, so when the size of js file grows to a point where the memory used by objects on heap exceeds the size of one page (1mb), the V8 would just crash.\n\nTo fix it we have to change how V8 reserves heap space when deserializing the snapshot, but I need to learn much more about V8 to know how to actually do this. So I would like to try other methods first before doing the study of V8.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/34623377",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-34623377",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 34623377,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-02-10T11:53:54Z",
    "updated_at": "2014-02-10T11:53:54Z",
    "body": "Sounds reasonable. Glad you experimented with it!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62774948",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-62774948",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 62774948,
    "user": {
      "login": "yhwh",
      "id": 274100,
      "avatar_url": "https://avatars2.githubusercontent.com/u/274100?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yhwh",
      "html_url": "https://github.com/yhwh",
      "followers_url": "https://api.github.com/users/yhwh/followers",
      "following_url": "https://api.github.com/users/yhwh/following{/other_user}",
      "gists_url": "https://api.github.com/users/yhwh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yhwh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yhwh/subscriptions",
      "organizations_url": "https://api.github.com/users/yhwh/orgs",
      "repos_url": "https://api.github.com/users/yhwh/repos",
      "events_url": "https://api.github.com/users/yhwh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yhwh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-12T19:10:02Z",
    "updated_at": "2014-11-12T19:13:27Z",
    "body": "Dunno if you have seen that one https://github.com/v8/v8/commit/1c6b4a2fa8d717c8b38c15905b1c2bbbe9f10271\nSeems heap and deserializer are fixed...\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62808913",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-62808913",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 62808913,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-11-12T22:41:05Z",
    "updated_at": "2014-11-12T22:41:05Z",
    "body": "Thanks @yhwh! @zcbenz do the changes to v8 make snapshotting more feasible? I'm not currently clear how much of the start time is consumed by code loading/evaluation. @kevinsawicki probably is however.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62815756",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-62815756",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 62815756,
    "user": {
      "login": "yhwh",
      "id": 274100,
      "avatar_url": "https://avatars2.githubusercontent.com/u/274100?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yhwh",
      "html_url": "https://github.com/yhwh",
      "followers_url": "https://api.github.com/users/yhwh/followers",
      "following_url": "https://api.github.com/users/yhwh/following{/other_user}",
      "gists_url": "https://api.github.com/users/yhwh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yhwh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yhwh/subscriptions",
      "organizations_url": "https://api.github.com/users/yhwh/orgs",
      "repos_url": "https://api.github.com/users/yhwh/repos",
      "events_url": "https://api.github.com/users/yhwh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yhwh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-11-12T23:36:16Z",
    "updated_at": "2014-11-12T23:36:16Z",
    "body": "Also if it's doable, would be great to reopen the issue for the --snapshot option https://github.com/atom/atom-shell/issues/348 \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/62861947",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-62861947",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 62861947,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-11-13T09:11:46Z",
    "updated_at": "2014-11-13T09:11:46Z",
    "body": "That commit looks great! Chrome 38 hadn't included it yet, I'll revisit the snapshot feature when it gets included in Chrome.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/64855562",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-64855562",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 64855562,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-11-28T05:11:05Z",
    "updated_at": "2014-11-28T05:11:05Z",
    "body": "Good news here, Chromium has started to work on enabling loading V8's initial snapshot from external files, which is exactly what we wanted, and the progress can be tracked at:\nhttps://code.google.com/p/chromium/issues/detail?id=421063\n\nP.S. Staring the original issue can make it gain more attentions from Chromium developers.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/64990673",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-64990673",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 64990673,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-11-30T16:34:06Z",
    "updated_at": "2014-11-30T16:34:06Z",
    "body": "Starred it. Does this open up the ability to load the Atom initial environment and then snapshot it to a binary file we can load later? That seems like it could save a lot of time.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/65431549",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-65431549",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 65431549,
    "user": {
      "login": "yhwh",
      "id": 274100,
      "avatar_url": "https://avatars2.githubusercontent.com/u/274100?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yhwh",
      "html_url": "https://github.com/yhwh",
      "followers_url": "https://api.github.com/users/yhwh/followers",
      "following_url": "https://api.github.com/users/yhwh/following{/other_user}",
      "gists_url": "https://api.github.com/users/yhwh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yhwh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yhwh/subscriptions",
      "organizations_url": "https://api.github.com/users/yhwh/orgs",
      "repos_url": "https://api.github.com/users/yhwh/repos",
      "events_url": "https://api.github.com/users/yhwh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yhwh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-03T15:50:52Z",
    "updated_at": "2014-12-03T15:50:52Z",
    "body": "Starred it too...\nLinux and Mac support seems done already.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/65730434",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-65730434",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 65730434,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-12-05T00:43:16Z",
    "updated_at": "2014-12-05T00:43:16Z",
    "body": "When snapshotting, the JavaScript file can not access all native APIs like DOM or `require`, so it is not likely we could snapshot the initial Atom environment. However we should be able reduce module loading time greatly by storing module code in a huge global map in the snapshot file.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66217384",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-66217384",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 66217384,
    "user": {
      "login": "hachre",
      "id": 885304,
      "avatar_url": "https://avatars1.githubusercontent.com/u/885304?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hachre",
      "html_url": "https://github.com/hachre",
      "followers_url": "https://api.github.com/users/hachre/followers",
      "following_url": "https://api.github.com/users/hachre/following{/other_user}",
      "gists_url": "https://api.github.com/users/hachre/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hachre/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hachre/subscriptions",
      "organizations_url": "https://api.github.com/users/hachre/orgs",
      "repos_url": "https://api.github.com/users/hachre/repos",
      "events_url": "https://api.github.com/users/hachre/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hachre/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-09T00:56:29Z",
    "updated_at": "2014-12-09T00:56:29Z",
    "body": "If resolving the module locations during run-time is such a big problem wouldn't it be possible to write a build step that does this work \"offline\" at build time and then fills in the full paths into the actual js files?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76300137",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76300137",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76300137,
    "user": {
      "login": "yhwh",
      "id": 274100,
      "avatar_url": "https://avatars2.githubusercontent.com/u/274100?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yhwh",
      "html_url": "https://github.com/yhwh",
      "followers_url": "https://api.github.com/users/yhwh/followers",
      "following_url": "https://api.github.com/users/yhwh/following{/other_user}",
      "gists_url": "https://api.github.com/users/yhwh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yhwh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yhwh/subscriptions",
      "organizations_url": "https://api.github.com/users/yhwh/orgs",
      "repos_url": "https://api.github.com/users/yhwh/repos",
      "events_url": "https://api.github.com/users/yhwh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yhwh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-26T23:42:33Z",
    "updated_at": "2015-02-26T23:42:33Z",
    "body": "@hachre I bet it's what http://enclosejs.com/ does.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76336064",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76336064",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76336064,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-02-27T05:16:30Z",
    "updated_at": "2015-03-13T10:41:29Z",
    "body": "Implementer of the serializer/deserializer in V8 here.\n\nCode caching and custom heap snapshot are both features that have recently been completed.\n\nAs someone already mentioned, V8 already been using startup snapshot to speed up startup for years. Though the serializer/deserializer had a lot of of limitations that prevent general use. Those have been fixed recently.\n\nCode caching serializes the compiled JIT code of a top level script. When compiling a script via v8::ScripCompiler::Compile, you can request cache data. In a later call to it, you can provide that cache data. Usually deserializing is anywhere between 10 to 100 faster than parsing/compiling, depending on the script and code to be cached.\n\nThen there's the custom startup snapshot. You can create a snapshot data blob via v8::V8::CreateSnapshotDataBlob, and pass a script to run before producing the snapshot. You can then pass that snapshot to v8::Isolate::New to recreate the Isolate captured in the snapshot. However, since calls to C++ functions cannot be replayed, things like calls to require won't work. You could work around this particular issue by inlining the required scripts, but that's not really elegant. If your startup code takes a long time to run, this is a good way to avoid repeating the same execution by simply caching the result.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76617539",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76617539",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76617539,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-01T17:32:12Z",
    "updated_at": "2015-03-01T17:32:12Z",
    "body": "@yangguo-chromium-org Thanks for the information!\n\n> Code caching serializes the compiled JIT code of a top level script. When compiling a script via v8::ScripCompiler::Compile, you can request cache data. In a later call to it, you can provide that cache data. Usually deserializing is anywhere between 10 to 100 faster than paraing/compiling, depending on the script and code to be cached.\n\nThe last time (a few years ago) I looked into the compile cache I thought it only cached AST, it is amazing to know it can store compiled JIT code now.\n\nI'm not an expert on this, but is (or will) it possible to compile a script with only the compiled JIT code? It would be great for source code protection and performance if we don't need to provide the actual JavaScript source code.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76631456",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76631456",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76631456,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-01T21:20:05Z",
    "updated_at": "2015-03-01T21:20:05Z",
    "body": "@zcbenz: source protection is not an objective for v8, so it won't be supported out of the box. The source code is required for lazily compiled inner functions and for the optimizing compiler. If you disable both, the source code is not actually necessary, aside from some minor details that are easy to fix. AFAIK this is essentially what nw.js does.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76748081",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76748081",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76748081,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-02T16:45:27Z",
    "updated_at": "2015-03-02T16:45:27Z",
    "body": "@zcbenz What if we separated the DOM and native interactions into a second phase? Presumably `require` isn't an absolute requirement because we could concatenate the core scripts manually, or do something like `asar`... or am I missing something there?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76770812",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76770812",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76770812,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-02T18:27:52Z",
    "updated_at": "2015-03-02T18:27:52Z",
    "body": "> What if we separated the DOM and native interactions into a second phase?\n\n@nathansobo We don't have to do that, my idea of using snapshot feature is like this:\n\n1) Iterate all the JavaScript files and concatenate them into a single `snapshot_cache.js`:\n\n``` javascript\nvar __snapshotCache = {\n  'src/atom.js': function(exports, require, module, __filename, __dirname) {\n    ...\n  },\n  'src/buffered-node-process.js': function(exports, require, module, __filename, __dirname) {\n    ...\n  },\n  '...': function(exports, require, module, __filename, __dirname) {\n    ...\n  },\n};\n```\n\n2) Make a snapshot file from the concatenated file:\n\n``` bash\n$ mksnapshot snapshot_cache.js atom.snapshot\n```\n\nSince module's code are only compiled and not actually called, we won't have the problem of native functions not working in snapshot.\n\n3) Load the snapshot file in atom-shell, the `__snapshotCache` defined in  `snapshot_cache.js` will be available in window context:\n\n``` javascript\nwindow.__snapshotCache = { ... };\n```\n\n4) Monkey-patch the `require` function to make it read module source code from `window.__snapshotCache` instead of reading files and compiling strings.\n\nAnd we can go further by generating snapshot file when creating `asar` archive, and make atom-shell recognize snapshot file in `asar` archive, so users can get the speed for free. This can be quite complicated and we need to wait for at least Chrome 41.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76783481",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76783481",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76783481,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-02T19:05:19Z",
    "updated_at": "2015-03-02T19:05:19Z",
    "body": "Note that inner functions are usually compiled lazily. That means that those that are not called when creating the snapshot don't actually get their code compiled and included in the snapshot. That may be a good thing, or not, depending on whether you actually call it later. Of course you can also disable lazy compilation via --nolazy.\n\nI actually think the two-phase approach is better: start up atom as far as you can without calling the DOM, create the snapshot, and then use that as basis for the second phase.\n\nIf you just want to save compile time and have the compiled code ready, you might as well use the code cache instead of a full heap snapshot. The advantage of the heap snapshot is that you get not only compiled code without spending time compiling, but also the entire heap state without executing code to set it up.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76788418",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76788418",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76788418,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-02T19:18:54Z",
    "updated_at": "2015-03-02T19:18:54Z",
    "body": "@yangguo-chromium-org It is really helpful information, thanks a lot!\n\nAnd I have a question on using external snapshot file: Chromium is already shipping a `snapshot_blob.bin`, and it seems that V8 only supports one snapshot file, so does it matter if we replace Chromium's snapshot file with Atom's one? Or should we find out a way to combine Chromium's snapshot file with Atom's one?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76794549",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76794549",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76794549,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-02T19:38:40Z",
    "updated_at": "2015-03-02T19:38:40Z",
    "body": "@zcbenz I recently landed this: https://codereview.chromium.org/949623006/\n\nWith that, you can load an arbitrary snapshot blob into the memory and pass it via v8::Isolate::CreateParams when calling v8::Isolate::New. It will then use that snapshot to initialize the heap and as template to create each new context.\n\nBut maybe that's not even necessary. Afaik Chromium's snapshot file is a vanilla startup snapshot. So a custom snapshot is based on it either way.\n\nBtw. about that two-phase approach: you should include the function that does the DOM set up in the snapshot by defining the function, and calling it inside a try-catch. By referencing the DOM, you will get a ReferenceError that is caught, but the unsuccessful call will at least have caused the function to compile and end up in the startup snapshot.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76798273",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76798273",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76798273,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-02T19:52:05Z",
    "updated_at": "2015-03-02T19:52:05Z",
    "body": "Maybe to clarify: you can only use one snapshot to create an Isolate from. There is no way to use two isolates, if that's what you mean by having the Chromium snapshot and an additonal Atom snapshot. I'm not familiar with how Atom uses V8. If you have separate Isolates for Chromium and for Atom, then having two snapshots is the way to go. If you share one Isolate for both, then you probably want a snapshot that captures a state as far into starting up Atom as possible to speed up start up.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/76922362",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-76922362",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 76922362,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-03T10:36:18Z",
    "updated_at": "2015-03-03T10:36:18Z",
    "body": "I made a blog post for this. Maybe it helps.\nhttp://www.hashseed.net/2015/03/improving-v8s-performance-using.html\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/77039098",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-77039098",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 77039098,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-03T21:29:42Z",
    "updated_at": "2015-03-03T21:29:42Z",
    "body": "@yangguo-chromium-org It is awesome to have an updated blog on improving V8's performance, your perspective will help us a lot!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/78901164",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-78901164",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 78901164,
    "user": {
      "login": "yhwh",
      "id": 274100,
      "avatar_url": "https://avatars2.githubusercontent.com/u/274100?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yhwh",
      "html_url": "https://github.com/yhwh",
      "followers_url": "https://api.github.com/users/yhwh/followers",
      "following_url": "https://api.github.com/users/yhwh/following{/other_user}",
      "gists_url": "https://api.github.com/users/yhwh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yhwh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yhwh/subscriptions",
      "organizations_url": "https://api.github.com/users/yhwh/orgs",
      "repos_url": "https://api.github.com/users/yhwh/repos",
      "events_url": "https://api.github.com/users/yhwh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yhwh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-13T10:16:07Z",
    "updated_at": "2015-03-13T10:16:07Z",
    "body": "Hey guys just in case you missed it,\n nwjs has a new snapshotting tool called nwjc\nhttps://github.com/nwjs/v8/blob/nw12/src/nwjc.cc\nIt removes code size limitations of the nwsnapshot.\nhttps://github.com/nwjs/nw.js/wiki/Protect-JavaScript-source-code-with-v8-snapshot\nInteresting to see their approach with evalNWBin()\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/78902841",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-78902841",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 78902841,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-13T10:20:04Z",
    "updated_at": "2015-03-13T10:37:03Z",
    "body": "It's based on the same API described in my blog post. I've talked to @rogerwang about nwjs before.\n\nNote that the claim \"The compiled code runs slower than normal JS: ~30% performance according to v8bench.\" is only true if you want to \"protect\" the code by omitting source code. If you just use the API in the intended way, the optimizing compiler is not affected.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/81149332",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-81149332",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 81149332,
    "user": {
      "login": "YurySolovyov",
      "id": 2168518,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2168518?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YurySolovyov",
      "html_url": "https://github.com/YurySolovyov",
      "followers_url": "https://api.github.com/users/YurySolovyov/followers",
      "following_url": "https://api.github.com/users/YurySolovyov/following{/other_user}",
      "gists_url": "https://api.github.com/users/YurySolovyov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YurySolovyov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YurySolovyov/subscriptions",
      "organizations_url": "https://api.github.com/users/YurySolovyov/orgs",
      "repos_url": "https://api.github.com/users/YurySolovyov/repos",
      "events_url": "https://api.github.com/users/YurySolovyov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YurySolovyov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-15T16:45:21Z",
    "updated_at": "2015-03-15T16:45:21Z",
    "body": "on asar part:\nsince asar package header contains all filenames with their paths, Model._resolveFilename could be almost and instant, right? since you don't have to traverse filesystem, but only load data by offset\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/85486673",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-85486673",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 85486673,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-24T13:06:04Z",
    "updated_at": "2015-03-24T13:06:04Z",
    "body": "@yangguo-chromium-org \n\nI'm experimenting with the snapshot feature with Chrome 41 (V8 version v4.1.0.21), [this patch](https://chromium.googlesource.com/v8/v8/+/39cd762c6c1675304dc9a3ba9637ac405a6eb211%5E%21/) has been manually applied to enable embedding custom script.\n\nI generated the snapshot file with following command:\n\n``` bash\n$ mksnapshot output.cc --startup_blob snapshot_blob.bin jquery.js\n```\n\nAnd then I overwrite atom-shell's `snapshot_blob.bin` with the one generated by `mksnapshot`.\n\nWith simple scripts this works fine, I can see global variables correctly set. But after trying with big scripts, for example a big function that wraps the source code of jQuery, the `snapshot_blob.bin` is generated without errors, but when loading it in atom-shell I got following crash:\n\n```\nException Type:        EXC_BAD_ACCESS (SIGSEGV)\nException Codes:       KERN_INVALID_ADDRESS at 0x0000000000000227\n\nThread 0 Crashed:: Dispatch queue: com.apple.main-thread\n0   libchromiumcontent.dylib        0x000000010fa49c44 v8::Testing::DeoptimizeAll() + 1488788\n1   libchromiumcontent.dylib        0x000000010fa4c4c3 v8::Testing::DeoptimizeAll() + 1499155\n2   libchromiumcontent.dylib        0x000000010fa4d359 v8::Testing::DeoptimizeAll() + 1502889\n3   libchromiumcontent.dylib        0x000000010fc50a04 v8::Testing::DeoptimizeAll() + 3614036\n4   libchromiumcontent.dylib        0x000000010fb4af07 v8::Testing::DeoptimizeAll() + 2542167\n5   libchromiumcontent.dylib        0x000000010fc5a795 v8::Testing::DeoptimizeAll() + 3654373\n6   libchromiumcontent.dylib        0x000000010f8c59be v8::Isolate::New(v8::Isolate::CreateParams const&) + 174\n7   libchromiumcontent.dylib        0x000000011084a392 gin::IsolateHolder::IsolateHolder() + 242\n8   libchromiumcontent.dylib        0x000000010e302084 net::ProxyResolverV8::EnsureIsolateCreated() + 52\n```\n\nIt seems that the snapshot feature is still not able to load big objects? Or is there a change that required to make it work not available in Chrome 41?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/85496557",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-85496557",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 85496557,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-24T13:30:09Z",
    "updated_at": "2015-03-24T13:30:09Z",
    "body": "I'm pretty sure I fixed a bunch of smaller issues since 41. Also, please do not run from a snapshot when creating one.\n\nEmbedding jquery.js won't work, since embedding a script requires running it. What the snapshot captures is the heap state after the script has executed. Jquery accesses the window object, which mksnapshot does not offer.\n\nWhat you probably want instead is code caching, since it only compiles the code, but doesn't run it. Alternatively, you would have to refactor your code so that the snapshotted part does not access the window object.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/85499268",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-85499268",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 85499268,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-24T13:36:03Z",
    "updated_at": "2015-03-24T13:36:03Z",
    "body": "What I did is wrapping jQuery's source code inside a function like this:\n\n``` javascript\nvar a = function() {\n  // jQuery source code\n};\n```\n\nSo it will not actually run jQuery.\n\nI'll have a retry when Chrome 42 releases, thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/96119226",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-96119226",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 96119226,
    "user": {
      "login": "steelbrain",
      "id": 4278113,
      "avatar_url": "https://avatars2.githubusercontent.com/u/4278113?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/steelbrain",
      "html_url": "https://github.com/steelbrain",
      "followers_url": "https://api.github.com/users/steelbrain/followers",
      "following_url": "https://api.github.com/users/steelbrain/following{/other_user}",
      "gists_url": "https://api.github.com/users/steelbrain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/steelbrain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/steelbrain/subscriptions",
      "organizations_url": "https://api.github.com/users/steelbrain/orgs",
      "repos_url": "https://api.github.com/users/steelbrain/repos",
      "events_url": "https://api.github.com/users/steelbrain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/steelbrain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-04-25T01:38:53Z",
    "updated_at": "2015-04-25T01:38:53Z",
    "body": "Bump.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/106191217",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-106191217",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 106191217,
    "user": {
      "login": "steelbrain",
      "id": 4278113,
      "avatar_url": "https://avatars2.githubusercontent.com/u/4278113?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/steelbrain",
      "html_url": "https://github.com/steelbrain",
      "followers_url": "https://api.github.com/users/steelbrain/followers",
      "following_url": "https://api.github.com/users/steelbrain/following{/other_user}",
      "gists_url": "https://api.github.com/users/steelbrain/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/steelbrain/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/steelbrain/subscriptions",
      "organizations_url": "https://api.github.com/users/steelbrain/orgs",
      "repos_url": "https://api.github.com/users/steelbrain/repos",
      "events_url": "https://api.github.com/users/steelbrain/events{/privacy}",
      "received_events_url": "https://api.github.com/users/steelbrain/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-05-28T06:14:48Z",
    "updated_at": "2015-05-28T06:14:48Z",
    "body": "Looks like io.js has been working on this https://github.com/nodejs/io.js/commit/b14fd1a7202cd8001d1f6aed848445bad99ee15c  https://github.com/nodejs/io.js/commit/1bbf8d0720a061e281718f9e6a542da4268160b8\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111053875",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-111053875",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 111053875,
    "user": {
      "login": "subesokun",
      "id": 6920421,
      "avatar_url": "https://avatars3.githubusercontent.com/u/6920421?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subesokun",
      "html_url": "https://github.com/subesokun",
      "followers_url": "https://api.github.com/users/subesokun/followers",
      "following_url": "https://api.github.com/users/subesokun/following{/other_user}",
      "gists_url": "https://api.github.com/users/subesokun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subesokun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subesokun/subscriptions",
      "organizations_url": "https://api.github.com/users/subesokun/orgs",
      "repos_url": "https://api.github.com/users/subesokun/repos",
      "events_url": "https://api.github.com/users/subesokun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subesokun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T09:12:51Z",
    "updated_at": "2015-06-11T09:12:51Z",
    "body": "Sorry for the naive question, but would it be possible to snapshot also the heap of the BrowserWindow? I'd be interested in how to speed up the initial loading of the content of the BrowserWindow and it'd be awesome if I can snapshot also the initial heap of that window after loading all JS files. If that's possible, how could I create & load such snapshot?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111065282",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-111065282",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 111065282,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T09:36:24Z",
    "updated_at": "2015-06-11T09:36:24Z",
    "body": "I'm not familiar with atom itself. If BrowserWindow is a pure Javascript object, then this would work. If it however contain references to C++ for example via function templates, then no.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111109229",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-111109229",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 111109229,
    "user": {
      "login": "subesokun",
      "id": 6920421,
      "avatar_url": "https://avatars3.githubusercontent.com/u/6920421?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subesokun",
      "html_url": "https://github.com/subesokun",
      "followers_url": "https://api.github.com/users/subesokun/followers",
      "following_url": "https://api.github.com/users/subesokun/following{/other_user}",
      "gists_url": "https://api.github.com/users/subesokun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subesokun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subesokun/subscriptions",
      "organizations_url": "https://api.github.com/users/subesokun/orgs",
      "repos_url": "https://api.github.com/users/subesokun/repos",
      "events_url": "https://api.github.com/users/subesokun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subesokun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T12:07:58Z",
    "updated_at": "2015-06-11T12:07:58Z",
    "body": "@yangguo-chromium-org Thanks for the quick feedback. Is there actually some good documentation regarding the snapshot feature?\n\nI've played now a bit around with the `mksnapshot` tool. Initially I thought that electron builds already its own `snapshot_blob.bin` but so far this file gets only copied out of the `libchromiumcontent/static_library` folder. By just calling `mksnapshot output.cc --startup_blob snapshot_blob.bin` it creates a snapshot with a similar size as the one contained in the `static_library` folder so I wonder if this by default shipped snapshot is just an \"empty\" snapshot that gets created via the command mentioned above? \nThen I've tried to add a large JS file (1.1 MB) like `mksnapshot output.cc --startup_blob snapshot_blob.bin build.js` but it ended in a segmentation fault :( With some small JS file it completed without problems.\n\n```\n#\n# Fatal error in ../../v8/src/snapshot/mksnapshot.cc, line 163\n# Check failed: blob.data.\n#\n\n==== C stack trace ===============================\n\n 1: 0x9ffe8f\n 2: 0x44c136\n 3: __libc_start_main\n 4: 0x44bd11\nIllegal instruction (core dumped)\n```\n\nBasically if I'm able to include my JS file into this `snapshot_blob.bin` it will be loaded during initialization of the V8 or? But does that also mean that this heap will be available within the BrowserWindow context or will it have its own separated heap as a new window gets created...?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111113709",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-111113709",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 111113709,
    "user": {
      "login": "subesokun",
      "id": 6920421,
      "avatar_url": "https://avatars3.githubusercontent.com/u/6920421?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subesokun",
      "html_url": "https://github.com/subesokun",
      "followers_url": "https://api.github.com/users/subesokun/followers",
      "following_url": "https://api.github.com/users/subesokun/following{/other_user}",
      "gists_url": "https://api.github.com/users/subesokun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subesokun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subesokun/subscriptions",
      "organizations_url": "https://api.github.com/users/subesokun/orgs",
      "repos_url": "https://api.github.com/users/subesokun/repos",
      "events_url": "https://api.github.com/users/subesokun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subesokun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T12:22:03Z",
    "updated_at": "2015-06-11T12:22:03Z",
    "body": "Oh wow it actually works! I've added React.js to the snapshot and even without loading the library I can access it in the BrowserWindow :) \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111113984",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-111113984",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 111113984,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T12:22:52Z",
    "updated_at": "2015-06-11T12:26:24Z",
    "body": "mksnapshot produces a default snapshot if you don't provide any additional file, which is the usual snapshot what v8 uses. If you pass a script to it, it will be run before taking the snapshot. When you create a new context from that snapshot, it would be as if you ran that script immediate after creating that context, but skipping parsing, compiling and actually executing it.\n\nHowever, there are some limitations: typed arrays and function templates cannot be serialized. Also, snapshotting obviously fails if the script throws an uncaught exception. The failure you are seeing is an assertion failure, and not a real crash. You can check by running that script on a vanilla d8 (with default snapshot) to see whether it runs through. Or maybe you are running into a bug, in which case it would be great if you could file a bug :)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111139479",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-111139479",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 111139479,
    "user": {
      "login": "subesokun",
      "id": 6920421,
      "avatar_url": "https://avatars3.githubusercontent.com/u/6920421?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/subesokun",
      "html_url": "https://github.com/subesokun",
      "followers_url": "https://api.github.com/users/subesokun/followers",
      "following_url": "https://api.github.com/users/subesokun/following{/other_user}",
      "gists_url": "https://api.github.com/users/subesokun/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/subesokun/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/subesokun/subscriptions",
      "organizations_url": "https://api.github.com/users/subesokun/orgs",
      "repos_url": "https://api.github.com/users/subesokun/repos",
      "events_url": "https://api.github.com/users/subesokun/events{/privacy}",
      "received_events_url": "https://api.github.com/users/subesokun/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T13:42:41Z",
    "updated_at": "2015-06-11T13:42:41Z",
    "body": "@yangguo-chromium-org I'll try to find the piece of code that breaks the mksnapshot. Where should I file the bug (if I find any)?. Just to clarify, in case I've added e.g. React.js to the snapshot then I've to remove also the script tag which would usually load this library within my index.html or? I've noticed that if I don't remove it then I don't see any loading speed improvements which might be obvious as it tries to load it again during runtime...\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/111140444",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-111140444",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 111140444,
    "user": {
      "login": "hashseed",
      "id": 2291463,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2291463?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hashseed",
      "html_url": "https://github.com/hashseed",
      "followers_url": "https://api.github.com/users/hashseed/followers",
      "following_url": "https://api.github.com/users/hashseed/following{/other_user}",
      "gists_url": "https://api.github.com/users/hashseed/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hashseed/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hashseed/subscriptions",
      "organizations_url": "https://api.github.com/users/hashseed/orgs",
      "repos_url": "https://api.github.com/users/hashseed/repos",
      "events_url": "https://api.github.com/users/hashseed/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hashseed/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-11T13:45:56Z",
    "updated_at": "2015-06-11T13:46:15Z",
    "body": "@subesokun please file V8 bugs to https://code.google.com/p/v8/issues/entry\n\nIf you include React.js again in the script tag, you will load it again, in addition to what's already in the context, from the snapshot. This may be benign, as that would be as if you loaded the script twice. But of course you don't get any benefits either.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/114376131",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-114376131",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 114376131,
    "user": {
      "login": "YurySolovyov",
      "id": 2168518,
      "avatar_url": "https://avatars3.githubusercontent.com/u/2168518?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YurySolovyov",
      "html_url": "https://github.com/YurySolovyov",
      "followers_url": "https://api.github.com/users/YurySolovyov/followers",
      "following_url": "https://api.github.com/users/YurySolovyov/following{/other_user}",
      "gists_url": "https://api.github.com/users/YurySolovyov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YurySolovyov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YurySolovyov/subscriptions",
      "organizations_url": "https://api.github.com/users/YurySolovyov/orgs",
      "repos_url": "https://api.github.com/users/YurySolovyov/repos",
      "events_url": "https://api.github.com/users/YurySolovyov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YurySolovyov/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-06-23T06:25:22Z",
    "updated_at": "2015-06-23T06:25:22Z",
    "body": "one more speed-up [just landed](https://github.com/nodejs/io.js/commit/8e53fd537193dcee3622df10e9f45028058a3477) in io.js\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195376300",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195376300",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195376300,
    "user": {
      "login": "ArekSredzki",
      "id": 879918,
      "avatar_url": "https://avatars1.githubusercontent.com/u/879918?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArekSredzki",
      "html_url": "https://github.com/ArekSredzki",
      "followers_url": "https://api.github.com/users/ArekSredzki/followers",
      "following_url": "https://api.github.com/users/ArekSredzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArekSredzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArekSredzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArekSredzki/subscriptions",
      "organizations_url": "https://api.github.com/users/ArekSredzki/orgs",
      "repos_url": "https://api.github.com/users/ArekSredzki/repos",
      "events_url": "https://api.github.com/users/ArekSredzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArekSredzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T14:01:46Z",
    "updated_at": "2016-03-11T15:55:24Z",
    "body": "Quick question to help me with a thought experiment about this:\nIs the BrowserWindow require synchronous/blocking on the main thread?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195419947",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195419947",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195419947,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-03-11T15:39:19Z",
    "updated_at": "2016-03-11T15:39:19Z",
    "body": "@ArekSredzki If I understand your question correctly, the answer is yes. Interaction with remote requires is synchronous.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195428469",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195428469",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195428469,
    "user": {
      "login": "ArekSredzki",
      "id": 879918,
      "avatar_url": "https://avatars1.githubusercontent.com/u/879918?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArekSredzki",
      "html_url": "https://github.com/ArekSredzki",
      "followers_url": "https://api.github.com/users/ArekSredzki/followers",
      "following_url": "https://api.github.com/users/ArekSredzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArekSredzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArekSredzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArekSredzki/subscriptions",
      "organizations_url": "https://api.github.com/users/ArekSredzki/orgs",
      "repos_url": "https://api.github.com/users/ArekSredzki/repos",
      "events_url": "https://api.github.com/users/ArekSredzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArekSredzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T16:01:46Z",
    "updated_at": "2016-03-11T16:01:46Z",
    "body": "@nathansobo Thanks. If we promisify remote requires (I plan to implement this as an option for ipc messages anyway), then couldn't we have the atom modules perform asynchronously, and more specifically, in parallel?\n\nAlso, in general, what's the dependency hierarchy tree for these require operations like (at least on the browser side)? If there is one that is.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195482983",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195482983",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195482983,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-03-11T18:12:08Z",
    "updated_at": "2016-03-11T18:12:08Z",
    "body": "@ArekSredzki I think I did misunderstand slightly. All requires are synchronous. The synchronous behavior I was referring to is just that calling methods on the remote requires results in synchronous IPCs. I think we have at least one of these sync calls in our critical startup path however.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195487509",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195487509",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195487509,
    "user": {
      "login": "ArekSredzki",
      "id": 879918,
      "avatar_url": "https://avatars1.githubusercontent.com/u/879918?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArekSredzki",
      "html_url": "https://github.com/ArekSredzki",
      "followers_url": "https://api.github.com/users/ArekSredzki/followers",
      "following_url": "https://api.github.com/users/ArekSredzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArekSredzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArekSredzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArekSredzki/subscriptions",
      "organizations_url": "https://api.github.com/users/ArekSredzki/orgs",
      "repos_url": "https://api.github.com/users/ArekSredzki/repos",
      "events_url": "https://api.github.com/users/ArekSredzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArekSredzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T18:22:47Z",
    "updated_at": "2016-03-11T18:22:47Z",
    "body": "@nathansobo Sorry for not making myself clear, the idea that I'm exploring is whether making the IPC/renderer part of remote `require` calls asynchronous would accelerate boot up as one plugin could be initializing in the renderer thread, while another one is waiting on it's remote require to return from the sync `require()` that is running behind the scenes in the main process.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195487980",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195487980",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195487980,
    "user": {
      "login": "ArekSredzki",
      "id": 879918,
      "avatar_url": "https://avatars1.githubusercontent.com/u/879918?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArekSredzki",
      "html_url": "https://github.com/ArekSredzki",
      "followers_url": "https://api.github.com/users/ArekSredzki/followers",
      "following_url": "https://api.github.com/users/ArekSredzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArekSredzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArekSredzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArekSredzki/subscriptions",
      "organizations_url": "https://api.github.com/users/ArekSredzki/orgs",
      "repos_url": "https://api.github.com/users/ArekSredzki/repos",
      "events_url": "https://api.github.com/users/ArekSredzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArekSredzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T18:24:40Z",
    "updated_at": "2016-03-11T18:24:40Z",
    "body": "Essentially, the idea is to free up the renderer thread to do real computation and ensure fluid UX while the main thread deals with the only part of the require call that actually \"has\" to be synchronous.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195495568",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195495568",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195495568,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T18:49:31Z",
    "updated_at": "2016-03-11T18:49:31Z",
    "body": "@ArekSredzki This might help but probably not as much as you think because blocking the main process will hurt render process UI performance even if render process isn't explicitly blocking on something in JS. There are lots of Chromium calls that depend on ensuring that a message has been delivered to the main process and all of those will block too while the main process is busy\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195518137",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195518137",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195518137,
    "user": {
      "login": "ArekSredzki",
      "id": 879918,
      "avatar_url": "https://avatars1.githubusercontent.com/u/879918?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArekSredzki",
      "html_url": "https://github.com/ArekSredzki",
      "followers_url": "https://api.github.com/users/ArekSredzki/followers",
      "following_url": "https://api.github.com/users/ArekSredzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArekSredzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArekSredzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArekSredzki/subscriptions",
      "organizations_url": "https://api.github.com/users/ArekSredzki/orgs",
      "repos_url": "https://api.github.com/users/ArekSredzki/repos",
      "events_url": "https://api.github.com/users/ArekSredzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArekSredzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T19:44:11Z",
    "updated_at": "2016-03-11T19:44:11Z",
    "body": "@paulcbetts Good point.\n\nHowever, the magic of node would allow the main process to continue responding to these requests while `require` is waiting on IO, would it not?\n\nIf not, it might be worth spinning up a child_process for this kind of thing.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195522848",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195522848",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195522848,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T19:58:52Z",
    "updated_at": "2016-03-11T19:58:52Z",
    "body": "@ArekSredzki No, `require` is all synchronous everything :(\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/195533181",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-195533181",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 195533181,
    "user": {
      "login": "ArekSredzki",
      "id": 879918,
      "avatar_url": "https://avatars1.githubusercontent.com/u/879918?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArekSredzki",
      "html_url": "https://github.com/ArekSredzki",
      "followers_url": "https://api.github.com/users/ArekSredzki/followers",
      "following_url": "https://api.github.com/users/ArekSredzki/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArekSredzki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArekSredzki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArekSredzki/subscriptions",
      "organizations_url": "https://api.github.com/users/ArekSredzki/orgs",
      "repos_url": "https://api.github.com/users/ArekSredzki/repos",
      "events_url": "https://api.github.com/users/ArekSredzki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArekSredzki/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-11T20:23:09Z",
    "updated_at": "2016-03-11T21:54:13Z",
    "body": "Sad days :cry: \n\nAnd having a separate internal child process for handing blocking tasks?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212709103",
    "html_url": "https://github.com/electron/electron/issues/169#issuecomment-212709103",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/169",
    "id": 212709103,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-04-21T03:00:26Z",
    "updated_at": "2016-04-21T03:00:26Z",
    "body": "I'm closing this now since we basically did every solution we can try. For people interested in making `require` faster, you can check the `NativeCompileCache` class in Atom:\nhttps://github.com/atom/atom/blob/f48069c5f848b5ae624b110a1df7800e919eb142/src/native-compile-cache.js\n"
  }
]