[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/53759579",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-53759579",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 53759579,
    "user": {
      "login": "jonathanhardie",
      "id": 477179,
      "avatar_url": "https://avatars3.githubusercontent.com/u/477179?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonathanhardie",
      "html_url": "https://github.com/jonathanhardie",
      "followers_url": "https://api.github.com/users/jonathanhardie/followers",
      "following_url": "https://api.github.com/users/jonathanhardie/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonathanhardie/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonathanhardie/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonathanhardie/subscriptions",
      "organizations_url": "https://api.github.com/users/jonathanhardie/orgs",
      "repos_url": "https://api.github.com/users/jonathanhardie/repos",
      "events_url": "https://api.github.com/users/jonathanhardie/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonathanhardie/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-08-28T17:19:55Z",
    "updated_at": "2014-08-28T17:19:55Z",
    "body": "Related: I'm trying to run the node-zopfli native module inside atom-shell 0.15.9 on win32, but I get a message \"Error: Module did not self-register.\" \n\nIt seems there are some incompatibilities at present.  I got the same error with a more basic \"hello world\" native module.  \n\nHowever, the darwin x64 version of the same modules work inside the same version of Atom-shell on OS X, and I'm able to run them from regular command-line node 0.11.13 on windows.  So it seems the incompatibility is restricted to Atom-shell on Windows.  \n\nAny ideas on what might be causing this would be great!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/54776196",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-54776196",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 54776196,
    "user": {
      "login": "springmeyer",
      "id": 20300,
      "avatar_url": "https://avatars2.githubusercontent.com/u/20300?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/springmeyer",
      "html_url": "https://github.com/springmeyer",
      "followers_url": "https://api.github.com/users/springmeyer/followers",
      "following_url": "https://api.github.com/users/springmeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/springmeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/springmeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/springmeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/springmeyer/orgs",
      "repos_url": "https://api.github.com/users/springmeyer/repos",
      "events_url": "https://api.github.com/users/springmeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/springmeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-08T04:40:34Z",
    "updated_at": "2014-09-08T04:40:34Z",
    "body": "@zcbenz would appreciate if you would share the intent of atom-shell in terms of binary compatibility with node.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/54788216",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-54788216",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 54788216,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-09-08T08:16:49Z",
    "updated_at": "2014-09-08T08:16:49Z",
    "body": "Sorry for the late reply.\n\nAtom Shell is using the V8 shipped by Chromium, which is usually much newer than the V8 used by Node, and the differences are big enough to make native modules compiled for atom-shell and Node not compatible. I'm afraid this incompatiblity is not going to change because we can not force Chromium to be built with older V8.\n\nThe `process.arch='ia32'` problem had already been fixed by https://github.com/atom/atom-shell/pull/537.\n\nI don't how much about `node-pre-gyp`, but if you want to support atom-shell, you may have to compile the modules for each release of atom-shell instead of Node. The way to compile module for atom-shell is quite simple though, using standard `npm` and `node-gyp` is enough and you only need to change target and dist-url: https://github.com/atom/atom-shell/blob/master/docs/tutorial/use-native-node-modules.md#the-node-gyp-way.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56209512",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56209512",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56209512,
    "user": {
      "login": "springmeyer",
      "id": 20300,
      "avatar_url": "https://avatars2.githubusercontent.com/u/20300?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/springmeyer",
      "html_url": "https://github.com/springmeyer",
      "followers_url": "https://api.github.com/users/springmeyer/followers",
      "following_url": "https://api.github.com/users/springmeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/springmeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/springmeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/springmeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/springmeyer/orgs",
      "repos_url": "https://api.github.com/users/springmeyer/repos",
      "events_url": "https://api.github.com/users/springmeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/springmeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-19T17:38:42Z",
    "updated_at": "2014-09-19T17:38:42Z",
    "body": "@zcbenz - thanks for the thoughts and details. I will take a look at supporting atom-shell with `node-pre-gyp` then in the same way as node-webkit. `node-pre-gyp` will therefore **not expect** binary compatibility and will instead support a new `runtime` named `atom` in order to allow packages to explicitly target it. My hope would be that in the future ABI compatibility with node would obsolete this but I understand that is not something you can promise at this time.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56212074",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56212074",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56212074,
    "user": {
      "login": "springmeyer",
      "id": 20300,
      "avatar_url": "https://avatars2.githubusercontent.com/u/20300?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/springmeyer",
      "html_url": "https://github.com/springmeyer",
      "followers_url": "https://api.github.com/users/springmeyer/followers",
      "following_url": "https://api.github.com/users/springmeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/springmeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/springmeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/springmeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/springmeyer/orgs",
      "repos_url": "https://api.github.com/users/springmeyer/repos",
      "events_url": "https://api.github.com/users/springmeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/springmeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-19T17:58:59Z",
    "updated_at": "2014-09-19T17:58:59Z",
    "body": "@zcbenz one critical thing to make packaging separate binaries viable for atom-shell is a meaningful `process.versions.modules` value. Are you familiar with this in node core? It is bumped whenever a change is made that breaks ABI for node addons, whether due to a v8 upgrade or something else. You can see, for example, that the node v0.10.x series [never reported a brake in ABI](https://github.com/mapbox/node-pre-gyp/blob/master/lib/util/abi_crosswalk.json#L290-L417) and because of this it allows node-pre-gyp packages modules to work perfectly across node 0.10.0->0.10.31 irregardless of the node v0.10.x version the module was originally compiled against. In raising this issue I'm not requesting that you don't break ABI in atom-shell but rather that when you do you increment the `process.versions.modules` value so that node-pre-gyp package modules can dynamically adapt and require rebuilt binaries only when needed.\n\nFor a little more background on see the bottom of @rvagg's comment at https://github.com/npm/npm/issues/1891#issuecomment-17051356\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56256426",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56256426",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56256426,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-09-20T04:21:35Z",
    "updated_at": "2014-09-20T04:21:35Z",
    "body": "Thanks for supporting atom-shell in node-pre-gyp!\n\n`process.versions.modules` is defined as `NODE_MODULE_VERSION` in `node_version.h`, and I will increase it whenever atom-shell breaks ABI in following releases.\n\nAlso atom-shell publishes releases much faster than Node, so defining `node_abi` for every release of atom-shell would be a great burden. I can guarantee the minor version of atom-shell increases when the ABI is broken, so using atom-shell's `major.minor` version string instead of `process.versions.modules` as `node_abi` might simplify node-pre-gyp's building strategies, though a minor version update doesn't always mean an ABI breakage.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56315459",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56315459",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56315459,
    "user": {
      "login": "springmeyer",
      "id": 20300,
      "avatar_url": "https://avatars2.githubusercontent.com/u/20300?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/springmeyer",
      "html_url": "https://github.com/springmeyer",
      "followers_url": "https://api.github.com/users/springmeyer/followers",
      "following_url": "https://api.github.com/users/springmeyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/springmeyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/springmeyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/springmeyer/subscriptions",
      "organizations_url": "https://api.github.com/users/springmeyer/orgs",
      "repos_url": "https://api.github.com/users/springmeyer/repos",
      "events_url": "https://api.github.com/users/springmeyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/springmeyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-21T22:38:15Z",
    "updated_at": "2014-09-21T22:38:15Z",
    "body": "> process.versions.modules is defined as NODE_MODULE_VERSION in node_version.h, and I will increase it whenever atom-shell breaks ABI in following releases.\n\nFantastic - thank you.\n\n> Also atom-shell publishes releases much faster than Node, so defining node_abi for every release of atom-shell would be a great burden.\n\nInternally `node-pre-gyp` exposes `process.versions.modules` as the `node_abi` keyword in the versioning string. So they are equivalent except for old versions of node before it existed and in that case node-pre-gyp falls back to the v8 major.minor. So, I think we are A-okay as long as you can provide a consistently meaningful `process.versions.modules`.\n\n> I can guarantee the minor version of atom-shell increases when the ABI is broken, so using atom-shell's major.minor version string instead of process.versions.modules as node_abi might simplify node-pre-gyp's building strategies, though a minor version update doesn't always mean an ABI breakage.\n\nRight. I'm open to all options. But I've felt it was wise of the node project to go with `process.versions.modules` instead of having to consistently have `major.minor` be a promise about ABI for node_modules. So, I would recommend you follow that and not worry about C++ ABI in relation to semver even if for most releases they are functionally the same.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56646203",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56646203",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56646203,
    "user": {
      "login": "Mithgol",
      "id": 1088720,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1088720?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mithgol",
      "html_url": "https://github.com/Mithgol",
      "followers_url": "https://api.github.com/users/Mithgol/followers",
      "following_url": "https://api.github.com/users/Mithgol/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mithgol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mithgol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mithgol/subscriptions",
      "organizations_url": "https://api.github.com/users/Mithgol/orgs",
      "repos_url": "https://api.github.com/users/Mithgol/repos",
      "events_url": "https://api.github.com/users/Mithgol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mithgol/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-24T09:32:12Z",
    "updated_at": "2014-09-24T09:32:12Z",
    "body": "@zcbenz\n\nI have yet another question that is related to builds' testing.\n\nBinaries targeting node-webkit are currently tested in node-pre-gyp by loading such binaries in a minimal application (that consists only of a [`package.json`](https://github.com/mapbox/node-pre-gyp/blob/master/lib/util/nw-pre-gyp/package.json) manifest and an [`index.html`](https://github.com/mapbox/node-pre-gyp/blob/master/lib/util/nw-pre-gyp/index.html) file), and if it crashes, the binaries fail the test.\n\nBinaries targeting Node.js are currently tested in node-pre-gyp by simply running [`node --eval require(…)`](https://github.com/mapbox/node-pre-gyp/blob/a5cfbd1e8012ba8c2c2be0fdcba30c36ef1db1a1/lib/testbinary.js#L62-65) with their path in parentheses.\n\nDoes atom-shell have a command-line interface to run some JavaScript (like `node --eval`)? Or would it require some application (just `package.json` and `main.js`, I presume)?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56659788",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56659788",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56659788,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-09-24T12:04:53Z",
    "updated_at": "2014-09-24T12:04:53Z",
    "body": "By setting the env `ATOM_SHELL_INTERNAL_RUN_AS_NODE` to `1` atom-shell can run in node mode, which behaves exactly the same with upstream node, like this:\n\n``` bash\n$ env ATOM_SHELL_INTERNAL_RUN_AS_NODE=1 ./atom --eval \"require('...')\"\n```\n\nThe node mode uses the same ABI with normal mode, so it can be used for testing native module compatibility.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56715585",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56715585",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56715585,
    "user": {
      "login": "Mithgol",
      "id": 1088720,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1088720?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mithgol",
      "html_url": "https://github.com/Mithgol",
      "followers_url": "https://api.github.com/users/Mithgol/followers",
      "following_url": "https://api.github.com/users/Mithgol/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mithgol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mithgol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mithgol/subscriptions",
      "organizations_url": "https://api.github.com/users/Mithgol/orgs",
      "repos_url": "https://api.github.com/users/Mithgol/repos",
      "events_url": "https://api.github.com/users/Mithgol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mithgol/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-24T18:23:09Z",
    "updated_at": "2014-09-24T18:23:55Z",
    "body": "Can some --switch change that mode from the command line?\n\n(`env` solution is fine on most systems, but on Windows `set test=passed && echo %test%` echoes `%test%` on the first run and thus it seems there's no room for a one-liner unless I misunderstand something, which is quite possible.)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/56716144",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-56716144",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 56716144,
    "user": {
      "login": "Mithgol",
      "id": 1088720,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1088720?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mithgol",
      "html_url": "https://github.com/Mithgol",
      "followers_url": "https://api.github.com/users/Mithgol/followers",
      "following_url": "https://api.github.com/users/Mithgol/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mithgol/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mithgol/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mithgol/subscriptions",
      "organizations_url": "https://api.github.com/users/Mithgol/orgs",
      "repos_url": "https://api.github.com/users/Mithgol/repos",
      "events_url": "https://api.github.com/users/Mithgol/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mithgol/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-09-24T18:26:59Z",
    "updated_at": "2014-09-24T18:29:19Z",
    "body": "On the second thought, never mind.\n\nI've just remembered that [`child_process.execFile`](http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) is able to modify the environment of its child.\n\nTherefore (even on Windows) the command itself would take only one line (if `options.env` is set to `{'ATOM_SHELL_INTERNAL_RUN_AS_NODE': '1'}` for `.execFile`).\n\nGood.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/193650303",
    "html_url": "https://github.com/electron/electron/issues/533#issuecomment-193650303",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/533",
    "id": 193650303,
    "user": {
      "login": "stefanKuijers",
      "id": 1039326,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1039326?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stefanKuijers",
      "html_url": "https://github.com/stefanKuijers",
      "followers_url": "https://api.github.com/users/stefanKuijers/followers",
      "following_url": "https://api.github.com/users/stefanKuijers/following{/other_user}",
      "gists_url": "https://api.github.com/users/stefanKuijers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stefanKuijers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stefanKuijers/subscriptions",
      "organizations_url": "https://api.github.com/users/stefanKuijers/orgs",
      "repos_url": "https://api.github.com/users/stefanKuijers/repos",
      "events_url": "https://api.github.com/users/stefanKuijers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stefanKuijers/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-08T07:37:21Z",
    "updated_at": "2016-03-08T07:37:21Z",
    "body": "Updated link that zbencz posted in his first reply: https://github.com/atom/electron/blob/master/docs/tutorial/using-native-node-modules.md\n"
  }
]