[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208095207",
    "html_url": "https://github.com/electron/electron/issues/5090#issuecomment-208095207",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5090",
    "id": 208095207,
    "user": {
      "login": "bengotow",
      "id": 1037212,
      "avatar_url": "https://avatars0.githubusercontent.com/u/1037212?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bengotow",
      "html_url": "https://github.com/bengotow",
      "followers_url": "https://api.github.com/users/bengotow/followers",
      "following_url": "https://api.github.com/users/bengotow/following{/other_user}",
      "gists_url": "https://api.github.com/users/bengotow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bengotow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bengotow/subscriptions",
      "organizations_url": "https://api.github.com/users/bengotow/orgs",
      "repos_url": "https://api.github.com/users/bengotow/repos",
      "events_url": "https://api.github.com/users/bengotow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bengotow/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-10T23:55:35Z",
    "updated_at": "2016-04-10T23:55:35Z",
    "body": "Hi @parro-it — by `remote-require`, you mean saying `require('electron').remote.require....`?\n\nWhen you require through the remote module, node no longer knows that `require` is being called from a path within your module, so `node_modules/A/node_modules` is no longer in the search path. I think you're correct that it works in NPM 3 because it happens to flatten everything into the top level node_modules directory. (Providing that no other node module in the project required the same file.)\n\nI think there are a couple ways to fix this. You could require that the user of your node module add a few lines to their main process code to require B and put it on global scope. Then you could use it via `require('electron').remote.getGlobal('B')`.\n\nYou could also call require with the absolute path to load rather than the global module name. This is tricky because you'd have to find the module first, but might be something like: `require('electron').remote.require(path.join(__dirname,'..', 'node_modules', 'B'))`\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208189463",
    "html_url": "https://github.com/electron/electron/issues/5090#issuecomment-208189463",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5090",
    "id": 208189463,
    "user": {
      "login": "parro-it",
      "id": 11197111,
      "avatar_url": "https://avatars1.githubusercontent.com/u/11197111?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/parro-it",
      "html_url": "https://github.com/parro-it",
      "followers_url": "https://api.github.com/users/parro-it/followers",
      "following_url": "https://api.github.com/users/parro-it/following{/other_user}",
      "gists_url": "https://api.github.com/users/parro-it/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parro-it/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parro-it/subscriptions",
      "organizations_url": "https://api.github.com/users/parro-it/orgs",
      "repos_url": "https://api.github.com/users/parro-it/repos",
      "events_url": "https://api.github.com/users/parro-it/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parro-it/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T07:00:39Z",
    "updated_at": "2016-04-11T07:00:39Z",
    "body": "> Hi @parro-it — by remote-require, you mean saying require('electron').remote.require....?\n\nYes, exactly that.\n\n> You could also call require with the absolute path to load rather than the global module name. This is > tricky because you'd have to find the module first, but might be something like:  require('electron').remote.require(path.join(__dirname,'..', 'node_modules', 'B'))\n\nThis could be automated using `require.resolve` in renderer. I think it could be useful if electron provides this solution automatically.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208297766",
    "html_url": "https://github.com/electron/electron/issues/5090#issuecomment-208297766",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5090",
    "id": 208297766,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-04-11T11:30:31Z",
    "updated_at": "2016-04-11T11:30:31Z",
    "body": "`remote.require` means calling `require` in the main process, so it will search for modules in the search paths of the main process. If we change this behavior unexpected things may happen, like `remote.require` returning different things from the `require` in the main process.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/208311546",
    "html_url": "https://github.com/electron/electron/issues/5090#issuecomment-208311546",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5090",
    "id": 208311546,
    "user": {
      "login": "parro-it",
      "id": 11197111,
      "avatar_url": "https://avatars1.githubusercontent.com/u/11197111?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/parro-it",
      "html_url": "https://github.com/parro-it",
      "followers_url": "https://api.github.com/users/parro-it/followers",
      "following_url": "https://api.github.com/users/parro-it/following{/other_user}",
      "gists_url": "https://api.github.com/users/parro-it/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/parro-it/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/parro-it/subscriptions",
      "organizations_url": "https://api.github.com/users/parro-it/orgs",
      "repos_url": "https://api.github.com/users/parro-it/repos",
      "events_url": "https://api.github.com/users/parro-it/events{/privacy}",
      "received_events_url": "https://api.github.com/users/parro-it/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-11T12:11:19Z",
    "updated_at": "2016-04-11T12:11:19Z",
    "body": "Thank you @zcbenz. \nI'm not convinced this would be \"unexpected\", I think the actual implementation is a bit surprising (at least to me).\n\nAnyway, this could be easy to solve within user code, by providing module full path as @bengotow suggested. \n\nOne last question: where does the search paths of the main process starts from? It's the path of the first loaded module? Or the `package.json`? Or other one?\n\nthank you\n"
  }
]