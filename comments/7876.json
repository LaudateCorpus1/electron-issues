[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258479270",
    "html_url": "https://github.com/electron/electron/issues/7876#issuecomment-258479270",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7876",
    "id": 258479270,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-11-04T16:26:28Z",
    "updated_at": "2016-11-04T16:26:28Z",
    "body": "> Is there any way to submit crash reports for these sports of basic Javascript errors?\n\nThe crash reporter module sends minidump formatted reports and there is no way to convert a JavaScript error stack trace to one of those. The `crashReporter` module is intended for crashes and not uncaught errors.\n\nYou can use `process.on('uncaughtException')` in both the main and renderer processes to catch these errors and forward them to an exception tracker like BugSnag, Sentry, or Google Analytics to collect/analyze them.\n\n> At the very least it would be good to have a stack trace but process.on('uncaughtException') doesn't seem to show anything.\n\nHmm, which process are you registering that on? That technique should work and provide a stack trace, can you provide a small app that reproduces the issue? Thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258576809",
    "html_url": "https://github.com/electron/electron/issues/7876#issuecomment-258576809",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7876",
    "id": 258576809,
    "user": {
      "login": "MrBlenny",
      "id": 9685048,
      "avatar_url": "https://avatars1.githubusercontent.com/u/9685048?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MrBlenny",
      "html_url": "https://github.com/MrBlenny",
      "followers_url": "https://api.github.com/users/MrBlenny/followers",
      "following_url": "https://api.github.com/users/MrBlenny/following{/other_user}",
      "gists_url": "https://api.github.com/users/MrBlenny/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MrBlenny/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MrBlenny/subscriptions",
      "organizations_url": "https://api.github.com/users/MrBlenny/orgs",
      "repos_url": "https://api.github.com/users/MrBlenny/repos",
      "events_url": "https://api.github.com/users/MrBlenny/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MrBlenny/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-05T00:13:18Z",
    "updated_at": "2016-11-05T00:36:15Z",
    "body": "I've managed to narrow the issue down.\n\nTry `npm install sql.js` and import/require it in the electron main thread. \n\nThen, throw an error with `setTimeout(()=>{console.log(thisVarIsUndefined)})`.\nThis error will not be caught and will fail with no trace.\nInterestingly, if you just do `console.log(thisVarIsUndefined)` or any purely synchronous code there will be a trace.\n\nIf that doesn't work - clone this repo https://github.com/MrBlenny/Electron-Sql-js-Error-Bug\n\nThe sql.js library works fine but somehow seems to break electron's stack trace (at least it does on windows).\n\nShould I make a separate issue for this? It seems like this is an electron issue rather than a sql.js issue.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258944569",
    "html_url": "https://github.com/electron/electron/issues/7876#issuecomment-258944569",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7876",
    "id": 258944569,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-11-07T19:56:27Z",
    "updated_at": "2016-11-07T19:56:59Z",
    "body": "> It seems like this is an electron issue rather than a sql.js issue.\n\nI think this is a `sql.js` issue, it has the following code in it:\n\n```\nprocess['on']('uncaughtException', function(ex) {\n    // suppress ExitStatus exceptions from showing an error\n    if (!(ex instanceof ExitStatus)) {\n      throw ex;\n    }\n  });\n```\n\nAnd the node.js docs state:\n\n> Exceptions thrown from within the event handler will not be caught. Instead the process will exit with a non-zero exit code and the stack trace will be printed. This is to avoid infinite recursion.\n\nIf you register your `uncaughtException` handler before requiring `sql.js` you'll see it does get hit:\n\n``` js\nconst {app} = require('electron')\n\nprocess.on('uncaughtException', (error) => {\n  console.log('Error caught');\n});\n\nrequire('sql.js')\n\nconst start = () => {\n  console.log('Electron is running');\n  setTimeout(()=>{throw new Error('foo?')}, 1000)\n}\n\napp.on('ready', start);\n```\n\nOutput:\n\n```\nElectron is running\nError caught\n/Users/kevin/github/Electron-Sql-js-Error-Bug/node_modules/sql.js/js/sql.js:5\n1<process.argv.length?process.argv[1].replace(/\\\\/g,\"/\"):\"unknown-program\");f.arguments=process.argv.slice(2);\"undefined\"!==typeof module&&(module.exports=f);process.on(\"uncaughtException\",function(a){if(!(a instanceof ka))throw a;});f.inspect=function(){return\"[Emscripten Module object]\"}}else if(fa)f.print||(f.print=print),\"undefined\"!=typeof printErr&&(f.printErr=printErr),f.read=\"undefined\"!=typeof read?read:function(){throw\"no read() available (jsc?)\";},f.readBinary=function(a){if(\"function\"===\n                                                                                                                                                                                                                               ^\n\nError: foo?\n    at Timeout.setTimeout (/Users/kevin/github/Electron-Sql-js-Error-Bug/app/main/index.js:11:25)\n    at tryOnTimeout (timers.js:232:11)\n    at Timer.listOnTimeout (timers.js:202:5)\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/258974092",
    "html_url": "https://github.com/electron/electron/issues/7876#issuecomment-258974092",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7876",
    "id": 258974092,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-11-07T21:50:21Z",
    "updated_at": "2016-11-07T21:50:21Z",
    "body": "I'm going to close this out for now since it seems to be expected behavior given that `sql.js` is throwing errors from an `uncaughtException` error handler.\n"
  }
]