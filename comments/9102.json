[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/291805478",
    "html_url": "https://github.com/electron/electron/issues/9102#issuecomment-291805478",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9102",
    "id": 291805478,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-05T09:27:43Z",
    "updated_at": "2017-04-05T09:27:43Z",
    "body": "Lot's to read here and not much time, but a quick solution to your error handling issue is to simply make the return type of your executeJavaScript call a Promise.\r\n\r\n```js\r\nwebContents.executeJavaScript('new Promise(() => { throw new Error(\"this is my exception\") })').catch(err => console.warn(err))\r\n```"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/291992718",
    "html_url": "https://github.com/electron/electron/issues/9102#issuecomment-291992718",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9102",
    "id": 291992718,
    "user": {
      "login": "aight8",
      "id": 1138623,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1138623?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aight8",
      "html_url": "https://github.com/aight8",
      "followers_url": "https://api.github.com/users/aight8/followers",
      "following_url": "https://api.github.com/users/aight8/following{/other_user}",
      "gists_url": "https://api.github.com/users/aight8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aight8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aight8/subscriptions",
      "organizations_url": "https://api.github.com/users/aight8/orgs",
      "repos_url": "https://api.github.com/users/aight8/repos",
      "events_url": "https://api.github.com/users/aight8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aight8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-05T20:50:45Z",
    "updated_at": "2017-04-05T20:50:45Z",
    "body": "I will this. However if the code snippet contains syntax errors it's the same problem. I try to catch all kind of errors can happen"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/293889970",
    "html_url": "https://github.com/electron/electron/issues/9102#issuecomment-293889970",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9102",
    "id": 293889970,
    "user": {
      "login": "aight8",
      "id": 1138623,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1138623?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aight8",
      "html_url": "https://github.com/aight8",
      "followers_url": "https://api.github.com/users/aight8/followers",
      "following_url": "https://api.github.com/users/aight8/following{/other_user}",
      "gists_url": "https://api.github.com/users/aight8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aight8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aight8/subscriptions",
      "organizations_url": "https://api.github.com/users/aight8/orgs",
      "repos_url": "https://api.github.com/users/aight8/repos",
      "events_url": "https://api.github.com/users/aight8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aight8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-13T13:07:00Z",
    "updated_at": "2017-04-13T13:08:06Z",
    "body": "**more**\r\nI write another use case here, I don't create a new issue for this - I summarise it:\r\nIf the promise which is returned in ```executeJavaScript``` throw any error or call reject (intended or not) something very bad thing happens:\r\nThe **promise reject value** is serialised to send it back to the main process via IPC. However as we know, an **error error** cannot be serialised without extra work. So currently the returned promise from ```executeJavaScript``` is rejected with an empty object.\r\n\r\n```JS\r\nError: Promise rejected with value: {} // <- totally useless. windows like behaviour.\r\n```\r\n\r\nThat's really annoying - because:\r\n- Normally reject values *should* always be an Error object\r\n- Any **not** intended error are mostly Error objects (I hope so) - so they automatically land into this problem.\r\n\r\n**How to solve?**\r\nThe IPC serialiser could serialise error objects specially. (name, message, stack + other values)\r\n\r\n**Temporary solution**\r\nA temporary solution were to wrap the **whole** promise function body in a try catch, and if an error is thrown, catch it and re-throw a simple Object with the interface:\r\n```TS\r\ninterface ErrorShape {\r\n   name?: string\r\n   message?: string\r\n   stack?: string\r\n   // ...\r\n}\r\n```\r\n\r\n*snippet:*\r\n```TS\r\ntry {\r\nconst result await = webContents.executeJavaScript(`\r\nnew Promise((resolve, reject) => {\r\n   try {\r\n      // do stuff...\r\n   } catch(err) {\r\n      throw { name: err.name, message: err.message, stack: err.stack }\r\n   }\r\n})\r\n`)\r\n} catch(errObj) {\r\n    // errObj is not an error object but it has the same fields like the basic error object\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/295246933",
    "html_url": "https://github.com/electron/electron/issues/9102#issuecomment-295246933",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9102",
    "id": 295246933,
    "user": {
      "login": "aight8",
      "id": 1138623,
      "avatar_url": "https://avatars3.githubusercontent.com/u/1138623?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aight8",
      "html_url": "https://github.com/aight8",
      "followers_url": "https://api.github.com/users/aight8/followers",
      "following_url": "https://api.github.com/users/aight8/following{/other_user}",
      "gists_url": "https://api.github.com/users/aight8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aight8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aight8/subscriptions",
      "organizations_url": "https://api.github.com/users/aight8/orgs",
      "repos_url": "https://api.github.com/users/aight8/repos",
      "events_url": "https://api.github.com/users/aight8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aight8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-19T12:19:09Z",
    "updated_at": "2017-04-19T12:19:09Z",
    "body": "bump"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/295249178",
    "html_url": "https://github.com/electron/electron/issues/9102#issuecomment-295249178",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9102",
    "id": 295249178,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-19T12:25:13Z",
    "updated_at": "2017-04-19T12:25:13Z",
    "body": "@aight8 Please don't \"bump\" issues, it does nothing other than send annoying emails to people watching the repo üëç "
  }
]