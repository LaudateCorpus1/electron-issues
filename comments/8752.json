[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282143741",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282143741",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282143741,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T22:33:51Z",
    "updated_at": "2017-02-23T22:33:51Z",
    "body": "I'm not sure if this is actually a bug, technically any page can do something funky like override `Function.prototype.call` and ruin your day.\r\n\r\nIf you want a safety net I believe the `contextIsolation: true` would help ( @kevinsawicki ?)\r\n\r\nWe can protect against this particular case by saving the original value of `Promise` but it feels weird ðŸ˜• "
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282154131",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282154131",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282154131,
    "user": {
      "login": "binux",
      "id": 646451,
      "avatar_url": "https://avatars0.githubusercontent.com/u/646451?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/binux",
      "html_url": "https://github.com/binux",
      "followers_url": "https://api.github.com/users/binux/followers",
      "following_url": "https://api.github.com/users/binux/following{/other_user}",
      "gists_url": "https://api.github.com/users/binux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/binux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/binux/subscriptions",
      "organizations_url": "https://api.github.com/users/binux/orgs",
      "repos_url": "https://api.github.com/users/binux/repos",
      "events_url": "https://api.github.com/users/binux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/binux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T23:21:03Z",
    "updated_at": "2017-02-23T23:21:03Z",
    "body": "Unfortunately `contextIsolation: true` doesn't work for my use case.\r\n\r\nFor example the lib [nightmare](https://github.com/segmentio/nightmare) I'm using, [override `console.log`](https://github.com/segmentio/nightmare/blob/master/lib/preload.js#L35) in order to\r\ncapture the log from loaded page. With `contextIsolation: true`, `preload.js` cannot replace the methods in loaded page either.\r\n\r\nI know the solution cannot prevent every, at least that will solve the tumblr case for me. (or I can only `electron.ipcRenderer.removeAllListeners(\"ELECTRON_INTERNAL_RENDERER_ASYNC_WEB_FRAME_METHOD\")` and install another listener, which is more ugly...)"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282154138",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282154138",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282154138,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-02-23T23:21:06Z",
    "updated_at": "2017-02-23T23:21:06Z",
    "body": "> If you want a safety net I believe the contextIsolation: true would help\r\n\r\nYup, this should address this issue because the `Promise` global will be sandboxed in each JS context.\r\n\r\n> We can protect against this particular case by saving the original value of Promise but it feels weird \r\n\r\nYeah, we typically only do this to in cases where we want to prevent tampering for code that runs in both the isolated context and main context like here: https://github.com/electron/electron/blob/cc688d7fa6a48e5133735eb67d665f5d193ec94f/lib/renderer/window-setup.js#L26\r\n\r\nPeople may want to override `Promise` for debugging, better implementation, etc. so preventing that doesn't feel the right move without a good reason.\r\n\r\n`contextIsolation` prevents any built-ins used by the Electron page from being tampered with by the loaded page.\r\n\r\nHow does this sound to you @binux?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282154392",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282154392",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282154392,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-02-23T23:22:21Z",
    "updated_at": "2017-02-23T23:22:21Z",
    "body": ">  With contextIsolation: true, preload.js cannot replace the methods in loaded page either.\r\n\r\nYou should be able to replace these methods using `webFrame.executeJavaScript` which runs in the main page's context. http://electron.atom.io/docs/api/web-frame/#webframeexecutejavascriptcode-usergesture-callback"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282154672",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282154672",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282154672,
    "user": {
      "login": "binux",
      "id": 646451,
      "avatar_url": "https://avatars0.githubusercontent.com/u/646451?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/binux",
      "html_url": "https://github.com/binux",
      "followers_url": "https://api.github.com/users/binux/followers",
      "following_url": "https://api.github.com/users/binux/following{/other_user}",
      "gists_url": "https://api.github.com/users/binux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/binux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/binux/subscriptions",
      "organizations_url": "https://api.github.com/users/binux/orgs",
      "repos_url": "https://api.github.com/users/binux/repos",
      "events_url": "https://api.github.com/users/binux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/binux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T23:23:38Z",
    "updated_at": "2017-02-23T23:23:38Z",
    "body": "> You should be able to replace these methods using webFrame.executeJavaScript\r\n\r\nBut it cannot export ipc into the context to forward the message back. I guess."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282154802",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282154802",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282154802,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-02-23T23:24:14Z",
    "updated_at": "2017-02-23T23:24:14Z",
    "body": "So from `preload.js`:\r\n\r\n```js\r\nwebFrame.executeJavaScript('console.log = function (message) { alert(message) };')\r\n```"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282155324",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282155324",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282155324,
    "user": {
      "login": "binux",
      "id": 646451,
      "avatar_url": "https://avatars0.githubusercontent.com/u/646451?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/binux",
      "html_url": "https://github.com/binux",
      "followers_url": "https://api.github.com/users/binux/followers",
      "following_url": "https://api.github.com/users/binux/following{/other_user}",
      "gists_url": "https://api.github.com/users/binux/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/binux/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/binux/subscriptions",
      "organizations_url": "https://api.github.com/users/binux/orgs",
      "repos_url": "https://api.github.com/users/binux/repos",
      "events_url": "https://api.github.com/users/binux/events{/privacy}",
      "received_events_url": "https://api.github.com/users/binux/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T23:27:11Z",
    "updated_at": "2017-02-23T23:27:11Z",
    "body": "So I can receive the message via `anything.on('alert')` ? But I saw nightmare also overridden `window.alert` [ref](https://github.com/segmentio/nightmare/blob/master/lib/preload.js#L56), I suppose there is no such event?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/282156039",
    "html_url": "https://github.com/electron/electron/issues/8752#issuecomment-282156039",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/8752",
    "id": 282156039,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-02-23T23:30:54Z",
    "updated_at": "2017-02-23T23:30:54Z",
    "body": "> So I can receive the message via anything.on('alert') ? But I saw nightmare also overridden window.alert ref, I suppose there is no such event?\r\n\r\nSo nightmare could support context isolation by using `window.postMessage` to forward messages across contexts to perform the action(s) from a `window.addEventListener('message', function () {})` listener.\r\n\r\nI'm okay moving `Promise` to a constant in the meantime since `contextIsolation` is pretty new still, but others things still may break since, as @MarshallOfSound mentioned, the page shares built-ins with the Electron API and can therefore tamper with and delete many of the built-ins the API relies on."
  }
]