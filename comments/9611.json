[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/304636890",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-304636890",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 304636890,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-29T11:15:51Z",
    "updated_at": "2017-05-29T11:15:51Z",
    "body": "I have a branch where webview/sandbox integration is working, but to get `window.open` working inside sandbox I had to use some chromium internal API, which is why I haven't sent a PR yet.\r\n\r\nFeel free to play with it, and if you come up with a better solution, please send a PR: https://github.com/tarruda/electron/tree/enable-webview-on-sandbox."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/304659116",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-304659116",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 304659116,
    "user": {
      "login": "juturu",
      "id": 11049886,
      "avatar_url": "https://avatars1.githubusercontent.com/u/11049886?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juturu",
      "html_url": "https://github.com/juturu",
      "followers_url": "https://api.github.com/users/juturu/followers",
      "following_url": "https://api.github.com/users/juturu/following{/other_user}",
      "gists_url": "https://api.github.com/users/juturu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juturu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juturu/subscriptions",
      "organizations_url": "https://api.github.com/users/juturu/orgs",
      "repos_url": "https://api.github.com/users/juturu/repos",
      "events_url": "https://api.github.com/users/juturu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juturu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-29T13:17:39Z",
    "updated_at": "2017-05-29T13:17:39Z",
    "body": "In my scenario BrowerWindow doesn't have sandbox option set. Can we at least make web view open in sandbox without window.open working? This at least will make some scenarios working."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/304677934",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-304677934",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 304677934,
    "user": {
      "login": "juturu",
      "id": 11049886,
      "avatar_url": "https://avatars1.githubusercontent.com/u/11049886?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juturu",
      "html_url": "https://github.com/juturu",
      "followers_url": "https://api.github.com/users/juturu/followers",
      "following_url": "https://api.github.com/users/juturu/following{/other_user}",
      "gists_url": "https://api.github.com/users/juturu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juturu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juturu/subscriptions",
      "organizations_url": "https://api.github.com/users/juturu/orgs",
      "repos_url": "https://api.github.com/users/juturu/repos",
      "events_url": "https://api.github.com/users/juturu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juturu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-29T14:40:36Z",
    "updated_at": "2017-05-29T14:40:36Z",
    "body": "Essentially can we push your commit @ https://github.com/tarruda/electron/commit/5bedc0c1f84eb4a64e5a860dc78d53635ec7f2bc to get this issue resolved?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/304701514",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-304701514",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 304701514,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-29T17:03:30Z",
    "updated_at": "2017-05-29T17:03:30Z",
    "body": "> In my scenario BrowerWindow doesn't have sandbox option set. Can we at least make web view open in sandbox without window.open working? This at least will make some scenarios working.\r\n\r\nI hope to eventually get it fully working, but maybe @kevinsawicki and @zcbenz are ok with a partial implementation.\r\n\r\n> Essentially can we push your commit @ tarruda/electron@5bedc0c to get this issue resolved?\r\n\r\nIf only enabling sandbox on webview without the window.open patch, you also would need to replace the `window.open` API with a stub or it could crash electron."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/304707377",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-304707377",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 304707377,
    "user": {
      "login": "juturu",
      "id": 11049886,
      "avatar_url": "https://avatars1.githubusercontent.com/u/11049886?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juturu",
      "html_url": "https://github.com/juturu",
      "followers_url": "https://api.github.com/users/juturu/followers",
      "following_url": "https://api.github.com/users/juturu/following{/other_user}",
      "gists_url": "https://api.github.com/users/juturu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juturu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juturu/subscriptions",
      "organizations_url": "https://api.github.com/users/juturu/orgs",
      "repos_url": "https://api.github.com/users/juturu/repos",
      "events_url": "https://api.github.com/users/juturu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juturu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-29T17:50:46Z",
    "updated_at": "2017-05-29T17:50:46Z",
    "body": "> Essentially can we push your commit @ tarruda/electron@5bedc0c to get this issue resolved?\r\n\r\nThis change is not enabling the sandbox on the webview as --no-sandbox is not removed. Am i missing anything?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305282185",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305282185",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305282185,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T18:51:21Z",
    "updated_at": "2017-05-31T18:51:59Z",
    "body": "Would be interested in having a way of enabling sandbox only for webview within the application (even limited without `window.open` functionality), but without having to add any command line arguments to the application on startup and without enabling sandbox for any other renderer 👍 "
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305283265",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305283265",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305283265,
    "user": {
      "login": "juturu",
      "id": 11049886,
      "avatar_url": "https://avatars1.githubusercontent.com/u/11049886?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juturu",
      "html_url": "https://github.com/juturu",
      "followers_url": "https://api.github.com/users/juturu/followers",
      "following_url": "https://api.github.com/users/juturu/following{/other_user}",
      "gists_url": "https://api.github.com/users/juturu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juturu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juturu/subscriptions",
      "organizations_url": "https://api.github.com/users/juturu/orgs",
      "repos_url": "https://api.github.com/users/juturu/repos",
      "events_url": "https://api.github.com/users/juturu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juturu/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-31T18:55:16Z",
    "updated_at": "2017-05-31T18:55:16Z",
    "body": "@kevinsawicki @zcbenz what do you guys think on the proposal above? And removing --no-sandbox on webview to get the webview sandbox working."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305283948",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305283948",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305283948,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-05-31T18:57:47Z",
    "updated_at": "2017-05-31T18:57:47Z",
    "body": "> And removing --no-sandbox on webview to get the webview sandbox working.\r\n\r\nRemoving this flag when the sandbox is enabled sounds fine to me 👍 "
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305454642",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305454642",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305454642,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T10:30:08Z",
    "updated_at": "2017-06-01T10:30:08Z",
    "body": "> Would be interested in having a way of enabling sandbox only for webview within the application (even limited without window.open functionality), but without having to add any command line arguments to the application on startup and without enabling sandbox for any other renderer\r\n\r\nAFAIK this is not possible. Chromium sandbox is either enabled for all processes or for none. The `sandbox` option implemented in electron(and in my patch for webview) is simply telling electron to disable node.js on renderer process, but the OS-level sandbox can only be enabled at startup.\r\n\r\n> This change is not enabling the sandbox on the webview as --no-sandbox is not removed. Am i missing anything?\r\n\r\nIt enables the `sandbox` attribute for webview, eg: `<webview sandbox=true>`. When this attribute is passed, the webview renderer will have `--no-sandbox` removed."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305457623",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305457623",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305457623,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T10:44:19Z",
    "updated_at": "2017-06-01T10:44:19Z",
    "body": "That is sad to hear (the fact that true sandboxing can only be enabled for all processes).\r\n\r\n(I posted this to chat but we should maybe keep the discussion here):\r\n\r\nI find it very confusing that you need to run `electron --enable-sandbox` to enable true sandboxing but if you forget to pass this argument you can still create windows with `sandbox: true` and the behaviour is almost the same (though probably fundamentally different in terms of security). \r\n\r\nIf we cannot avoid having to use `--enable-sandbox` then I think creating a window with `sandbox: true` should cause an error. \r\n\r\nIdeally though we would never even have to pass in `--enable-sandbox`. imho it is quite fragile to rely on this argument to be passed to the application to enable security\r\n\r\nOnce webviews can use sandboxing I would think that by default webviews will run with `sandbox: true` and you do not need to pass in `--enable-sandbox`. today we already set `nodeIntegration: false` by default for webviews and this just works independent from any command line flags."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305463896",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305463896",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305463896,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T11:15:19Z",
    "updated_at": "2017-06-01T11:15:19Z",
    "body": "> I find it very confusing that you need to run electron --enable-sandbox to enable true sandboxing but if you forget to pass this argument you can still create windows with sandbox: true and the behaviour is almost the same (though probably fundamentally different in terms of security).\r\n\r\nUnfortunately, this is a limitation of chromium sandbox. I think to make sandbox compatible across all platforms, it needs to be enabled for all processes.\r\n\r\n> If we cannot avoid having to use --enable-sandbox then I think creating a window with sandbox: true should cause an error.\r\n\r\nThink about `sandbox: true` as a way to start a renderer that is compatible with chromium sandbox. Electron default renderer is not compatible because it starts a true node.js runtime which requires network/filesystem access. The way chromium sandbox is designed is that all renderers should delegate system access through the main process, so `sandbox: true` tells electron to completely disable node.js(not just `nodeIntegration`) and delegate everything to the main process.\r\n\r\nNote that `nodeIntegration: false` is not the same as `sandbox: true`. Even with `nodeIntegration: false` you still have node.js enabled for preload environment, so any `require()` calls will use the filesystem to load modules during startup.\r\n\r\nWith `sandbox: true`, the startup modules are actually bundled into the executable with browserify, and the stub `require` function is exposed to the user's preload so it can use some of electron's builtin modules. In the end it is possible to have an environment very similar to what non-sandboxed renderers have since browserify does very good node.js emulation.\r\n\r\nAlso, even with OS-level sandbox disabled, `sandbox: true` is still required to allow debugging via crash dumps(remember, no filesystem access means the renderer can't write minidump to disk).\r\n\r\n> Ideally though we would never even have to pass in --enable-sandbox. imho it is quite fragile to rely on this argument to be passed to the application to enable security\r\n\r\nIt is unfortunate but necessary for now. The problem is that the code which enables/disables sandbox is executed before electron initial javascript, so we can't simply use `app.commandLine.appendSwitch` to add this switch. Maybe it is possible to implement a workaround similar to `app.disableHardwareAcceleration()`(ref: https://github.com/electron/electron/issues/5297#issuecomment-214950253) but I haven't investigated much.\r\n\r\nNote that by default sandbox is enabled for chromium, but since electron can't use it, we need to have an explicit opt-in argument.\r\n\r\n> Once webviews can use sandboxing I would think that by default webviews will run with sandbox: true and you do not need to pass in --enable-sandbox. today we already set nodeIntegration: false by default for webviews and this just works independent from any command line flags.\r\n\r\nEven if we could get true OS-level sandboxing enabled for individual webviews, it would still be unwise to run untrusted code in it. The problem is that even though sandboxing would block filesystem/network access from the renderer, electron allows full unfiltered access to the system via IPC. For example, it is possible to load/execute any node.js module via the IPC calls that implement the `remote` module. There's still a lot of work to be done before electron can be considered secure as chromium for running untrusted content."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305480565",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305480565",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305480565,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T12:37:30Z",
    "updated_at": "2017-06-01T12:37:30Z",
    "body": "Thanks for all the clarification 👍 \r\n\r\nre IPC: if a webview is sandboxed and node integration is disabled, how can a renderer still use IPC to run malicious code on the non-sandboxed side?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305483613",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305483613",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305483613,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T12:51:00Z",
    "updated_at": "2017-06-01T12:51:00Z",
    "body": "> re IPC: if a webview is sandboxed and node integration is disabled, how can a renderer still use IPC to run malicious code on the non-sandboxed side?\r\n\r\nIf some malicious code manages to take over the renderer, or just finds a way to send arbitrary IPC messages, it can do anything in electron. Normally(in chrome) this is would not be a big problem since only a specific set of IPC are allowed, so the malicious code would only be able to do what is normally possible through javascript, eg: send network http requests or maybe access IPCs for html 5 filesystem API(which is confined to the current origin)\r\n\r\nThe problem is that electron uses a very generic IPC message to handle any messages from the renderer. Since the `electron.remote` module is essentially a wrapper around a bunch of messages electron sends to the browser, it would be possible for the malicious code to emulate anything that can be done by `electron.remote` API. (eg: `electron.remote.require('fs').unlinkSync`).\r\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305485504",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305485504",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305485504,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T12:59:09Z",
    "updated_at": "2017-06-01T12:59:09Z",
    "body": "Makes sense, so on top of sandbox we also need a \"safe\" way of sending IPC from sandbox to host."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305488529",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305488529",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305488529,
    "user": {
      "login": "tarruda",
      "id": 842846,
      "avatar_url": "https://avatars0.githubusercontent.com/u/842846?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarruda",
      "html_url": "https://github.com/tarruda",
      "followers_url": "https://api.github.com/users/tarruda/followers",
      "following_url": "https://api.github.com/users/tarruda/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarruda/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarruda/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarruda/subscriptions",
      "organizations_url": "https://api.github.com/users/tarruda/orgs",
      "repos_url": "https://api.github.com/users/tarruda/repos",
      "events_url": "https://api.github.com/users/tarruda/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarruda/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T13:11:01Z",
    "updated_at": "2017-06-01T13:11:01Z",
    "body": "Yes, I already considered some options but didn't start any work yet.\r\n\r\nOne idea is that each webContents would have an ipc filter(callback) to only allow certain messages, so a top-level window would have full access and children would be restricted."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/305495992",
    "html_url": "https://github.com/electron/electron/issues/9611#issuecomment-305495992",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9611",
    "id": 305495992,
    "user": {
      "login": "bpasero",
      "id": 900690,
      "avatar_url": "https://avatars0.githubusercontent.com/u/900690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bpasero",
      "html_url": "https://github.com/bpasero",
      "followers_url": "https://api.github.com/users/bpasero/followers",
      "following_url": "https://api.github.com/users/bpasero/following{/other_user}",
      "gists_url": "https://api.github.com/users/bpasero/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bpasero/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bpasero/subscriptions",
      "organizations_url": "https://api.github.com/users/bpasero/orgs",
      "repos_url": "https://api.github.com/users/bpasero/repos",
      "events_url": "https://api.github.com/users/bpasero/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bpasero/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-01T13:39:30Z",
    "updated_at": "2017-06-01T13:40:10Z",
    "body": "Would it not be better to rename the `sandbox` option in the renderer/webview so that people do not confuse it with the real Chrome sandbox model? As far as I hear, what `sandbox: true` does is to disable node integration in preload scripts, so maybe it should be moved into the `nodeIntegration` option and we then have:\r\n* `on`: on in both\r\n* `onInPreload`: off in webcontent\r\n* `off`: off in webcontent and preload (new default)"
  }
]