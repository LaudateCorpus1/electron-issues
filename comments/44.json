[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/21691860",
    "html_url": "https://github.com/electron/electron/issues/44#issuecomment-21691860",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/44",
    "id": 21691860,
    "user": {
      "login": "nathansobo",
      "id": 1789,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1789?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nathansobo",
      "html_url": "https://github.com/nathansobo",
      "followers_url": "https://api.github.com/users/nathansobo/followers",
      "following_url": "https://api.github.com/users/nathansobo/following{/other_user}",
      "gists_url": "https://api.github.com/users/nathansobo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nathansobo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nathansobo/subscriptions",
      "organizations_url": "https://api.github.com/users/nathansobo/orgs",
      "repos_url": "https://api.github.com/users/nathansobo/repos",
      "events_url": "https://api.github.com/users/nathansobo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nathansobo/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2013-07-28T21:49:15Z",
    "updated_at": "2013-07-28T21:49:15Z",
    "body": "I've seen this twice as well.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/287897561",
    "html_url": "https://github.com/electron/electron/issues/44#issuecomment-287897561",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/44",
    "id": 287897561,
    "user": {
      "login": "Daij-Djan",
      "id": 156799,
      "avatar_url": "https://avatars1.githubusercontent.com/u/156799?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Daij-Djan",
      "html_url": "https://github.com/Daij-Djan",
      "followers_url": "https://api.github.com/users/Daij-Djan/followers",
      "following_url": "https://api.github.com/users/Daij-Djan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Daij-Djan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Daij-Djan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Daij-Djan/subscriptions",
      "organizations_url": "https://api.github.com/users/Daij-Djan/orgs",
      "repos_url": "https://api.github.com/users/Daij-Djan/repos",
      "events_url": "https://api.github.com/users/Daij-Djan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Daij-Djan/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-20T21:04:57Z",
    "updated_at": "2017-03-20T21:04:57Z",
    "body": "2017 ... i see the same\r\n\r\nPerforming @selector(itemSelected:) from sender NSMenuItem 0x6100002a6180\r\n\r\nThread 0 Crashed:: CrBrowserMain  Dispatch queue: com.apple.main-thread\r\n0   com.github.electron.framework \t0x0000000103079dbc 0x10242c000 + 12901820\r\n1   com.github.electron.framework \t0x00000001024a144d atom::api::WebContents::IsFocused() const + 45\r\n2   com.github.electron.framework \t0x0000000102496c20 bool base::internal::RunnableAdapter<bool (atom::api::WebContents::*)() const>::Run<atom::api::WebContents const*>(atom::api::WebContents const*&&) + 32\r\n3   com.github.electron.framework \t0x0000000102496bec bool base::internal::InvokeHelper<false, bool, base::internal::RunnableAdapter<bool (atom::api::WebContents::*)() const> >::MakeItSo<atom::api::WebContents const*>(base::internal::RunnableAdapter<bool (atom::api::WebContents::*)() const>, atom::api::WebContents const*&&) + 28\r\n4   com.github.electron.framework \t0x0000000102496bca base::internal::Invoker<base::IndexSequence<>, base::internal::BindState<base::internal::RunnableAdapter<bool (atom::api::WebContents::*)() const>, bool (atom::api::WebContents const*)>, base::internal::InvokeHelper<false, bool, base::internal::RunnableAdapter<bool (atom::api::WebContents::*)() const> >, bool (atom::api::WebContents const*)>::Run(base::internal::BindStateBase*, atom::api::WebContents const*&&) + 26\r\n5   com.github.electron.framework \t0x0000000102496acc base::Callback<bool (atom::api::WebContents const*), (base::internal::CopyMode)1>::Run(atom::api::WebContents const*) const + 28\r\n6   com.github.electron.framework \t0x0000000102496a8c void mate::internal::Invoker<mate::internal::IndicesHolder<0ul>, atom::api::WebContents const*>::DispatchToCallback<bool>(base::Callback<bool (atom::api::WebContents const*), (base::internal::CopyMode)1>) + 60\r\n7   com.github.electron.framework \t0x000000010249695c mate::internal::Dispatcher<bool (atom::api::WebContents const*)>::DispatchToCallback(v8::FunctionCallbackInfo<v8::Value> const&) + 124\r\n8   libnode.dylib                 \t0x0000000106e24eda v8::internal::FunctionCallbackArguments::Call(void (*)(v8::FunctionCallbackInfo<v8::Value> const&)) + 298\r\n9   libnode.dylib                 \t0x0000000106e5e925 0x106a7c000 + 4073765\r\n10  libnode.dylib                 \t0x0000000106e6078e 0x106a7c000 + 4081550\r\n11  ???                           \t0x00002f0ade808ba7 0 + 51723729144743\r\n12  ???                           \t0x00002f0adeaa9ac7 0 + 51723731901127\r\n13  ???                           \t0x00002f0adeac7b0a 0 + 51723732024074\r\n14  ???                           \t0x00002f0ade845fa3 0 + 51723729395619\r\n15  ???                           \t0x00002f0ade829f0f 0 + 51723729280783\r\n16  libnode.dylib                 \t0x000000010713899b 0x106a7c000 + 7063963\r\n17  libnode.dylib                 \t0x000000010713879b v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*) + 331\r\n18  libnode.dylib                 \t0x0000000106e0b8b7 v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*) + 535\r\n19  com.github.electron.framework \t0x000000010245f87c mate::internal::V8FunctionInvoker<void (v8::Local<v8::Value>, int)>::Go(v8::Isolate*, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int) + 252\r\n20  com.github.electron.framework \t0x000000010245fa89 void base::internal::RunnableAdapter<void (*)(v8::Isolate*, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int)>::Run<v8::Isolate* const&, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int>(v8::Isolate* const&&&, mate::internal::SafeV8Function const&&&, v8::Local<v8::Value>&&, int&&) + 25\r\n21  com.github.electron.framework \t0x000000010245fa65 void base::internal::InvokeHelper<false, void, base::internal::RunnableAdapter<void (*)(v8::Isolate*, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int)> >::MakeItSo<v8::Isolate* const&, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int>(base::internal::RunnableAdapter<void (*)(v8::Isolate*, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int)>, v8::Isolate* const&&&, mate::internal::SafeV8Function const&&&, v8::Local<v8::Value>&&, int&&) + 21\r\n22  com.github.electron.framework \t0x000000010245fa37 base::internal::Invoker<base::IndexSequence<0ul, 1ul>, base::internal::BindState<base::internal::RunnableAdapter<void (*)(v8::Isolate*, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int)>, void (v8::Isolate*, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int), v8::Isolate*&, mate::internal::SafeV8Function>, base::internal::InvokeHelper<false, void, base::internal::RunnableAdapter<void (*)(v8::Isolate*, mate::internal::SafeV8Function const&, v8::Local<v8::Value>, int)> >, void (v8::Local<v8::Value>, int)>::Run(base::internal::BindStateBase*, v8::Local<v8::Value>&&, int&&) + 71\r\n23  com.github.electron.framework \t0x000000010245d606 base::Callback<void (v8::Local<v8::Value>, int), (base::internal::CopyMode)1>::Run(v8::Local<v8::Value>, int) const + 38\r\n24  com.github.electron.framework \t0x000000010245d5c7 atom::api::Menu::ExecuteCommand(int, int) + 55\r\n25  com.github.electron.framework \t0x000000010245d61d non-virtual thunk to atom::api::Menu::ExecuteCommand(int, int) + 13\r\n26  com.github.electron.framework \t0x00000001024e6845 0x10242c000 + 763973\r\n27  libsystem_trace.dylib         \t0x00007fffda5adc3d _os_activity_initiate + 61\r\n28  com.apple.AppKit              \t0x00007fffc30d1c9c -[NSApplication(NSResponder) sendAction:to:from:] + 456\r\n29  com.apple.AppKit              \t0x00007fffc2ba5e06 -[NSMenuItem _corePerformAction] + 324\r\n30  com.apple.AppKit              \t0x00007fffc2ba5b72 -[NSCarbonMenuImpl performActionWithHighlightingForItemAtIndex:] + 114\r\n31  libsystem_trace.dylib         \t0x00007fffda5adc3d _os_activity_initiate + 61\r\n32  com.apple.AppKit              \t0x00007fffc2ba4985 -[NSMenu performKeyEquivalent:] + 367\r\n33  com.github.electron.framework \t0x00000001024bff8b atom::CommonWebContentsDelegate::HandleKeyboardEvent(content::WebContents*, content::NativeWebKeyboardEvent const&) + 139\r\n34  com.github.electron.framework \t0x0000000102486c5d atom::api::WebContents::HandleKeyboardEvent(content::WebContents*, content::NativeWebKeyboardEvent const&) + 45\r\n35  com.github.electron.framework \t0x0000000102486c52 atom::api::WebContents::HandleKeyboardEvent(content::WebContents*, content::NativeWebKeyboardEvent const&) + 34\r\n36  com.github.electron.framework \t0x0000000102486c6d non-virtual thunk to atom::api::WebContents::HandleKeyboardEvent(content::WebContents*, content::NativeWebKeyboardEvent const&) + 13\r\n37  com.github.electron.framework \t0x0000000102f3ebcc 0x10242c000 + 11611084\r\n38  com.github.electron.framework \t0x0000000102f3e7c7 0x10242c000 + 11610055\r\n39  com.github.electron.framework \t0x0000000102f3d5a4 0x10242c000 + 11605412\r\n40  com.github.electron.framework \t0x0000000102f3d40e 0x10242c000 + 11605006\r\n41  com.github.electron.framework \t0x0000000102f3d08f 0x10242c000 + 11604111\r\n42  com.github.electron.framework \t0x0000000102f95fd1 0x10242c000 + 11968465\r\n43  com.github.electron.framework \t0x0000000102f835d9 0x10242c000 + 11892185\r\n44  com.github.electron.framework \t0x00000001035479c8 0x10242c000 + 17938888\r\n45  com.github.electron.framework \t0x000000010260172b 0x10242c000 + 1922859\r\n46  com.github.electron.framework \t0x0000000102622543 0x10242c000 + 2057539\r\n47  com.github.electron.framework \t0x000000010262283c 0x10242c000 + 2058300\r\n48  com.github.electron.framework \t0x0000000102622b9b 0x10242c000 + 2059163\r\n49  com.github.electron.framework \t0x00000001025f62cd 0x10242c000 + 1876685\r\n50  com.github.electron.framework \t0x00000001026196ba 0x10242c000 + 2021050\r\n51  com.github.electron.framework \t0x00000001025f5cd4 0x10242c000 + 1875156\r\n52  com.apple.CoreFoundation      \t0x00007fffc4e43981 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\r\n53  com.apple.CoreFoundation      \t0x00007fffc4e24a7d __CFRunLoopDoSources0 + 557\r\n54  com.apple.CoreFoundation      \t0x00007fffc4e23f76 __CFRunLoopRun + 934\r\n55  com.apple.CoreFoundation      \t0x00007fffc4e23974 CFRunLoopRunSpecific + 420\r\n56  com.apple.HIToolbox           \t0x00007fffc43afa5c RunCurrentEventLoopInMode + 240\r\n57  com.apple.HIToolbox           \t0x00007fffc43af891 ReceiveNextEventCommon + 432\r\n58  com.apple.HIToolbox           \t0x00007fffc43af6c6 _BlockUntilNextEventMatchingListInModeWithFilter + 71\r\n59  com.apple.AppKit              \t0x00007fffc29555b4 _DPSNextEvent + 1120\r\n60  com.apple.AppKit              \t0x00007fffc30cfd6b -[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 2789\r\n61  com.apple.AppKit              \t0x00007fffc2949f35 -[NSApplication run] + 926\r\n62  com.github.electron.framework \t0x00000001025f6b26 0x10242c000 + 1878822\r\n63  com.github.electron.framework \t0x00000001025f6124 0x10242c000 + 1876260\r\n64  com.github.electron.framework \t0x0000000102638a61 0x10242c000 + 2148961\r\n65  com.github.electron.framework \t0x0000000102d60cab 0x10242c000 + 9653419\r\n66  com.github.electron.framework \t0x0000000102d60b00 0x10242c000 + 9652992\r\n67  com.github.electron.framework \t0x0000000102d63052 0x10242c000 + 9662546\r\n68  com.github.electron.framework \t0x0000000102d5ce1d 0x10242c000 + 9637405\r\n69  com.github.electron.framework \t0x0000000102cc8d30 0x10242c000 + 9030960\r\n70  com.github.electron.framework \t0x0000000102cc7f16 0x10242c000 + 9027350\r\n71  com.github.electron.framework \t0x000000010242e747 AtomMain + 71\r\n72  io.adlk.franz                 \t0x0000000102420ec6 main + 38\r\n73  libdyld.dylib                 \t0x00007fffda37b255 start + 1\r\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/287899665",
    "html_url": "https://github.com/electron/electron/issues/44#issuecomment-287899665",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/44",
    "id": 287899665,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-03-20T21:12:50Z",
    "updated_at": "2017-03-20T21:12:50Z",
    "body": "@Daij-Djan what version of Electron? Are you able to consistently reproduce it?"
  }
]