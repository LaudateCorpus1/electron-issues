[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/252788955",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-252788955",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 252788955,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T01:36:37Z",
    "updated_at": "2016-10-11T01:36:37Z",
    "body": "@karvapallo Can you please explain what this does / what it fixes.  It is not obvious what this is intended to fix by the commit message or the change itself. ❓ \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/252790466",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-252790466",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 252790466,
    "user": {
      "login": "karvapallo",
      "id": 2733891,
      "avatar_url": "https://avatars1.githubusercontent.com/u/2733891?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karvapallo",
      "html_url": "https://github.com/karvapallo",
      "followers_url": "https://api.github.com/users/karvapallo/followers",
      "following_url": "https://api.github.com/users/karvapallo/following{/other_user}",
      "gists_url": "https://api.github.com/users/karvapallo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karvapallo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karvapallo/subscriptions",
      "organizations_url": "https://api.github.com/users/karvapallo/orgs",
      "repos_url": "https://api.github.com/users/karvapallo/repos",
      "events_url": "https://api.github.com/users/karvapallo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karvapallo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T01:49:20Z",
    "updated_at": "2016-10-11T01:49:20Z",
    "body": "Sure thing. \n\nIf a function on the backend returns a another function, and we want to call or pass said function from the frontend back to the backend, this would not work without this fix. \n\nThe backend is correctly assigns an 'atomId' to the returned function, but the frontend part in question, would ignore it, and instead assume that we are passing back a function created on the frontend (say a callback), which would then no longer have the correct reference to the backend function (it was not interpreted as a 'remote-object', even though it was).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/252791009",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-252791009",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 252791009,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T01:53:56Z",
    "updated_at": "2016-10-11T01:53:56Z",
    "body": "@karvapallo Is it possible to add a spec demonstrating this scenario, I think I understand what you mean.  It would be good to add a spec to ensure this isn't modifed / broken at some point 👍 \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/252792099",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-252792099",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 252792099,
    "user": {
      "login": "karvapallo",
      "id": 2733891,
      "avatar_url": "https://avatars1.githubusercontent.com/u/2733891?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karvapallo",
      "html_url": "https://github.com/karvapallo",
      "followers_url": "https://api.github.com/users/karvapallo/followers",
      "following_url": "https://api.github.com/users/karvapallo/following{/other_user}",
      "gists_url": "https://api.github.com/users/karvapallo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karvapallo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karvapallo/subscriptions",
      "organizations_url": "https://api.github.com/users/karvapallo/orgs",
      "repos_url": "https://api.github.com/users/karvapallo/repos",
      "events_url": "https://api.github.com/users/karvapallo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karvapallo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T02:02:51Z",
    "updated_at": "2016-10-11T02:02:51Z",
    "body": "@MarshallOfSound I'll take a look at making one for you tomorrow when I'm back at work. I'm guessing I can find examples of how you are testing the remote module somewhere in the repo?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/252795565",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-252795565",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 252795565,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T02:31:24Z",
    "updated_at": "2016-10-11T02:31:24Z",
    "body": "> If a function on the backend returns a another function, and we want to call or pass said function from the frontend back to the backend, this would not work without this fix.\n\nWhen you say \"Backend\" you mean, \"Main process\" and when you say \"Frontend\", you mean \"Window process\" right?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/252800939",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-252800939",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 252800939,
    "user": {
      "login": "karvapallo",
      "id": 2733891,
      "avatar_url": "https://avatars1.githubusercontent.com/u/2733891?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karvapallo",
      "html_url": "https://github.com/karvapallo",
      "followers_url": "https://api.github.com/users/karvapallo/followers",
      "following_url": "https://api.github.com/users/karvapallo/following{/other_user}",
      "gists_url": "https://api.github.com/users/karvapallo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karvapallo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karvapallo/subscriptions",
      "organizations_url": "https://api.github.com/users/karvapallo/orgs",
      "repos_url": "https://api.github.com/users/karvapallo/repos",
      "events_url": "https://api.github.com/users/karvapallo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karvapallo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-11T03:16:55Z",
    "updated_at": "2016-10-11T03:16:55Z",
    "body": "@paulcbetts yes that is correct.\n\nSo when a main process method, that returns a function, is passed via remote to the renderer (window) process and called there, the returned function loses it's reference on the main process without this fix. \n\nThe system currently thinks that it's a callback function passed from the renderer process.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/253278430",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-253278430",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 253278430,
    "user": {
      "login": "karvapallo",
      "id": 2733891,
      "avatar_url": "https://avatars1.githubusercontent.com/u/2733891?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karvapallo",
      "html_url": "https://github.com/karvapallo",
      "followers_url": "https://api.github.com/users/karvapallo/followers",
      "following_url": "https://api.github.com/users/karvapallo/following{/other_user}",
      "gists_url": "https://api.github.com/users/karvapallo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karvapallo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karvapallo/subscriptions",
      "organizations_url": "https://api.github.com/users/karvapallo/orgs",
      "repos_url": "https://api.github.com/users/karvapallo/repos",
      "events_url": "https://api.github.com/users/karvapallo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karvapallo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-12T17:18:57Z",
    "updated_at": "2016-10-12T17:18:57Z",
    "body": "I'm having issues trying to get the tests running on my work comp. And I really don't want to screw up my dev env by installing other versions of electron, node and python.\n\nIs there any way one of you guys could try and do a test on this? If you have a working setup where you can run the tests, it should be fairly easy. \n\nHere's an example on how to reproduce the issue.\n\nMain process:\n\nsomeFunc.js\n\n``` javascript\nlet someFunc = function someFunc() {\n    this.retFunc = function retFunc() {\n        return function myTestFunction() {\n            return 'foobar';\n        }\n    };\n    this.passMeTheRetFunc = function passMeTheRetFunc(passedFunc) {\n        console.log('calling passed func: ', passedFunc());\n    };\n};\n\nmodule.exports = new someFunc();\n```\n\nOn the window (renderer) process:\n\n``` javascript\nlet someFunc = remote.require('./backend/someFunc.js');\nlet returnedFunc = someFunc.retFunc();\nsomeFunc.passMeTheRetFunc(returnedFunc);\n```\n\nWithout this fix, the main process will print out 'undefined' if you add this fix, it will find the correct reference to myTestFunction and print out 'foobar'.\n\nThanks!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/287883637",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-287883637",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 287883637,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2017-03-20T20:14:26Z",
    "updated_at": "2017-03-20T20:14:26Z",
    "body": "I'm closing this since no one is picking up the remaining work."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/306565255",
    "html_url": "https://github.com/electron/electron/pull/7546#issuecomment-306565255",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7546",
    "id": 306565255,
    "user": {
      "login": "karvapallo",
      "id": 2733891,
      "avatar_url": "https://avatars1.githubusercontent.com/u/2733891?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karvapallo",
      "html_url": "https://github.com/karvapallo",
      "followers_url": "https://api.github.com/users/karvapallo/followers",
      "following_url": "https://api.github.com/users/karvapallo/following{/other_user}",
      "gists_url": "https://api.github.com/users/karvapallo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karvapallo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karvapallo/subscriptions",
      "organizations_url": "https://api.github.com/users/karvapallo/orgs",
      "repos_url": "https://api.github.com/users/karvapallo/repos",
      "events_url": "https://api.github.com/users/karvapallo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karvapallo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-06T17:50:58Z",
    "updated_at": "2017-06-06T17:51:09Z",
    "body": "@zcbenz what would I need to do to have someone take another look at this.\r\n\r\nI provided a solution, I provided a test case, what else do you need?\r\n\r\nOur whole main process lib is based on returning other functions from function calls, and the lib is basically a singleton, and must be shared among all the renderer processes. Without this fix the `remote` module is not very useful to us."
  }
]