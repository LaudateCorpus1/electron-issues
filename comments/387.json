[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/46136090",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-46136090",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 46136090,
    "user": {
      "login": "Subash",
      "id": 3478693,
      "avatar_url": "https://avatars1.githubusercontent.com/u/3478693?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Subash",
      "html_url": "https://github.com/Subash",
      "followers_url": "https://api.github.com/users/Subash/followers",
      "following_url": "https://api.github.com/users/Subash/following{/other_user}",
      "gists_url": "https://api.github.com/users/Subash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Subash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Subash/subscriptions",
      "organizations_url": "https://api.github.com/users/Subash/orgs",
      "repos_url": "https://api.github.com/users/Subash/repos",
      "events_url": "https://api.github.com/users/Subash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Subash/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-06-16T02:19:02Z",
    "updated_at": "2014-06-16T02:19:02Z",
    "body": "I also agree, app is a very generic name for a module.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66280049",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66280049",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66280049,
    "user": {
      "login": "bwin",
      "id": 1673361,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1673361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwin",
      "html_url": "https://github.com/bwin",
      "followers_url": "https://api.github.com/users/bwin/followers",
      "following_url": "https://api.github.com/users/bwin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwin/subscriptions",
      "organizations_url": "https://api.github.com/users/bwin/orgs",
      "repos_url": "https://api.github.com/users/bwin/repos",
      "events_url": "https://api.github.com/users/bwin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-09T13:11:16Z",
    "updated_at": "2014-12-09T13:11:16Z",
    "body": ":+1: I never had conflicts, but I think this is a good suggestion. I like the `atom-shell/XXX` one better.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66290746",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66290746",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66290746,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-09T14:33:40Z",
    "updated_at": "2014-12-09T14:34:13Z",
    "body": "This is a significant breaking change without any concrete issue that is being alleviated, :-1:\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66388308",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66388308",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66388308,
    "user": {
      "login": "pilwon",
      "id": 61540,
      "avatar_url": "https://avatars0.githubusercontent.com/u/61540?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pilwon",
      "html_url": "https://github.com/pilwon",
      "followers_url": "https://api.github.com/users/pilwon/followers",
      "following_url": "https://api.github.com/users/pilwon/following{/other_user}",
      "gists_url": "https://api.github.com/users/pilwon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pilwon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pilwon/subscriptions",
      "organizations_url": "https://api.github.com/users/pilwon/orgs",
      "repos_url": "https://api.github.com/users/pilwon/repos",
      "events_url": "https://api.github.com/users/pilwon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pilwon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T01:03:05Z",
    "updated_at": "2014-12-10T01:04:08Z",
    "body": "@paulcbetts We could take a non-breaking approach to this fix. The proposed improvement can be implemented today while providing backward-compatibility (for example) for the next several version releases, by linking modules.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66388605",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66388605",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66388605,
    "user": {
      "login": "bwin",
      "id": 1673361,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1673361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwin",
      "html_url": "https://github.com/bwin",
      "followers_url": "https://api.github.com/users/bwin/followers",
      "following_url": "https://api.github.com/users/bwin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwin/subscriptions",
      "organizations_url": "https://api.github.com/users/bwin/orgs",
      "repos_url": "https://api.github.com/users/bwin/repos",
      "events_url": "https://api.github.com/users/bwin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T01:06:15Z",
    "updated_at": "2014-12-10T01:06:15Z",
    "body": ":+1: for pilwon's suggestion\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66395475",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66395475",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66395475,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T02:30:35Z",
    "updated_at": "2014-12-10T02:30:35Z",
    "body": "@pilwon That's still breaking though, you've just delayed the break. Making a huge breaking change is something that can be considered, but if our only justification to break every piece of Atom Shell software on the planet currently is, \"I'd be nice if the names were less generic\", I'm not really sold. Let's wait until there's actual, _non-theoretical_ issues with this decision _before_ breaking everyone. \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66396210",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66396210",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66396210,
    "user": {
      "login": "bwin",
      "id": 1673361,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1673361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwin",
      "html_url": "https://github.com/bwin",
      "followers_url": "https://api.github.com/users/bwin/followers",
      "following_url": "https://api.github.com/users/bwin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwin/subscriptions",
      "organizations_url": "https://api.github.com/users/bwin/orgs",
      "repos_url": "https://api.github.com/users/bwin/repos",
      "events_url": "https://api.github.com/users/bwin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T02:42:17Z",
    "updated_at": "2014-12-10T02:42:17Z",
    "body": "- We could make the final breaking switch far in the future, maybe as late as at 1.0.0.\n- The theoretical threat of a collision gets bigger with every added atom-shell core module. Or with the rising popularity of a module with the same name. With this we would at least be prepared.\n- It's a clean(er) namespace. Basically \"I'd be nice if the names were less generic\" or \"it seems wrong the way it is\".\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66401161",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66401161",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66401161,
    "user": {
      "login": "pilwon",
      "id": 61540,
      "avatar_url": "https://avatars0.githubusercontent.com/u/61540?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pilwon",
      "html_url": "https://github.com/pilwon",
      "followers_url": "https://api.github.com/users/pilwon/followers",
      "following_url": "https://api.github.com/users/pilwon/following{/other_user}",
      "gists_url": "https://api.github.com/users/pilwon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pilwon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pilwon/subscriptions",
      "organizations_url": "https://api.github.com/users/pilwon/orgs",
      "repos_url": "https://api.github.com/users/pilwon/repos",
      "events_url": "https://api.github.com/users/pilwon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pilwon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T03:53:55Z",
    "updated_at": "2015-03-17T13:24:26Z",
    "body": "@paulcbetts Sure, I'll share my _actual, non-theoretical issue_ that made me open this issue in the first place.\n\nIn every atom-shell based app I develop, I use either [webpack](http://webpack.github.io) or [browserify](http://browserify.org) to manage module dependencies and bundle modules installed from different sources together. These sources include Bower, NPM, and local (locally installed and locally developed for a particular application/project). (This list could also grow depending on the module registry I choose in the future...)\n\nThe issue was actually one of the first ones I discovered when I initially tried bringing an existing web app to `atom-shell` environment. The module names immediately collided with `atom-shell` include, `app`, `menu`, `dialog`, and `screen`. In my opinion, these are such commonly used, naturally chosen names for any project that has a similar setup like mine, and it is hard to imagine any other node-based project that reserves generic words like these for submodule names. Some might say I should stop complaining and simply pick other names for my custom modules. (In fact, that's exactly what I did since it was the only option to integrate with `atom-shell`...) However, I'd also like to complain to `atom-shell` for invading my local module namespace territory :-1:\n\nI fully support your idea of not breaking things whenever possible, however this proposal is more about fixing the problem (that is only hidden until your app gets large and complex) and getting ready to play well with every other module on the planet :earth_americas:. It may be well worth breaking and correcting it now than later. If you are hesitant to break even after reading this comment, please at least consider introducing the _properly namespaced_ version of names (`atom-shell/*` or similar) in addition to the current existing ones, such that someone in my situation could happily claim back those names by using the namespaced versiton and ignore(override) the others colliding/polluting.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66402342",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66402342",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66402342,
    "user": {
      "login": "yaru22",
      "id": 49256,
      "avatar_url": "https://avatars0.githubusercontent.com/u/49256?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yaru22",
      "html_url": "https://github.com/yaru22",
      "followers_url": "https://api.github.com/users/yaru22/followers",
      "following_url": "https://api.github.com/users/yaru22/following{/other_user}",
      "gists_url": "https://api.github.com/users/yaru22/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yaru22/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yaru22/subscriptions",
      "organizations_url": "https://api.github.com/users/yaru22/orgs",
      "repos_url": "https://api.github.com/users/yaru22/repos",
      "events_url": "https://api.github.com/users/yaru22/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yaru22/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T04:13:32Z",
    "updated_at": "2014-12-10T04:13:32Z",
    "body": "+1 for pilwon's suggestion on this. Sooner we address this issue is the better. At least, if we introduce the properly namespaced modules in addition to the existing ones, we can encourage people to use that now and be prepared for the future release.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66411206",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66411206",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66411206,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T06:47:07Z",
    "updated_at": "2014-12-10T06:47:07Z",
    "body": "This comment may illuminate my node.js noobness, but I was under the impression that `require('app')'` and `require('./app')` would reference different things (i.e. the latter syntax always is used for your local files and the former only used for npm packages). Is this not the case?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66412362",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66412362",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66412362,
    "user": {
      "login": "bwin",
      "id": 1673361,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1673361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwin",
      "html_url": "https://github.com/bwin",
      "followers_url": "https://api.github.com/users/bwin/followers",
      "following_url": "https://api.github.com/users/bwin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwin/subscriptions",
      "organizations_url": "https://api.github.com/users/bwin/orgs",
      "repos_url": "https://api.github.com/users/bwin/repos",
      "events_url": "https://api.github.com/users/bwin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T07:05:10Z",
    "updated_at": "2014-12-10T07:24:08Z",
    "body": "You're correct, Paul. Conflicts occur (**edit:** AFAIK) only if you install something from npm (**edit:** or let's say into 'node_modules') with some very generic name. (I think the workaround for that would be `require('./node_modules/app')`.)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66470963",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66470963",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66470963,
    "user": {
      "login": "pilwon",
      "id": 61540,
      "avatar_url": "https://avatars0.githubusercontent.com/u/61540?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pilwon",
      "html_url": "https://github.com/pilwon",
      "followers_url": "https://api.github.com/users/pilwon/followers",
      "following_url": "https://api.github.com/users/pilwon/following{/other_user}",
      "gists_url": "https://api.github.com/users/pilwon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pilwon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pilwon/subscriptions",
      "organizations_url": "https://api.github.com/users/pilwon/orgs",
      "repos_url": "https://api.github.com/users/pilwon/repos",
      "events_url": "https://api.github.com/users/pilwon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pilwon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T15:43:46Z",
    "updated_at": "2014-12-10T15:48:43Z",
    "body": "@paulcbetts You're right about `require('./app')` but there's more story to `require('app')`.\n\n---\n\n#### Loading from `node_modules` Folders\n\nIf the module identifier passed to `require()` is not a native module, and does not begin with `'/'`, `'../'`, or `'./'`, then node starts at the parent directory of the current module, and adds `/node_modules`, and attempts to load the module from that location.\n\nIf it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.\n\nFor example, if the file at `'/home/ry/projects/foo.js'` called `require('bar.js')`, then node would look in the following locations, in this order:\n- `/home/ry/projects/node_modules/bar.js`\n- `/home/ry/node_modules/bar.js`\n- `/home/node_modules/bar.js`\n- `/node_modules/bar.js`\n\nThis allows programs to localize their dependencies, so that they do not clash.\n\n(Reference: http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders)\n\n---\n\nBasically, the `require(...)` statement of Node.js continues this search process until it finds one with the name, and it does not really matter if a module found in `node_modules/` was from the npm registry or other sources. It could come from any other public or private registries as well as local installations using various methods provided by [npm install](https://docs.npmjs.com/cli/install). You can also simply create JS files inside one of the searchable `node_modules/` directories.\n\nThis gets even more interesting when you introduce popular module dependency/bundling management tools I mentioned above: [webpack](http://webpack.github.io) or [browserify](http://browserify.org). Both of these tools let you bundle up modules from npm, bower, component, and others all using `require('modules')`. Webpack, for example, lets you manipulate the search path as well, so this technique allows you to load a module from anywhere on the system, even when it's outside `node_modules/`. These tools are must-have today for building complex, large-scale applications (or simply an app with a highly modular architecture design) and I think it's safe to say they will only get more popular in the future.\n\nAs you can see, this issue could potentially lead to all sorts of future conflicts and it is limiting/harmful to the entire node-based module ecosystem. (against the best practices) Yes, we unfortunately cannot fix this without breaking things at some point, but I think what is more important is this project is steered at the right direction sooner than later so it eventually knows how to play well with other modules out there. (like a good citizen :family:)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/66471973",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-66471973",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 66471973,
    "user": {
      "login": "bwin",
      "id": 1673361,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1673361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwin",
      "html_url": "https://github.com/bwin",
      "followers_url": "https://api.github.com/users/bwin/followers",
      "following_url": "https://api.github.com/users/bwin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwin/subscriptions",
      "organizations_url": "https://api.github.com/users/bwin/orgs",
      "repos_url": "https://api.github.com/users/bwin/repos",
      "events_url": "https://api.github.com/users/bwin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-10T15:49:30Z",
    "updated_at": "2014-12-10T15:50:30Z",
    "body": "@pilwon Oh sorry, haven't thought of that (**edit:** many levels of modules).\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/68065771",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-68065771",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 68065771,
    "user": {
      "login": "mattdesl",
      "id": 1383811,
      "avatar_url": "https://avatars2.githubusercontent.com/u/1383811?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mattdesl",
      "html_url": "https://github.com/mattdesl",
      "followers_url": "https://api.github.com/users/mattdesl/followers",
      "following_url": "https://api.github.com/users/mattdesl/following{/other_user}",
      "gists_url": "https://api.github.com/users/mattdesl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mattdesl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mattdesl/subscriptions",
      "organizations_url": "https://api.github.com/users/mattdesl/orgs",
      "repos_url": "https://api.github.com/users/mattdesl/repos",
      "events_url": "https://api.github.com/users/mattdesl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mattdesl/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2014-12-24T17:32:14Z",
    "updated_at": "2014-12-24T17:32:23Z",
    "body": ":+1: to this. \n\nIn NodeJS when you see a statement like `require('browser-window')` you can almost always assume that it is pointing to a [npm module called `browser-window`](https://www.npmjs.com/package/browser-window). \n\nAtom is going against common practices here and opening themselves up headaches down the road. \n\nAs @pilwon says, this becomes more problematic when you start working with modules not just on the NodeJS entry point, but through your entire client-side application. `browser-window` and `crash-reporter` are common names that will inevitably end up on npm at some point.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/68326285",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-68326285",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 68326285,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2014-12-30T03:04:56Z",
    "updated_at": "2014-12-30T03:04:56Z",
    "body": "I think we can provide an API to optionally require adding namespace for built-in modules, like this:\n\n``` javascript\nrequire('browser-window');  // works\nrequire.requireNamespaceForBuiltinModule();\nrequire('browser-window');  // no longer works\nrequire('atom-shell/browser-window');  // works\n```\n\nBut I don't like using `atom-shell/*`, it has ambiguity of using a module under `atom-shell` directory.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/81545112",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-81545112",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 81545112,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-16T09:48:14Z",
    "updated_at": "2015-03-16T09:48:14Z",
    "body": "As suggested by @kevinsawicki, we can move all APIs under one `atom-shell` module to avoid polluting module search paths:\n\n``` javascript\nvar atomShell = require('atom-shell');\nvar BrowserWindow = atomShell.BrowserWindow;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/81686004",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-81686004",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 81686004,
    "user": {
      "login": "bwin",
      "id": 1673361,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1673361?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bwin",
      "html_url": "https://github.com/bwin",
      "followers_url": "https://api.github.com/users/bwin/followers",
      "following_url": "https://api.github.com/users/bwin/following{/other_user}",
      "gists_url": "https://api.github.com/users/bwin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bwin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bwin/subscriptions",
      "organizations_url": "https://api.github.com/users/bwin/orgs",
      "repos_url": "https://api.github.com/users/bwin/repos",
      "events_url": "https://api.github.com/users/bwin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bwin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-16T14:05:34Z",
    "updated_at": "2015-03-16T14:05:34Z",
    "body": "Seems like a nice idea.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/81845618",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-81845618",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 81845618,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-16T18:01:30Z",
    "updated_at": "2015-03-16T18:01:39Z",
    "body": "@zcbenz I'd still use the `requireNamespaceForBuiltin` method because otherwise it's a pretty big breaking change to existing code (or at least have a deprecation period where both are supported)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/82073846",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-82073846",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 82073846,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-03-17T03:39:27Z",
    "updated_at": "2015-03-17T03:39:27Z",
    "body": "> @zcbenz I'd still use the requireNamespaceForBuiltin method because otherwise it's a pretty big breaking change to existing code (or at least have a deprecation period where both are supported)\n\nIt makes sense to me.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/82165661",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-82165661",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 82165661,
    "user": {
      "login": "Subash",
      "id": 3478693,
      "avatar_url": "https://avatars1.githubusercontent.com/u/3478693?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Subash",
      "html_url": "https://github.com/Subash",
      "followers_url": "https://api.github.com/users/Subash/followers",
      "following_url": "https://api.github.com/users/Subash/following{/other_user}",
      "gists_url": "https://api.github.com/users/Subash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Subash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Subash/subscriptions",
      "organizations_url": "https://api.github.com/users/Subash/orgs",
      "repos_url": "https://api.github.com/users/Subash/repos",
      "events_url": "https://api.github.com/users/Subash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Subash/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-17T07:06:11Z",
    "updated_at": "2015-03-17T07:07:04Z",
    "body": "Nice idea @zcbenz, ES6 will make that even more awesome\n\n``` js\nconst { BrowserWindow } = require('atom-shell')\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/82359765",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-82359765",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 82359765,
    "user": {
      "login": "pilwon",
      "id": 61540,
      "avatar_url": "https://avatars0.githubusercontent.com/u/61540?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pilwon",
      "html_url": "https://github.com/pilwon",
      "followers_url": "https://api.github.com/users/pilwon/followers",
      "following_url": "https://api.github.com/users/pilwon/following{/other_user}",
      "gists_url": "https://api.github.com/users/pilwon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pilwon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pilwon/subscriptions",
      "organizations_url": "https://api.github.com/users/pilwon/orgs",
      "repos_url": "https://api.github.com/users/pilwon/repos",
      "events_url": "https://api.github.com/users/pilwon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pilwon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-03-17T13:47:12Z",
    "updated_at": "2015-03-17T13:47:53Z",
    "body": "When implementing...\n\n``` js\nrequire('atom-shell').BrowserWindow\n```\n\n...please consider using [Object.defineProperty](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)'s getter to lazy load modules on demand. Preloading every module would delay the initial app loading. It won't scale with tons of submodules `atom-shell` may introduce in the future too.\n\nAnother solution to this anticipated issue is to provide developers both options: `require('atom-shell').BrowserWindow` for preloading and `require('atom-shell/browser-window')` for lazy loading.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/155550240",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-155550240",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 155550240,
    "user": {
      "login": "kevin-smets",
      "id": 4222494,
      "avatar_url": "https://avatars3.githubusercontent.com/u/4222494?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevin-smets",
      "html_url": "https://github.com/kevin-smets",
      "followers_url": "https://api.github.com/users/kevin-smets/followers",
      "following_url": "https://api.github.com/users/kevin-smets/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevin-smets/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevin-smets/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevin-smets/subscriptions",
      "organizations_url": "https://api.github.com/users/kevin-smets/orgs",
      "repos_url": "https://api.github.com/users/kevin-smets/repos",
      "events_url": "https://api.github.com/users/kevin-smets/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevin-smets/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-10T20:04:23Z",
    "updated_at": "2015-11-10T20:04:23Z",
    "body": "Any news on this?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/155552745",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-155552745",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 155552745,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-10T20:14:47Z",
    "updated_at": "2015-11-10T20:15:18Z",
    "body": "Has anyone ever in practice hit a conflict between an NPM module and a builtin module? (PS: please don't just go searching NPM for name conflicts, I'm talking about someone who actually had trouble writing their Electron app because of this problem). \n\nI've never seen anyone file a bug where this stopped them from writing their app, only people who are worried about the theoretical possibility, so I'm inclined to say this should be WONTFIX\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/156749809",
    "html_url": "https://github.com/electron/electron/issues/387#issuecomment-156749809",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/387",
    "id": 156749809,
    "user": {
      "login": "kfranqueiro",
      "id": 398379,
      "avatar_url": "https://avatars1.githubusercontent.com/u/398379?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kfranqueiro",
      "html_url": "https://github.com/kfranqueiro",
      "followers_url": "https://api.github.com/users/kfranqueiro/followers",
      "following_url": "https://api.github.com/users/kfranqueiro/following{/other_user}",
      "gists_url": "https://api.github.com/users/kfranqueiro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kfranqueiro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kfranqueiro/subscriptions",
      "organizations_url": "https://api.github.com/users/kfranqueiro/orgs",
      "repos_url": "https://api.github.com/users/kfranqueiro/repos",
      "events_url": "https://api.github.com/users/kfranqueiro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kfranqueiro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-14T22:06:10Z",
    "updated_at": "2015-11-14T22:06:10Z",
    "body": "@paulcbetts I agree that this seems like a huge change for what seems like largely a theoretical issue (or one caused by questionable use of other tools that arguably aren't even relevant within an electron environment - e.g. I've seen someone get bitten using browserify together with electron since browserify exports empty modules for various node built-ins).\n\nThat being said, admittedly I think @mattdesl has a point, and this seems reasonable as long as it doesn't defeat the lazy-loading of modules (which it seems like it doesn't, the PR seems to have incorporated the getter idea described by @pilwon).\n"
  }
]