[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212052327",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212052327",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212052327,
    "user": {
      "login": "deepak1556",
      "id": 964386,
      "avatar_url": "https://avatars2.githubusercontent.com/u/964386?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deepak1556",
      "html_url": "https://github.com/deepak1556",
      "followers_url": "https://api.github.com/users/deepak1556/followers",
      "following_url": "https://api.github.com/users/deepak1556/following{/other_user}",
      "gists_url": "https://api.github.com/users/deepak1556/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deepak1556/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deepak1556/subscriptions",
      "organizations_url": "https://api.github.com/users/deepak1556/orgs",
      "repos_url": "https://api.github.com/users/deepak1556/repos",
      "events_url": "https://api.github.com/users/deepak1556/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deepak1556/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T18:17:09Z",
    "updated_at": "2016-04-19T18:17:09Z",
    "body": "We could create a new permission event `openExternal` and let users handle with `session.setPermissionRequestHandler`. thoughts ?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212054095",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212054095",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212054095,
    "user": {
      "login": "bbondy",
      "id": 831718,
      "avatar_url": "https://avatars1.githubusercontent.com/u/831718?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bbondy",
      "html_url": "https://github.com/bbondy",
      "followers_url": "https://api.github.com/users/bbondy/followers",
      "following_url": "https://api.github.com/users/bbondy/following{/other_user}",
      "gists_url": "https://api.github.com/users/bbondy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bbondy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bbondy/subscriptions",
      "organizations_url": "https://api.github.com/users/bbondy/orgs",
      "repos_url": "https://api.github.com/users/bbondy/repos",
      "events_url": "https://api.github.com/users/bbondy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bbondy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T18:20:57Z",
    "updated_at": "2016-04-19T18:20:57Z",
    "body": "That sounds great, thanks!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212064190",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212064190",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212064190,
    "user": {
      "login": "diracdeltas",
      "id": 549654,
      "avatar_url": "https://avatars2.githubusercontent.com/u/549654?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diracdeltas",
      "html_url": "https://github.com/diracdeltas",
      "followers_url": "https://api.github.com/users/diracdeltas/followers",
      "following_url": "https://api.github.com/users/diracdeltas/following{/other_user}",
      "gists_url": "https://api.github.com/users/diracdeltas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diracdeltas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diracdeltas/subscriptions",
      "organizations_url": "https://api.github.com/users/diracdeltas/orgs",
      "repos_url": "https://api.github.com/users/diracdeltas/repos",
      "events_url": "https://api.github.com/users/diracdeltas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diracdeltas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T18:44:18Z",
    "updated_at": "2016-04-19T18:44:18Z",
    "body": "+1\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212071414",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212071414",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212071414,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T19:05:01Z",
    "updated_at": "2016-04-19T19:05:01Z",
    "body": "Why doesn't the standard ways of blocking opening URLs work in this scenario, it seems weird that it wouldn't go through that code path\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212071937",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212071937",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212071937,
    "user": {
      "login": "paulcbetts",
      "id": 1396,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1396?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulcbetts",
      "html_url": "https://github.com/paulcbetts",
      "followers_url": "https://api.github.com/users/paulcbetts/followers",
      "following_url": "https://api.github.com/users/paulcbetts/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulcbetts/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulcbetts/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulcbetts/subscriptions",
      "organizations_url": "https://api.github.com/users/paulcbetts/orgs",
      "repos_url": "https://api.github.com/users/paulcbetts/repos",
      "events_url": "https://api.github.com/users/paulcbetts/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulcbetts/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T19:06:51Z",
    "updated_at": "2016-04-19T19:06:51Z",
    "body": "We have this in our app and it seems to work:\n\n``` js\nimport logger from '../../logger';\nimport {Observable} from 'rx';\nimport shell from 'shell';\nimport url from 'url';\n\n/**\n * The protocols that we will try to open via `shell`\n */ \nconst VALID_SHELL_PROTOCOLS = ['http:', 'https:', 'mailto:', 'skype:', 'spotify:',\n  'live:', 'callto:', 'tel:', 'im:', 'sip:', 'sips:'];\n\nclass ExternalLinkBehavior {\n\n  /**  \n   * Opens external links in the default browser, or performs the OS default\n   * action (e.g., open mail or Skype).\n   *    \n   * @param  {WebContents} webView  The web contents to apply this behavior to\n   * @return {Disposable}           A Disposable that will undo what the method did   \n   */   \n  setup(webView) {\n    return Observable.fromEvent(webView, 'new-window', (e, urlString) => {\n      // NB: On `webview` tags, the event includes the URL. But on\n      // `WebContents`, it's the second parameter.\n      return e.url ? {e, urlString: e.url} : {e, urlString};\n\n    }).subscribe(({e, urlString}) => {\n      try {\n        e.preventDefault();\n        let theUrl = url.parse(urlString);\n\n        if (!VALID_SHELL_PROTOCOLS.includes(theUrl.protocol)) {\n          throw new Error(\"Invalid protocol\");\n        }\n\n        let realUrl = url.format(this.escapeUrlWhenNeeded(theUrl));\n\n        logger.info(`Opening external window to ${realUrl}`);\n        shell.openExternal(realUrl);\n      } catch (error) {\n        logger.warn(`Ignoring ${urlString} due to ${error.message}`);\n      }\n    });\n  }\n\n  /**\n   * Escape URLs that have invalid characters before sending them to\n   * openExternal. The MS sends down URLs that are technically invalid according\n   * to spec (i.e. contain Unicode characters). We need to escape away the\n   * characters before we hand them off.\n   *\n   * When people complain that their invalid URIs are being encoded (and they\n   * will!), you can point them to page 11 of https://tools.ietf.org/html/rfc3986\n   *\n   * @param  {Url} parsedUrl    The return value of `url.parse`\n   * @return {Url}              The same data but with escaped query and hash\n   *                            sections\n   * @private\n   */\n  escapeUrlWhenNeeded(parsedUrl) {\n    const safeChars = /^[0-9a-zA-Z\\$-_\\.\\+\\!'\\(\\)]*$/;\n    if (!(parsedUrl.hash || ' ').substring(1).match(safeChars)) {\n      logger.info(\"Reformatting URL hash section\");\n\n      // NB: .hash includes the hash itself for whatever reason\n      parsedUrl.hash = `#${encodeURIComponent(parsedUrl.hash.substring(1))}`;\n    }\n\n    if (!(parsedUrl.query || '').match(safeChars)) {\n      logger.info(\"Reformatting URL query section\");\n      parsedUrl.query = encodeURIComponent(parsedUrl.query);\n    }\n\n    return parsedUrl;\n  }\n}\n\nlet behavior = new ExternalLinkBehavior();\nexport default behavior;\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212076863",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212076863",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212076863,
    "user": {
      "login": "diracdeltas",
      "id": 549654,
      "avatar_url": "https://avatars2.githubusercontent.com/u/549654?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diracdeltas",
      "html_url": "https://github.com/diracdeltas",
      "followers_url": "https://api.github.com/users/diracdeltas/followers",
      "following_url": "https://api.github.com/users/diracdeltas/following{/other_user}",
      "gists_url": "https://api.github.com/users/diracdeltas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diracdeltas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diracdeltas/subscriptions",
      "organizations_url": "https://api.github.com/users/diracdeltas/orgs",
      "repos_url": "https://api.github.com/users/diracdeltas/repos",
      "events_url": "https://api.github.com/users/diracdeltas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diracdeltas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T19:22:28Z",
    "updated_at": "2016-04-19T19:22:28Z",
    "body": "> Why doesn't the standard ways of blocking opening URLs work in this scenario, it seems weird that it wouldn't go through that code path\n\nYou mean like `webRequest`? External schemes appear to be handled before they get to `onBeforeRequest`.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212078118",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212078118",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212078118,
    "user": {
      "login": "diracdeltas",
      "id": 549654,
      "avatar_url": "https://avatars2.githubusercontent.com/u/549654?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diracdeltas",
      "html_url": "https://github.com/diracdeltas",
      "followers_url": "https://api.github.com/users/diracdeltas/followers",
      "following_url": "https://api.github.com/users/diracdeltas/following{/other_user}",
      "gists_url": "https://api.github.com/users/diracdeltas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diracdeltas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diracdeltas/subscriptions",
      "organizations_url": "https://api.github.com/users/diracdeltas/orgs",
      "repos_url": "https://api.github.com/users/diracdeltas/repos",
      "events_url": "https://api.github.com/users/diracdeltas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diracdeltas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T19:26:29Z",
    "updated_at": "2016-04-19T19:26:29Z",
    "body": "Ah, I see, you filter requests in the `new-window` listener. Will try that, thanks.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/212108481",
    "html_url": "https://github.com/electron/electron/issues/5200#issuecomment-212108481",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/5200",
    "id": 212108481,
    "user": {
      "login": "diracdeltas",
      "id": 549654,
      "avatar_url": "https://avatars2.githubusercontent.com/u/549654?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/diracdeltas",
      "html_url": "https://github.com/diracdeltas",
      "followers_url": "https://api.github.com/users/diracdeltas/followers",
      "following_url": "https://api.github.com/users/diracdeltas/following{/other_user}",
      "gists_url": "https://api.github.com/users/diracdeltas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/diracdeltas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/diracdeltas/subscriptions",
      "organizations_url": "https://api.github.com/users/diracdeltas/orgs",
      "repos_url": "https://api.github.com/users/diracdeltas/repos",
      "events_url": "https://api.github.com/users/diracdeltas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/diracdeltas/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-19T20:17:04Z",
    "updated_at": "2016-04-19T20:17:04Z",
    "body": "@paulcbetts I don't think your method works in general, ex: preventing skype from opening when the user visits https://join.skype.com/ocChbo2ozTef. It certainly works if the page is launching skype via `window.open('skype:foobar')`, but the `new-window` event doesn't fire if the page is simply making a request to `skype:foobar`. \n"
  }
]