[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/303372673",
    "html_url": "https://github.com/electron/electron/issues/9563#issuecomment-303372673",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9563",
    "id": 303372673,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T11:43:40Z",
    "updated_at": "2017-05-23T11:43:40Z",
    "body": "@sindresorhus `Response` objects can't be serialized.  It's the equivalent of running `JSON.stringify(resp)` which if you run in the console will return `'{}'`.\r\n\r\nNothing really we can do about that, to achieve your use case you'll probably have to set up some kind of custom object which can return the values / map function to the response in the renderer process.  Kind of the opposite of our `remote` module just asynchronous "
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/303653160",
    "html_url": "https://github.com/electron/electron/issues/9563#issuecomment-303653160",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9563",
    "id": 303653160,
    "user": {
      "login": "sindresorhus",
      "id": 170270,
      "avatar_url": "https://avatars2.githubusercontent.com/u/170270?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sindresorhus",
      "html_url": "https://github.com/sindresorhus",
      "followers_url": "https://api.github.com/users/sindresorhus/followers",
      "following_url": "https://api.github.com/users/sindresorhus/following{/other_user}",
      "gists_url": "https://api.github.com/users/sindresorhus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sindresorhus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sindresorhus/subscriptions",
      "organizations_url": "https://api.github.com/users/sindresorhus/orgs",
      "repos_url": "https://api.github.com/users/sindresorhus/repos",
      "events_url": "https://api.github.com/users/sindresorhus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sindresorhus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-24T08:20:47Z",
    "updated_at": "2017-05-24T08:20:47Z",
    "body": "@MarshallOfSound I didn't realize the result was serialized. I assumed it worked like `remote.require()` just the other way, and that the methods were proxied. I think it would be very useful if it worked like that. If the result is an object, create a local Proxy object, and when a method is called on it, send the call over IPC, call the correct method, and then return the result. What do you think?"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/303685062",
    "html_url": "https://github.com/electron/electron/issues/9563#issuecomment-303685062",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9563",
    "id": 303685062,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-24T10:33:23Z",
    "updated_at": "2017-05-24T10:33:23Z",
    "body": "@sindresorhus That kind of communication is only possible in the direction the `remote` module currently works in.  Syncronous IPC communication (required for the `remote` module) is only from renderer -> main, so having an object in the main process represent an object in the renderer process would result in all syncronous methods becoming asyncronous.  This makes using it much more difficult to use for synchronous methods (not in the `fetch` case, they're async anyway)."
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/303777078",
    "html_url": "https://github.com/electron/electron/issues/9563#issuecomment-303777078",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/9563",
    "id": 303777078,
    "user": {
      "login": "sindresorhus",
      "id": 170270,
      "avatar_url": "https://avatars2.githubusercontent.com/u/170270?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sindresorhus",
      "html_url": "https://github.com/sindresorhus",
      "followers_url": "https://api.github.com/users/sindresorhus/followers",
      "following_url": "https://api.github.com/users/sindresorhus/following{/other_user}",
      "gists_url": "https://api.github.com/users/sindresorhus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sindresorhus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sindresorhus/subscriptions",
      "organizations_url": "https://api.github.com/users/sindresorhus/orgs",
      "repos_url": "https://api.github.com/users/sindresorhus/repos",
      "events_url": "https://api.github.com/users/sindresorhus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sindresorhus/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-24T16:24:58Z",
    "updated_at": "2017-05-24T16:24:58Z",
    "body": "Would it be possible to implement synchronous IPC communication from main to renderer?"
  }
]