[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/254083477",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-254083477",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 254083477,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-16T23:23:48Z",
    "updated_at": "2016-10-16T23:23:48Z",
    "body": "@pfrazee Do you have the crash dump?  Use `export ELECTRON_ENABLE_STACK_DUMPING=true` to get the full stack trace when Electron crashes.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/254089432",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-254089432",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 254089432,
    "user": {
      "login": "pfrazee",
      "id": 1270099,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1270099?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pfrazee",
      "html_url": "https://github.com/pfrazee",
      "followers_url": "https://api.github.com/users/pfrazee/followers",
      "following_url": "https://api.github.com/users/pfrazee/following{/other_user}",
      "gists_url": "https://api.github.com/users/pfrazee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pfrazee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pfrazee/subscriptions",
      "organizations_url": "https://api.github.com/users/pfrazee/orgs",
      "repos_url": "https://api.github.com/users/pfrazee/repos",
      "events_url": "https://api.github.com/users/pfrazee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pfrazee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-17T00:48:21Z",
    "updated_at": "2016-10-17T00:48:21Z",
    "body": "@MarshallOfSound here's what it gives me:\n\n```\nReceived signal 11 SEGV_MAPERR 000100000000\n [0x000102d1f3b6]\n [0x7fff842f052a]\n [0x7fc7540c7a00]\n [0x000102bd81ee]\n [0x000102ca3b27]\n [0x000102ca4321]\n [0x000102ca426f]\n [0x000102ca4230]\n [0x000102ca3fd0]\n [0x000102bc1ae3]\n [0x000102bc2cdf]\n [0x000102bc2cc3]\n [0x000102bc2bda]\n [0x000102c012fc]\n [0x000102c01046]\n [0x000102c01500]\n [0x000102c014d9]\n [0x000102c014c3]\n [0x000102c0136a]\n [0x000102b7d67b]\n [0x000102bc77ee]\n [0x000102bc7f30]\n [0x000102bc7ee9]\n [0x000102bc7ecf]\n [0x000102bc7d0a]\n [0x000102b7d67b]\n [0x000102b7d497]\n [0x000102b7d223]\n [0x000102b7d428]\n [0x000102b7d3e9]\n [0x000102b7d3d3]\n [0x000102b7d28a]\n [0x000102b3bbbc]\n [0x000102c36cd2]\n [0x000102c37282]\n [0x000102c37269]\n [0x000102c37252]\n [0x000102c3718d]\n [0x000102c3780f]\n [0x000102c374a0]\n [0x000102c3733c]\n [0x000106c4861a]\n [0x000106c828be]\n [0x000106cad14f]\n [0x284493006147]\n [0x2844931cd201]\n[end of stack trace]\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255653336",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255653336",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255653336,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-24T05:50:59Z",
    "updated_at": "2016-10-24T05:50:59Z",
    "body": "@pfrazee are you able to reproduce this with 1.4.4?\n\nI tried your sample app on 10.11.6 but it did not crash on 1.4.4\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255738571",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255738571",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255738571,
    "user": {
      "login": "pfrazee",
      "id": 1270099,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1270099?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pfrazee",
      "html_url": "https://github.com/pfrazee",
      "followers_url": "https://api.github.com/users/pfrazee/followers",
      "following_url": "https://api.github.com/users/pfrazee/following{/other_user}",
      "gists_url": "https://api.github.com/users/pfrazee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pfrazee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pfrazee/subscriptions",
      "organizations_url": "https://api.github.com/users/pfrazee/orgs",
      "repos_url": "https://api.github.com/users/pfrazee/repos",
      "events_url": "https://api.github.com/users/pfrazee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pfrazee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T13:22:01Z",
    "updated_at": "2016-10-24T13:22:01Z",
    "body": "I'll give it a try\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255765155",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255765155",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255765155,
    "user": {
      "login": "pfrazee",
      "id": 1270099,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1270099?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pfrazee",
      "html_url": "https://github.com/pfrazee",
      "followers_url": "https://api.github.com/users/pfrazee/followers",
      "following_url": "https://api.github.com/users/pfrazee/following{/other_user}",
      "gists_url": "https://api.github.com/users/pfrazee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pfrazee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pfrazee/subscriptions",
      "organizations_url": "https://api.github.com/users/pfrazee/orgs",
      "repos_url": "https://api.github.com/users/pfrazee/repos",
      "events_url": "https://api.github.com/users/pfrazee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pfrazee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-24T14:58:23Z",
    "updated_at": "2016-10-24T14:58:23Z",
    "body": "Nope, still crashing for me with 1.4.4. If you could reproduce it on your machine, how would you debug this? I might just need to dig into the codebase and start setting breakpoints.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255900209",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255900209",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255900209,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-25T00:05:33Z",
    "updated_at": "2016-10-25T00:05:33Z",
    "body": "> If you could reproduce it on your machine, how would you debug this?\n\nDoes the standard mac crash dialog appear for you when this happens? Usually it contains a stack trace with symbols that helps to narrow down the issue.\n\n<img width=\"1112\" alt=\"screen shot 2016-10-25 at 9 06 50 am\" src=\"https://cloud.githubusercontent.com/assets/671378/19668348/2aa5ae4e-9a92-11e6-8a08-18593d1b59a0.png\">\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255903523",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255903523",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255903523,
    "user": {
      "login": "pfrazee",
      "id": 1270099,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1270099?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pfrazee",
      "html_url": "https://github.com/pfrazee",
      "followers_url": "https://api.github.com/users/pfrazee/followers",
      "following_url": "https://api.github.com/users/pfrazee/following{/other_user}",
      "gists_url": "https://api.github.com/users/pfrazee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pfrazee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pfrazee/subscriptions",
      "organizations_url": "https://api.github.com/users/pfrazee/orgs",
      "repos_url": "https://api.github.com/users/pfrazee/repos",
      "events_url": "https://api.github.com/users/pfrazee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pfrazee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T00:29:19Z",
    "updated_at": "2016-10-25T00:29:19Z",
    "body": "Yes, here's the dump: https://gist.github.com/pfrazee/6691078526f08d7703569def3af15341\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255905028",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255905028",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255905028,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-25T00:40:20Z",
    "updated_at": "2016-10-25T00:40:20Z",
    "body": "Tried again, can definitely reproduce this on master using your example, thanks for providing it 👍 \n\nNot sure from the stack trace why this is happening though.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255905117",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255905117",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255905117,
    "user": {
      "login": "pfrazee",
      "id": 1270099,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1270099?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pfrazee",
      "html_url": "https://github.com/pfrazee",
      "followers_url": "https://api.github.com/users/pfrazee/followers",
      "following_url": "https://api.github.com/users/pfrazee/following{/other_user}",
      "gists_url": "https://api.github.com/users/pfrazee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pfrazee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pfrazee/subscriptions",
      "organizations_url": "https://api.github.com/users/pfrazee/orgs",
      "repos_url": "https://api.github.com/users/pfrazee/repos",
      "events_url": "https://api.github.com/users/pfrazee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pfrazee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T00:40:58Z",
    "updated_at": "2016-10-25T00:40:58Z",
    "body": "Hmm, is there any way to translate the stack trace's memory addresses to lines in the code? Maybe with a debug build?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255905282",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255905282",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255905282,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-25T00:42:15Z",
    "updated_at": "2016-10-25T00:42:15Z",
    "body": "> is there any way to translate the stack trace's memory addresses to lines in the code?\n\nHere is the stack for the crashed thread from a debug build:\n\n```\nThread 0 Crashed:: CrBrowserMain  Dispatch queue: com.apple.main-thread\n0   libbase.dylib                   0x000000010dd17317 base::internal::CallbackBase<(base::internal::CopyMode)1>::operator=(base::internal::CallbackBase<(base::internal::CopyMode)1>&&) + 39\n1   com.github.electron.framework   0x000000010b51a7a7 base::Callback<void (), (base::internal::CopyMode)1>::operator=(base::Callback<void (), (base::internal::CopyMode)1>&&) + 39 (callback_forward.h:22)\n2   com.github.electron.framework   0x000000010b77828d brightray::(anonymous namespace)::OnWebNotificationAllowed(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool) + 1437 (platform_notification_service.cc:44)\n3   com.github.electron.framework   0x000000010b779575 void base::internal::RunnableAdapter<void (*)(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool)>::Run<brightray::BrowserClient* const&, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>* const&, bool, bool>(brightray::BrowserClient* const&&&, SkBitmap const&&&, content::PlatformNotificationData const&&&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >&&, base::Callback<void (), (base::internal::CopyMode)1>* const&&&, bool&&, bool&&) const + 597 (bind_internal.h:144)\n4   com.github.electron.framework   0x000000010b779261 void base::internal::InvokeHelper<false, void>::MakeItSo<base::internal::RunnableAdapter<void (*)(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool)> const&, brightray::BrowserClient* const&, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>* const&, bool, bool>(base::internal::RunnableAdapter<void (*)(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool)> const&&&, brightray::BrowserClient* const&&&, SkBitmap const&&&, content::PlatformNotificationData const&&&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >&&, base::Callback<void (), (base::internal::CopyMode)1>* const&&&, bool&&, bool&&) + 161 (bind_internal.h:297)\n5   com.github.electron.framework   0x000000010b7790b5 void base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool)>, brightray::BrowserClient*&, SkBitmap const&, content::PlatformNotificationData const&, base::internal::PassedWrapper<std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> > >, base::Callback<void (), (base::internal::CopyMode)1>*&>, void (bool, bool)>::RunImpl<base::internal::RunnableAdapter<void (*)(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool)> const&, std::__1::tuple<brightray::BrowserClient*, SkBitmap, content::PlatformNotificationData, base::internal::PassedWrapper<std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> > >, base::Callback<void (), (base::internal::CopyMode)1>*> const&, 0ul, 1ul, 2ul, 3ul, 4ul>(base::internal::RunnableAdapter<void (*)(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool)> const&&&, std::__1::tuple<brightray::BrowserClient*, SkBitmap, content::PlatformNotificationData, base::internal::PassedWrapper<std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> > >, base::Callback<void (), (base::internal::CopyMode)1>*> const&&&, base::IndexSequence<0ul, 1ul, 2ul, 3ul, 4ul>, bool&&, bool&&) + 421 (bind_internal.h:363)\n6   com.github.electron.framework   0x000000010b778a14 base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(brightray::BrowserClient*, SkBitmap const&, content::PlatformNotificationData const&, std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> >, base::Callback<void (), (base::internal::CopyMode)1>*, bool, bool)>, brightray::BrowserClient*&, SkBitmap const&, content::PlatformNotificationData const&, base::internal::PassedWrapper<std::__1::unique_ptr<content::DesktopNotificationDelegate, std::__1::default_delete<content::DesktopNotificationDelegate> > >, base::Callback<void (), (base::internal::CopyMode)1>*&>, void (bool, bool)>::Run(base::internal::BindStateBase*, bool&&, bool&&) + 84 (bind_internal.h:342)\n7   com.github.electron.framework   0x000000010b4d1a36 base::Callback<void (bool, bool), (base::internal::CopyMode)1>::Run(bool, bool) const + 86 (callback.h:389)\n8   com.github.electron.framework   0x000000010b4d7b3c void base::internal::InvokeHelper<false, void>::MakeItSo<base::Callback<void (bool, bool), (base::internal::CopyMode)1> const&, bool const&, bool>(base::Callback<void (bool, bool), (base::internal::CopyMode)1> const&&&, bool const&&&, bool&&) + 76 (bind_internal.h:297)\n9   com.github.electron.framework   0x000000010b4d7ae0 void base::internal::Invoker<base::internal::BindState<base::Callback<void (bool, bool), (base::internal::CopyMode)1>, bool>, void (bool)>::RunImpl<base::Callback<void (bool, bool), (base::internal::CopyMode)1> const&, std::__1::tuple<bool> const&, 0ul>(base::Callback<void (bool, bool), (base::internal::CopyMode)1> const&&&, std::__1::tuple<bool> const&&&, base::IndexSequence<0ul>, bool&&) + 96 (bind_internal.h:363)\n10  com.github.electron.framework   0x000000010b4d7944 base::internal::Invoker<base::internal::BindState<base::Callback<void (bool, bool), (base::internal::CopyMode)1>, bool>, void (bool)>::Run(base::internal::BindStateBase*, bool&&) + 68 (bind_internal.h:342)\n11  com.github.electron.framework   0x000000010b59c5b2 base::Callback<void (bool), (base::internal::CopyMode)1>::Run(bool) const + 66 (callback.h:389)\n12  com.github.electron.framework   0x000000010b59c1f7 atom::(anonymous namespace)::OnPermissionResponse(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus) + 39 (web_contents_permission_helper.cc:39)\n13  com.github.electron.framework   0x000000010b59c8a7 void base::internal::RunnableAdapter<void (*)(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)>::Run<base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus>(base::Callback<void (bool), (base::internal::CopyMode)1> const&&&, blink::mojom::PermissionStatus&&) const + 55 (bind_internal.h:144)\n14  com.github.electron.framework   0x000000010b59c83d void base::internal::InvokeHelper<false, void>::MakeItSo<base::internal::RunnableAdapter<void (*)(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&, base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus>(base::internal::RunnableAdapter<void (*)(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&&&, base::Callback<void (bool), (base::internal::CopyMode)1> const&&&, blink::mojom::PermissionStatus&&) + 61 (bind_internal.h:297)\n15  com.github.electron.framework   0x000000010b59c7f0 void base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)>, base::Callback<void (bool), (base::internal::CopyMode)1> const&>, void (blink::mojom::PermissionStatus)>::RunImpl<base::internal::RunnableAdapter<void (*)(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&, std::__1::tuple<base::Callback<void (bool), (base::internal::CopyMode)1> > const&, 0ul>(base::internal::RunnableAdapter<void (*)(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&&&, std::__1::tuple<base::Callback<void (bool), (base::internal::CopyMode)1> > const&&&, base::IndexSequence<0ul>, blink::mojom::PermissionStatus&&) + 96 (bind_internal.h:363)\n16  com.github.electron.framework   0x000000010b59c664 base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(base::Callback<void (bool), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)>, base::Callback<void (bool), (base::internal::CopyMode)1> const&>, void (blink::mojom::PermissionStatus)>::Run(base::internal::BindStateBase*, blink::mojom::PermissionStatus&&) + 68 (bind_internal.h:342)\n17  com.github.electron.framework   0x000000010b44b04d base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>::Run(blink::mojom::PermissionStatus) const + 61 (callback.h:389)\n18  com.github.electron.framework   0x000000010b4e74ab atom::AtomPermissionManager::OnPermissionResponse(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus) + 667 (atom_permission_manager.cc:107)\n19  com.github.electron.framework   0x000000010b4e8e89 void base::internal::RunnableAdapter<void (atom::AtomPermissionManager::*)(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)>::Run<atom::AtomPermissionManager*, int const&, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus>(atom::AtomPermissionManager*&&, int const&&&, GURL const&&&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&&&, blink::mojom::PermissionStatus&&) const + 185 (bind_internal.h:171)\n20  com.github.electron.framework   0x000000010b4e8d9d void base::internal::InvokeHelper<false, void>::MakeItSo<base::internal::RunnableAdapter<void (atom::AtomPermissionManager::*)(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&, atom::AtomPermissionManager*, int const&, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus>(base::internal::RunnableAdapter<void (atom::AtomPermissionManager::*)(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&&&, atom::AtomPermissionManager*&&, int const&&&, GURL const&&&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&&&, blink::mojom::PermissionStatus&&) + 109 (bind_internal.h:297)\n21  com.github.electron.framework   0x000000010b4e8d1a void base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (atom::AtomPermissionManager::*)(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)>, base::internal::UnretainedWrapper<atom::AtomPermissionManager>, int&, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&>, void (blink::mojom::PermissionStatus)>::RunImpl<base::internal::RunnableAdapter<void (atom::AtomPermissionManager::*)(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&, std::__1::tuple<base::internal::UnretainedWrapper<atom::AtomPermissionManager>, int, GURL, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> > const&, 0ul, 1ul, 2ul, 3ul>(base::internal::RunnableAdapter<void (atom::AtomPermissionManager::*)(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)> const&&&, std::__1::tuple<base::internal::UnretainedWrapper<atom::AtomPermissionManager>, int, GURL, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> > const&&&, base::IndexSequence<0ul, 1ul, 2ul, 3ul>, blink::mojom::PermissionStatus&&) + 282 (bind_internal.h:363)\n22  com.github.electron.framework   0x000000010b4e87d4 base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (atom::AtomPermissionManager::*)(int, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, blink::mojom::PermissionStatus)>, base::internal::UnretainedWrapper<atom::AtomPermissionManager>, int&, GURL const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&>, void (blink::mojom::PermissionStatus)>::Run(base::internal::BindStateBase*, blink::mojom::PermissionStatus&&) + 68 (bind_internal.h:342)\n23  com.github.electron.framework   0x000000010b44b04d base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>::Run(blink::mojom::PermissionStatus) const + 61 (callback.h:389)\n24  com.github.electron.framework   0x000000010b44ac71 mate::internal::Invoker<mate::internal::IndicesHolder<0ul>, blink::mojom::PermissionStatus>::DispatchToCallback(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>) + 65 (function_template.h:202)\n25  com.github.electron.framework   0x000000010b44a8a2 mate::internal::NativeFunctionInvoker<void (blink::mojom::PermissionStatus)>::Go(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*) + 82 (callback.h:121)\n26  com.github.electron.framework   0x000000010b44abc0 void base::internal::RunnableAdapter<void (*)(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*)>::Run<base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, mate::Arguments*>(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&&&, mate::Arguments*&&) const + 80 (bind_internal.h:144)\n27  com.github.electron.framework   0x000000010b44ab3d void base::internal::InvokeHelper<false, void>::MakeItSo<base::internal::RunnableAdapter<void (*)(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*)> const&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&, mate::Arguments*>(base::internal::RunnableAdapter<void (*)(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*)> const&&&, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&&&, mate::Arguments*&&) + 61 (bind_internal.h:297)\n28  com.github.electron.framework   0x000000010b44aaf0 void base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*)>, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&>, void (mate::Arguments*)>::RunImpl<base::internal::RunnableAdapter<void (*)(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*)> const&, std::__1::tuple<base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> > const&, 0ul>(base::internal::RunnableAdapter<void (*)(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*)> const&&&, std::__1::tuple<base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> > const&&&, base::IndexSequence<0ul>, mate::Arguments*&&) + 96 (bind_internal.h:363)\n29  com.github.electron.framework   0x000000010b44a964 base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1>, mate::Arguments*)>, base::Callback<void (blink::mojom::PermissionStatus), (base::internal::CopyMode)1> const&>, void (mate::Arguments*)>::Run(base::internal::BindStateBase*, mate::Arguments*&&) + 68 (bind_internal.h:342)\n30  com.github.electron.framework   0x000000010b3c0181 base::Callback<void (mate::Arguments*), (base::internal::CopyMode)1>::Run(mate::Arguments*) const + 65 (callback.h:389)\n31  com.github.electron.framework   0x000000010b628df7 mate::internal::(anonymous namespace)::CallTranslater(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*) + 503 (callback.cc:40)\n32  com.github.electron.framework   0x000000010b629a5e void base::internal::RunnableAdapter<void (*)(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)>::Run<v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*>(v8::Local<v8::External>&&, v8::Local<v8::Object>&&, mate::Arguments*&&) const + 94 (bind_internal.h:144)\n33  com.github.electron.framework   0x000000010b6299ed void base::internal::InvokeHelper<false, void>::MakeItSo<base::internal::RunnableAdapter<void (*)(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)> const&, v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*>(base::internal::RunnableAdapter<void (*)(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)> const&&&, v8::Local<v8::External>&&, v8::Local<v8::Object>&&, mate::Arguments*&&) + 77 (bind_internal.h:297)\n34  com.github.electron.framework   0x000000010b629991 void base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)> >, void (v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)>::RunImpl<base::internal::RunnableAdapter<void (*)(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)> const&, std::__1::tuple<> const&>(base::internal::RunnableAdapter<void (*)(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)> const&&&, std::__1::tuple<> const&&&, base::IndexSequence<>, v8::Local<v8::External>&&, v8::Local<v8::Object>&&, mate::Arguments*&&) + 81 (bind_internal.h:363)\n35  com.github.electron.framework   0x000000010b62988f base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (*)(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)> >, void (v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)>::Run(base::internal::BindStateBase*, v8::Local<v8::External>&&, v8::Local<v8::Object>&&, mate::Arguments*&&) + 111 (bind_internal.h:342)\n36  com.github.electron.framework   0x000000010b62a3c1 base::Callback<void (v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*), (base::internal::CopyMode)1>::Run(v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*) const + 97 (callback.h:389)\n37  com.github.electron.framework   0x000000010b629d4a mate::internal::Invoker<mate::internal::IndicesHolder<0ul, 1ul, 2ul>, v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*>::DispatchToCallback(base::Callback<void (v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*), (base::internal::CopyMode)1>) + 90 (function_template.h:202)\n38  com.github.electron.framework   0x000000010b629b53 mate::internal::Dispatcher<void (v8::Local<v8::External>, v8::Local<v8::Object>, mate::Arguments*)>::DispatchToCallback(v8::FunctionCallbackInfo<v8::Value> const&) + 163 (function_template.h:236)\n39  libv8.dylib                     0x000000010d0a2cca v8::internal::FunctionCallbackArguments::Call(void (*)(v8::FunctionCallbackInfo<v8::Value> const&)) + 298\n40  libv8.dylib                     0x000000010d0dcf6e 0x10d070000 + 446318\n41  libv8.dylib                     0x000000010d1077ff 0x10d070000 + 620543\n42  ???                             0x00001c5567e06147 0 + 31153140556103\n43  ???                             0x00001c5567fd9841 0 + 31153142470721\n44  ???                             0x00001c5567fd95a3 0 + 31153142470051\n45  ???                             0x00001c5567fd8dd3 0 + 31153142468051\n46  ???                             0x00001c5567e42263 0 + 31153140802147\n47  ???                             0x00001c5567e25d6f 0 + 31153140686191\n48  libv8.dylib                     0x000000010d3c3460 0x10d070000 + 3486816\n49  libv8.dylib                     0x000000010d3c3269 v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*) + 313\n50  libv8.dylib                     0x000000010d08f6cd v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*) + 541\n51  libnode.dylib                   0x000000010c77ea4e node::AsyncWrap::MakeCallback(v8::Local<v8::Function>, int, v8::Local<v8::Value>*) + 1438 (async-wrap.cc:240)\n52  libnode.dylib                   0x000000010c806468 node::AsyncWrap::MakeCallback(unsigned int, int, v8::Local<v8::Value>*) + 152 (async-wrap-inl.h:120)\n53  libnode.dylib                   0x000000010c8063ac node::TimerWrap::OnTimeout(uv_timer_s*) + 108 (timer_wrap.cc:95)\n54  libnode.dylib                   0x000000010c8756b0 uv__run_timers + 144 (timer.c:154)\n55  libnode.dylib                   0x000000010c863174 uv_run + 116 (core.c:346)\n56  com.github.electron.framework   0x000000010b63adda atom::NodeBindings::UvRunOnce() + 138 (node_bindings.cc:242)\n57  com.github.electron.framework   0x000000010b63c39d void base::internal::RunnableAdapter<void (atom::NodeBindings::*)()>::Run<base::WeakPtr<atom::NodeBindings> const&>(base::WeakPtr<atom::NodeBindings> const&&&) const + 125 (bind_internal.h:171)\n58  com.github.electron.framework   0x000000010b63c2c3 void base::internal::InvokeHelper<true, void>::MakeItSo<base::internal::RunnableAdapter<void (atom::NodeBindings::*)()> const&, base::WeakPtr<atom::NodeBindings> const&>(base::internal::RunnableAdapter<void (atom::NodeBindings::*)()> const&&&, base::WeakPtr<atom::NodeBindings> const&&&) + 67 (bind_internal.h:311)\n59  com.github.electron.framework   0x000000010b63c270 void base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (atom::NodeBindings::*)()>, base::WeakPtr<atom::NodeBindings> >, void ()>::RunImpl<base::internal::RunnableAdapter<void (atom::NodeBindings::*)()> const&, std::__1::tuple<base::WeakPtr<atom::NodeBindings> > const&, 0ul>(base::internal::RunnableAdapter<void (atom::NodeBindings::*)()> const&&&, std::__1::tuple<base::WeakPtr<atom::NodeBindings> > const&&&, base::IndexSequence<0ul>) + 80 (bind_internal.h:363)\n60  com.github.electron.framework   0x000000010b63c0cc base::internal::Invoker<base::internal::BindState<base::internal::RunnableAdapter<void (atom::NodeBindings::*)()>, base::WeakPtr<atom::NodeBindings> >, void ()>::Run(base::internal::BindStateBase*) + 44 (bind_internal.h:342)\n61  libbase.dylib                   0x000000010dd1e45b base::debug::TaskAnnotator::RunTask(char const*, base::PendingTask const&) + 187\n62  libbase.dylib                   0x000000010dd4990c base::MessageLoop::RunTask(base::PendingTask const&) + 508\n63  libbase.dylib                   0x000000010dd49c3c base::MessageLoop::DeferOrRunPendingTask(base::PendingTask const&) + 44\n64  libbase.dylib                   0x000000010dd4a00b base::MessageLoop::DoWork() + 299\n65  libbase.dylib                   0x000000010dd0efad 0x10dd0c000 + 12205\n66  libbase.dylib                   0x000000010dd3c81a base::mac::CallWithEHFrame(void () block_pointer) + 10\n67  libbase.dylib                   0x000000010dd0e9b4 0x10dd0c000 + 10676\n68  com.apple.CoreFoundation        0x00007fff9227c881 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\n69  com.apple.CoreFoundation        0x00007fff9225bfbc __CFRunLoopDoSources0 + 556\n70  com.apple.CoreFoundation        0x00007fff9225b4df __CFRunLoopRun + 927\n71  com.apple.CoreFoundation        0x00007fff9225aed8 CFRunLoopRunSpecific + 296\n72  com.apple.HIToolbox             0x00007fff970f7935 RunCurrentEventLoopInMode + 235\n73  com.apple.HIToolbox             0x00007fff970f776f ReceiveNextEventCommon + 432\n74  com.apple.HIToolbox             0x00007fff970f75af _BlockUntilNextEventMatchingListInModeWithFilter + 71\n75  com.apple.AppKit                0x00007fff85fb1df6 _DPSNextEvent + 1067\n76  com.apple.AppKit                0x00007fff85fb1226 -[NSApplication _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 454\n77  com.apple.AppKit                0x00007fff85fa5d80 -[NSApplication run] + 682\n78  libbase.dylib                   0x000000010dd0f83e 0x10dd0c000 + 14398\n79  libbase.dylib                   0x000000010dd0ee04 0x10dd0c000 + 11780\n80  libbase.dylib                   0x000000010dd694d1 base::RunLoop::Run() + 113\n81  libcontent.dylib                0x000000010ec75cfb content::BrowserMainLoop::MainMessageLoopRun() + 155\n82  libcontent.dylib                0x000000010ec75b50 content::BrowserMainLoop::RunMainMessageLoopParts() + 64\n83  libcontent.dylib                0x000000010ec780c2 0x10ebc5000 + 733378\n84  libcontent.dylib                0x000000010ec7209d content::BrowserMain(content::MainFunctionParams const&) + 173\n85  libcontent.dylib                0x000000010ebc9340 0x10ebc5000 + 17216\n86  libcontent.dylib                0x000000010ebc8526 content::ContentMain(content::ContentMainParams const&) + 54\n87  com.github.electron.framework   0x000000010b399fb8 AtomMain + 104 (atom_library_main.mm:24)\n88  com.github.electron             0x000000010b390eff main + 79 (atom_main.cc:142)\n89  libdyld.dylib                   0x00007fff973e75ad start + 1\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255906599",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255906599",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255906599,
    "user": {
      "login": "pfrazee",
      "id": 1270099,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1270099?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pfrazee",
      "html_url": "https://github.com/pfrazee",
      "followers_url": "https://api.github.com/users/pfrazee/followers",
      "following_url": "https://api.github.com/users/pfrazee/following{/other_user}",
      "gists_url": "https://api.github.com/users/pfrazee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pfrazee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pfrazee/subscriptions",
      "organizations_url": "https://api.github.com/users/pfrazee/orgs",
      "repos_url": "https://api.github.com/users/pfrazee/repos",
      "events_url": "https://api.github.com/users/pfrazee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pfrazee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T00:52:01Z",
    "updated_at": "2016-10-25T00:52:01Z",
    "body": "Ok thanks. Taking a pass now.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255917813",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255917813",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255917813,
    "user": {
      "login": "pfrazee",
      "id": 1270099,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1270099?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pfrazee",
      "html_url": "https://github.com/pfrazee",
      "followers_url": "https://api.github.com/users/pfrazee/followers",
      "following_url": "https://api.github.com/users/pfrazee/following{/other_user}",
      "gists_url": "https://api.github.com/users/pfrazee/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pfrazee/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pfrazee/subscriptions",
      "organizations_url": "https://api.github.com/users/pfrazee/orgs",
      "repos_url": "https://api.github.com/users/pfrazee/repos",
      "events_url": "https://api.github.com/users/pfrazee/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pfrazee/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-25T02:17:05Z",
    "updated_at": "2016-10-25T02:17:26Z",
    "body": "I'm fairly sure this is due to the copy operation, here: https://github.com/electron/brightray/blob/master/browser/platform_notification_service.cc#L44\n\n```\n*cancel_callback = base::Bind(&RemoveNotification, notification);\n```\n\nI'd wager the cancel_callback has been destroyed. Notice how Chrome implements this: https://chromium.googlesource.com/chromium/src.git/+/master/chrome/browser/notifications/platform_notification_service_impl.cc#296. They check whether the callback is truthy:\n\n```\n  if (cancel_callback) {\n#if defined(OS_WIN)\n    std::string profile_id =\n        base::WideToUTF8(profile->GetPath().BaseName().value());\n#elif defined(OS_POSIX)\n    std::string profile_id = profile->GetPath().BaseName().value();\n#endif\n    *cancel_callback =\n        base::Bind(&CancelNotification, notification.delegate_id(), profile_id,\n                   profile->IsOffTheRecord());\n  }\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255925710",
    "html_url": "https://github.com/electron/electron/issues/7645#issuecomment-255925710",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7645",
    "id": 255925710,
    "user": {
      "login": "kevinsawicki",
      "id": 671378,
      "avatar_url": "https://avatars0.githubusercontent.com/u/671378?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevinsawicki",
      "html_url": "https://github.com/kevinsawicki",
      "followers_url": "https://api.github.com/users/kevinsawicki/followers",
      "following_url": "https://api.github.com/users/kevinsawicki/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevinsawicki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevinsawicki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevinsawicki/subscriptions",
      "organizations_url": "https://api.github.com/users/kevinsawicki/orgs",
      "repos_url": "https://api.github.com/users/kevinsawicki/repos",
      "events_url": "https://api.github.com/users/kevinsawicki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevinsawicki/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-25T03:20:17Z",
    "updated_at": "2016-10-25T03:20:17Z",
    "body": "> They check whether the callback is truthy:\n\nHmm, yeah, that is interesting, I added that check but it is still crashing for me though.\n"
  }
]