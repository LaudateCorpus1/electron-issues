[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/138032643",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-138032643",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 138032643,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-09-06T02:34:22Z",
    "updated_at": "2015-09-06T02:34:22Z",
    "body": "What's deeplinking?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/138059945",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-138059945",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 138059945,
    "user": {
      "login": "hhammoud01",
      "id": 14010745,
      "avatar_url": "https://avatars1.githubusercontent.com/u/14010745?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hhammoud01",
      "html_url": "https://github.com/hhammoud01",
      "followers_url": "https://api.github.com/users/hhammoud01/followers",
      "following_url": "https://api.github.com/users/hhammoud01/following{/other_user}",
      "gists_url": "https://api.github.com/users/hhammoud01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hhammoud01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hhammoud01/subscriptions",
      "organizations_url": "https://api.github.com/users/hhammoud01/orgs",
      "repos_url": "https://api.github.com/users/hhammoud01/repos",
      "events_url": "https://api.github.com/users/hhammoud01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hhammoud01/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-06T09:32:01Z",
    "updated_at": "2015-09-06T09:32:01Z",
    "body": "when ur on an iphone and u enter in your browser a youtube link, it opens the youtube application if you have it installed.\nSame goes for many other applications.\nMany other examples are stated in the related wikipedia pages https://en.wikipedia.org/wiki/Deep_linking and https://en.wikipedia.org/wiki/Mobile_deep_linking (for example http://en.wikipedia.org/wiki/Deep_linking#Example is a deep link)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/138162176",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-138162176",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 138162176,
    "user": {
      "login": "zcbenz",
      "id": 639601,
      "avatar_url": "https://avatars3.githubusercontent.com/u/639601?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zcbenz",
      "html_url": "https://github.com/zcbenz",
      "followers_url": "https://api.github.com/users/zcbenz/followers",
      "following_url": "https://api.github.com/users/zcbenz/following{/other_user}",
      "gists_url": "https://api.github.com/users/zcbenz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zcbenz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zcbenz/subscriptions",
      "organizations_url": "https://api.github.com/users/zcbenz/orgs",
      "repos_url": "https://api.github.com/users/zcbenz/repos",
      "events_url": "https://api.github.com/users/zcbenz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zcbenz/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2015-09-07T02:34:09Z",
    "updated_at": "2015-09-07T02:34:09Z",
    "body": "There is no deep linking on desktop systems, the closest thing is `shell.openExternal`.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/141997092",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-141997092",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 141997092,
    "user": {
      "login": "MichaelOstermann",
      "id": 7288490,
      "avatar_url": "https://avatars0.githubusercontent.com/u/7288490?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MichaelOstermann",
      "html_url": "https://github.com/MichaelOstermann",
      "followers_url": "https://api.github.com/users/MichaelOstermann/followers",
      "following_url": "https://api.github.com/users/MichaelOstermann/following{/other_user}",
      "gists_url": "https://api.github.com/users/MichaelOstermann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MichaelOstermann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MichaelOstermann/subscriptions",
      "organizations_url": "https://api.github.com/users/MichaelOstermann/orgs",
      "repos_url": "https://api.github.com/users/MichaelOstermann/repos",
      "events_url": "https://api.github.com/users/MichaelOstermann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MichaelOstermann/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-09-21T14:21:30Z",
    "updated_at": "2015-09-21T14:21:30Z",
    "body": "There is something like that, when you open for example `macappstores://itunes.apple.com/us/app/xcode/id497799835?mt=12` in the browser (has to be opened via a user action like a click, not possible programmatically/typing in the url bar) it will actually open the mac appstore and show the page for xcode, [here's](http://fredandrandall.com/blog/2011/07/30/how-to-launch-your-macios-app-with-a-custom-url/) an article describing how to do that!\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/150872627",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-150872627",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 150872627,
    "user": {
      "login": "deesx",
      "id": 7711,
      "avatar_url": "https://avatars0.githubusercontent.com/u/7711?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deesx",
      "html_url": "https://github.com/deesx",
      "followers_url": "https://api.github.com/users/deesx/followers",
      "following_url": "https://api.github.com/users/deesx/following{/other_user}",
      "gists_url": "https://api.github.com/users/deesx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deesx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deesx/subscriptions",
      "organizations_url": "https://api.github.com/users/deesx/orgs",
      "repos_url": "https://api.github.com/users/deesx/repos",
      "events_url": "https://api.github.com/users/deesx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deesx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-10-24T23:47:29Z",
    "updated_at": "2015-10-24T23:48:12Z",
    "body": "@MichaelOstermann  is there a way to declare a `your_custom_scheme://` scheme in electron, as you do in a Xcode app  ?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/152850774",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-152850774",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 152850774,
    "user": {
      "login": "VojtechBartos",
      "id": 1526646,
      "avatar_url": "https://avatars1.githubusercontent.com/u/1526646?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/VojtechBartos",
      "html_url": "https://github.com/VojtechBartos",
      "followers_url": "https://api.github.com/users/VojtechBartos/followers",
      "following_url": "https://api.github.com/users/VojtechBartos/following{/other_user}",
      "gists_url": "https://api.github.com/users/VojtechBartos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/VojtechBartos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/VojtechBartos/subscriptions",
      "organizations_url": "https://api.github.com/users/VojtechBartos/orgs",
      "repos_url": "https://api.github.com/users/VojtechBartos/repos",
      "events_url": "https://api.github.com/users/VojtechBartos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/VojtechBartos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2015-11-01T18:32:19Z",
    "updated_at": "2015-11-01T18:32:43Z",
    "body": "There is definitely deep linking on Mac OS X and it works in same way as on iOS\n\n@bbnnt @hhammoud01 i haven't found way how you can do it directly via electron, but its definitely doable during packaging via [electron-packager](https://github.com/maxogden/electron-packager) via `protocols` attribute\n\n``` js\nimport packager from 'electron-packager'\n\nconst options = {\n    dir: './'\n    version: '0.34.1', // electron version\n    platform: 'darwin',\n    arch: 'x64',\n    'app-version': packageJson.version,\n    protocols: [\n      {\n        name: 'NameOfYourApp',\n        schemes: ['nameofyourapp']\n      }\n    ]\n};\n\npackager(options, err => {\n    if (err) throw err;\n});\n```\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/261757265",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-261757265",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 261757265,
    "user": {
      "login": "Ondross",
      "id": 575508,
      "avatar_url": "https://avatars3.githubusercontent.com/u/575508?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ondross",
      "html_url": "https://github.com/Ondross",
      "followers_url": "https://api.github.com/users/Ondross/followers",
      "following_url": "https://api.github.com/users/Ondross/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ondross/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ondross/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ondross/subscriptions",
      "organizations_url": "https://api.github.com/users/Ondross/orgs",
      "repos_url": "https://api.github.com/users/Ondross/repos",
      "events_url": "https://api.github.com/users/Ondross/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ondross/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-20T03:53:27Z",
    "updated_at": "2016-11-20T07:34:41Z",
    "body": "You can setup deep-linking (a protocol with parameters) in your app code, using `app.setAsDefaultProtocolClient()`\n\nSee: http://electron.atom.io/docs/all/#appsetasdefaultprotocolclientprotocol-path-args-macos-windows\n\nFor OSX, the URI details show up in the 'open-url' event, not process.argv.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/303408946",
    "html_url": "https://github.com/electron/electron/issues/2707#issuecomment-303408946",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/2707",
    "id": 303408946,
    "user": {
      "login": "oikonomopo",
      "id": 8699606,
      "avatar_url": "https://avatars0.githubusercontent.com/u/8699606?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oikonomopo",
      "html_url": "https://github.com/oikonomopo",
      "followers_url": "https://api.github.com/users/oikonomopo/followers",
      "following_url": "https://api.github.com/users/oikonomopo/following{/other_user}",
      "gists_url": "https://api.github.com/users/oikonomopo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oikonomopo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oikonomopo/subscriptions",
      "organizations_url": "https://api.github.com/users/oikonomopo/orgs",
      "repos_url": "https://api.github.com/users/oikonomopo/repos",
      "events_url": "https://api.github.com/users/oikonomopo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oikonomopo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-23T14:05:43Z",
    "updated_at": "2017-05-23T14:05:43Z",
    "body": "[From mine similar Q/A at SO][1]:\r\nIt's about opening app and pass parameters with deep linking using Electron for both platforms (macOS/win32).\r\n![alt text](https://raw.githubusercontent.com/oikonomopo/electron-deep-linking-osx/master/electron-deeplinking-osx-example.gif)\r\n\r\n----------\r\n\r\n> Minimal electron project with deep linking capabilities in macOS/win32 platforms (Single Instance Application) ['electron-deep-linking-mac-win' on GitHub][2].\r\n\r\n\r\n----------\r\n\r\n`package.json`:\r\n\r\n    {\r\n      \"name\": \"electron-deeplinking-macos-win32\",\r\n      \"version\": \"0.0.1\",\r\n      \"description\": \"Minimal Electron application with deep inking (macOS/win32)\",\r\n      \"main\": \"main.js\",\r\n      \"scripts\": {\r\n        \"start\": \"electron .\",\r\n        \"pack\": \"build --dir\",\r\n        \"dist\": \"build\"\r\n      },\r\n      \"repository\": \"https://github.com/oikonomopo/electron-deep-linking-osx\",\r\n      \"author\": \"oikonomopo\",\r\n      \"license\": \"CC0-1.0\",\r\n      \"devDependencies\": {\r\n        \"electron\": \"1.6.6\",\r\n        \"electron-builder\": \"17.1.2\"\r\n      },\r\n      \"build\": {\r\n        \"appId\": \"oikonomopo.electron-deeplinking-macos-win32\",\r\n        \"protocols\": {\r\n          \"name\": \"electron-deep-linking\",\r\n          \"schemes\": [\"myapp\"]\r\n        },\r\n        \"mac\": {\r\n          \"category\": \"public.app-category.Reference\"\r\n        },\r\n        \"win\": {\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n----------\r\n\r\n `main.js`:\r\n\r\n    const {app, BrowserWindow} = require('electron')\r\n    // Module with utilities for working with file and directory paths.\r\n    const path = require('path')\r\n    // Module with utilities for URL resolution and parsing.\r\n    const url = require('url')\r\n    \r\n    // Keep a global reference of the window object, if you don't, the window will\r\n    // be closed automatically when the JavaScript object is garbage collected.\r\n    let mainWindow\r\n    \r\n    // Deep linked url\r\n    let deeplinkingUrl\r\n    \r\n    // Force Single Instance Application\r\n    const shouldQuit = app.makeSingleInstance((argv, workingDirectory) => {\r\n      // Someone tried to run a second instance, we should focus our window.\r\n    \r\n      // Protocol handler for win32\r\n      // argv: An array of the second instance’s (command line / deep linked) arguments\r\n      if (process.platform == 'win32') {\r\n        // Keep only command line / deep linked arguments\r\n        deeplinkingUrl = argv.slice(1)\r\n      }\r\n      logEverywhere(\"app.makeSingleInstance# \" + deeplinkingUrl)\r\n    \r\n      if (win) {\r\n        if (win.isMinimized()) win.restore()\r\n            win.focus()\r\n      }\r\n    })\r\n    if (shouldQuit) {\r\n        app.quit()\r\n        return\r\n    }\r\n    \r\n    function createWindow () {\r\n      // Create the browser window.\r\n      mainWindow = new BrowserWindow({width: 800, height: 600})\r\n    \r\n      // and load the index.html of the app.\r\n      mainWindow.loadURL(url.format({\r\n        pathname: path.join(__dirname, 'index.html'),\r\n        protocol: 'file:',\r\n        slashes: true\r\n      }))\r\n    \r\n      // Open the DevTools.\r\n      mainWindow.webContents.openDevTools()\r\n    \r\n      // Protocol handler for win32\r\n      if (process.platform == 'win32') {\r\n        // Keep only command line / deep linked arguments\r\n        deeplinkingUrl = process.argv.slice(1)\r\n      }\r\n      logEverywhere(\"createWindow# \" + deeplinkingUrl)\r\n    \r\n      // Emitted when the window is closed.\r\n      mainWindow.on('closed', function () {\r\n        // Dereference the window object, usually you would store windows\r\n        // in an array if your app supports multi windows, this is the time\r\n        // when you should delete the corresponding element.\r\n        mainWindow = null\r\n      })\r\n    }\r\n    \r\n    // This method will be called when Electron has finished\r\n    // initialization and is ready to create browser windows.\r\n    // Some APIs can only be used after this event occurs.\r\n    app.on('ready', createWindow)\r\n    \r\n    // Quit when all windows are closed.\r\n    app.on('window-all-closed', function () {\r\n      // On OS X it is common for applications and their menu bar\r\n      // to stay active until the user quits explicitly with Cmd + Q\r\n      if (process.platform !== 'darwin') {\r\n        app.quit()\r\n      }\r\n    })\r\n    \r\n    app.on('activate', function () {\r\n      // On OS X it's common to re-create a window in the app when the\r\n      // dock icon is clicked and there are no other windows open.\r\n      if (mainWindow === null) {\r\n        createWindow()\r\n      }\r\n    })\r\n    \r\n    // Define custom protocol handler. Deep linking works on packaged versions of the application!\r\n    app.setAsDefaultProtocolClient('myapp')\r\n    \r\n    // Protocol handler for osx\r\n    app.on('open-url', function (event, url) {\r\n      event.preventDefault()\r\n      deeplinkingUrl = url\r\n      logEverywhere(\"open-url# \" + deeplinkingUrl)\r\n    })\r\n    \r\n    // Log both at dev console and at running node console instance\r\n    function logEverywhere(s) {\r\n        console.log(s)\r\n        if (mainWindow && mainWindow.webContents) {\r\n            mainWindow.webContents.executeJavaScript(`console.log(\"${s}\")`)\r\n        }\r\n    }\r\n\r\nmain.js code description:\r\n\r\n - At `let deeplinkingUrl` we keep the provided url.\r\n\r\n - At macOS platform this is captured at [`'open-url'` event][3], we set it with `deeplinkingUrl = url`! (See `// Protocol handler for osx`)\r\n\r\n -  At win32 platform this is saved at [`process.argv`][4] together with other arguments. To get only the provided url, `deeplinkingUrl = argv.slice(1)`.  (See `// Protocol handler for win32`)\r\n\r\n -  As [@Aurélien Nicolas][5] mentions, at [`app.makeSingleInstance` method][6] we check in which platform we are and we set `deeplinkingUrl` accordingly! If we are at win32 platform, the url is located at `argv` variable from callback, else at macOS should have already been set at `'open-url'` event! (See `// Force Single Instance Application`)\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/43912119/open-app-and-pass-parameters-with-deep-linking-using-electron-macos\r\n  [2]: https://github.com/oikonomopo/electron-deep-linking-mac-win\r\n  [3]: https://electron.atom.io/docs/api/app/#event-open-url-macos\r\n  [4]: https://nodejs.org/api/process.html#process_process_argv\r\n  [5]: https://stackoverflow.com/questions/38458857/electron-url-scheme-open-url-event#answer-39297057\r\n  [6]: https://electron.atom.io/docs/api/app/#appmakesingleinstancecallback"
  }
]