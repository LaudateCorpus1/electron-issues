[
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255134968",
    "html_url": "https://github.com/electron/electron/pull/7682#issuecomment-255134968",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7682",
    "id": 255134968,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T15:11:21Z",
    "updated_at": "2016-10-20T15:12:01Z",
    "body": "It doesn't always return an object though?  I personally went with \"any\" as it fits with the return type (literally anything, could be a function, number, Etc.).  And it's what other syntax's use to describe unknown variable types (such as Typescript)\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255141059",
    "html_url": "https://github.com/electron/electron/pull/7682#issuecomment-255141059",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7682",
    "id": 255141059,
    "user": {
      "login": "tong",
      "id": 203646,
      "avatar_url": "https://avatars2.githubusercontent.com/u/203646?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tong",
      "html_url": "https://github.com/tong",
      "followers_url": "https://api.github.com/users/tong/followers",
      "following_url": "https://api.github.com/users/tong/following{/other_user}",
      "gists_url": "https://api.github.com/users/tong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tong/subscriptions",
      "organizations_url": "https://api.github.com/users/tong/orgs",
      "repos_url": "https://api.github.com/users/tong/repos",
      "events_url": "https://api.github.com/users/tong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T15:31:52Z",
    "updated_at": "2016-10-20T15:31:52Z",
    "body": "I am working on auto generation of type descriptions for haxe and this creates an unnecessary [patch](https://github.com/tong/hxelectron/blob/generate-externs/Run.hx#L216) and [type](https://github.com/tong/hxelectron/blob/generate-externs/src/electron/Any.hx). Also it's the only occurrence in all docs where a non existing type is used.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255141804",
    "html_url": "https://github.com/electron/electron/pull/7682#issuecomment-255141804",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7682",
    "id": 255141804,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T15:34:28Z",
    "updated_at": "2016-10-20T15:36:55Z",
    "body": "I am unfamiliar with haxe but if we change it to object it will technically be incorrect.\n\nAlso changing will result in a manually patch for other syntax's (typescript).\n\nI still feel \"any\" is the best description of a return type that literally could be anything.  Does haxe have an equivalent type for \"anything\"?\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255145147",
    "html_url": "https://github.com/electron/electron/pull/7682#issuecomment-255145147",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7682",
    "id": 255145147,
    "user": {
      "login": "tong",
      "id": 203646,
      "avatar_url": "https://avatars2.githubusercontent.com/u/203646?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tong",
      "html_url": "https://github.com/tong",
      "followers_url": "https://api.github.com/users/tong/followers",
      "following_url": "https://api.github.com/users/tong/following{/other_user}",
      "gists_url": "https://api.github.com/users/tong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tong/subscriptions",
      "organizations_url": "https://api.github.com/users/tong/orgs",
      "repos_url": "https://api.github.com/users/tong/repos",
      "events_url": "https://api.github.com/users/tong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T15:46:09Z",
    "updated_at": "2016-10-20T15:46:09Z",
    "body": "It's mapped to haxe 'Dynamic' therefore working as no type checks are made, still not correct since it's the only place where a fictional type description (which doesn't exists in js either) is used.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255246071",
    "html_url": "https://github.com/electron/electron/pull/7682#issuecomment-255246071",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7682",
    "id": 255246071,
    "user": {
      "login": "MarshallOfSound",
      "id": 6634592,
      "avatar_url": "https://avatars0.githubusercontent.com/u/6634592?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarshallOfSound",
      "html_url": "https://github.com/MarshallOfSound",
      "followers_url": "https://api.github.com/users/MarshallOfSound/followers",
      "following_url": "https://api.github.com/users/MarshallOfSound/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarshallOfSound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarshallOfSound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarshallOfSound/subscriptions",
      "organizations_url": "https://api.github.com/users/MarshallOfSound/orgs",
      "repos_url": "https://api.github.com/users/MarshallOfSound/repos",
      "events_url": "https://api.github.com/users/MarshallOfSound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarshallOfSound/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-20T22:29:17Z",
    "updated_at": "2016-10-20T22:29:17Z",
    "body": "We somehow need to indicate it's return value is \"anything\".  `Object` is just incorrect and you have to somehow map it to `Dynamic` anyway in your haxe definition.\n\nI'm reasonably convinced this should stay as is\n/cc @zeke \n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255478004",
    "html_url": "https://github.com/electron/electron/pull/7682#issuecomment-255478004",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7682",
    "id": 255478004,
    "user": {
      "login": "zeke",
      "id": 2289,
      "avatar_url": "https://avatars2.githubusercontent.com/u/2289?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zeke",
      "html_url": "https://github.com/zeke",
      "followers_url": "https://api.github.com/users/zeke/followers",
      "following_url": "https://api.github.com/users/zeke/following{/other_user}",
      "gists_url": "https://api.github.com/users/zeke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zeke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zeke/subscriptions",
      "organizations_url": "https://api.github.com/users/zeke/orgs",
      "repos_url": "https://api.github.com/users/zeke/repos",
      "events_url": "https://api.github.com/users/zeke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zeke/received_events",
      "type": "User",
      "site_admin": true
    },
    "created_at": "2016-10-21T22:13:52Z",
    "updated_at": "2016-10-21T22:13:52Z",
    "body": "> I still feel \"any\" is the best description of a return type that literally could be anything.\n\nI agree with this ☝️ \n\n@tong I think your best option is to rename instances of `any` to whatever works best for your purposes.\n"
  },
  {
    "url": "https://api.github.com/repos/electron/electron/issues/comments/255484586",
    "html_url": "https://github.com/electron/electron/pull/7682#issuecomment-255484586",
    "issue_url": "https://api.github.com/repos/electron/electron/issues/7682",
    "id": 255484586,
    "user": {
      "login": "tong",
      "id": 203646,
      "avatar_url": "https://avatars2.githubusercontent.com/u/203646?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tong",
      "html_url": "https://github.com/tong",
      "followers_url": "https://api.github.com/users/tong/followers",
      "following_url": "https://api.github.com/users/tong/following{/other_user}",
      "gists_url": "https://api.github.com/users/tong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tong/subscriptions",
      "organizations_url": "https://api.github.com/users/tong/orgs",
      "repos_url": "https://api.github.com/users/tong/repos",
      "events_url": "https://api.github.com/users/tong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tong/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-21T22:57:43Z",
    "updated_at": "2016-10-21T22:57:43Z",
    "body": "Cannot agree but ok, we can easily workaround this. Thanks.\n"
  }
]